{"version":3,"file":"ACLService-e19daf7c.js","sources":["../../src/services/ACLService.ts"],"sourcesContent":["import { IRouteAccessModel } from \"components/interface/common\";\nimport {\n  getAccessLevel,\n  isAclApplicable,\n  saveRouteAccessControlToStorage,\n} from \"components/utils/Helper\";\nimport { ACL_SESSION_STORAGE } from \"components/utils/Constant\";\nimport { getLocalStorage } from \"utils/CommonUtil\";\nimport { LOCAL_STORAGE } from \"utils/Constant\";\n\nconst DUMMY_ROUTE_ACL_OBJ: IRouteAccessModel = {\n  path: \"\",\n  create: false,\n  update: false,\n  read: false,\n  delete: false,\n  softDelete: false,\n  approve: false,\n};\nclass ACLService {\n  isFormDirty(): boolean {\n    const sessionStorageKeys = Object.keys(sessionStorage);\n    console.log(sessionStorageKeys);\n    let isDirtyCheck = false;\n    for (const element of sessionStorageKeys) {\n      const key = element;\n      isDirtyCheck = key.includes(ACL_SESSION_STORAGE.ACL_GUARD_DIRTY_STATUS_PREFIX);\n      if (isDirtyCheck) break;\n    }\n    return isDirtyCheck;\n  }\n\n  isAclApplicable(): boolean {\n    return isAclApplicable();\n  }\n\n  isRouteHasAccess(path: string): boolean {\n    const allRoutes = JSON.parse(getLocalStorage(LOCAL_STORAGE.MENU_LIST_MAPPING) || \"[]\");\n    if (allRoutes.length > 0) {\n      console.log(\"path\", path);\n      let routeInfo: any = {};\n      const route = allRoutes.find((route: any) => {\n        return path.includes(route.path);\n      });\n      if (route) {\n        routeInfo = route;\n        const routeAccessModelObj: IRouteAccessModel = {\n          path: path,\n          create: routeInfo.roleFeature.create,\n          update: routeInfo.roleFeature.update,\n          read: routeInfo.roleFeature.read,\n          delete: routeInfo.roleFeature.delete,\n          softDelete: false,\n          approve: routeInfo.roleFeature.approve,\n        };\n        saveRouteAccessControlToStorage(routeAccessModelObj);\n      }\n\n      if (route?.roleFeature?.read) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async getRouteAccessModel(path: string): Promise<IRouteAccessModel> {\n    const allRoutes = JSON.parse(getLocalStorage(LOCAL_STORAGE.MENU_LIST_MAPPING) || \"[]\");\n    let routeInfo: any = {};\n    if (allRoutes.length > 0) {\n      const route = allRoutes.find((route: any) => {\n        return path.includes(route.path);\n      });\n      if (route) {\n        routeInfo = route;\n      }\n    }\n\n    const routeAccessModelObj: IRouteAccessModel = {\n      path: path,\n      create: routeInfo.roleFeature.create,\n      update: routeInfo.roleFeature.update,\n      read: routeInfo.roleFeature.read,\n      delete: routeInfo.roleFeature.delete,\n      softDelete: false,\n      approve: routeInfo.roleFeature.approve,\n    };\n    return routeAccessModelObj;\n  }\n\n  saveRouteAccessControl(routeAccessModel: IRouteAccessModel) {\n    saveRouteAccessControlToStorage(routeAccessModel);\n  }\n\n  getRouteAccessControl(): IRouteAccessModel {\n    return getAccessLevel();\n  }\n\n  clearFormDirty() {\n    const sessionStorageKeys = Object.keys(sessionStorage);\n    console.log(sessionStorageKeys);\n    let isDirtyCheck = false;\n    for (const element of sessionStorageKeys) {\n      const key = element;\n      isDirtyCheck = key.includes(ACL_SESSION_STORAGE.ACL_GUARD_DIRTY_STATUS_PREFIX);\n      if (isDirtyCheck) {\n        sessionStorage.removeItem(key);\n      }\n    }\n  }\n}\n\nexport default new ACLService();\n"],"names":["ACLService","sessionStorageKeys","isDirtyCheck","element","ACL_SESSION_STORAGE","isAclApplicable","path","allRoutes","getLocalStorage","LOCAL_STORAGE","routeInfo","route","routeAccessModelObj","saveRouteAccessControlToStorage","_a","routeAccessModel","getAccessLevel","key","ACLService$1"],"mappings":"gFAmBA,MAAMA,CAAW,CACf,aAAuB,CACf,MAAAC,EAAqB,OAAO,KAAK,cAAc,EACrD,QAAQ,IAAIA,CAAkB,EAC9B,IAAIC,EAAe,GACnB,UAAWC,KAAWF,EAGhB,GADWC,EADHC,EACO,SAASC,EAAoB,6BAA6B,EACzEF,EAAc,MAEb,OAAAA,CACT,CAEA,iBAA2B,CACzB,OAAOG,EAAgB,CACzB,CAEA,iBAAiBC,EAAuB,OACtC,MAAMC,EAAY,KAAK,MAAMC,EAAgBC,EAAc,iBAAiB,GAAK,IAAI,EACjF,GAAAF,EAAU,OAAS,EAAG,CAChB,QAAA,IAAI,OAAQD,CAAI,EACxB,IAAII,EAAiB,CAAA,EACrB,MAAMC,EAAQJ,EAAU,KAAMI,GACrBL,EAAK,SAASK,EAAM,IAAI,CAChC,EACD,GAAIA,EAAO,CACGD,EAAAC,EACZ,MAAMC,EAAyC,CAC7C,KAAAN,EACA,OAAQI,EAAU,YAAY,OAC9B,OAAQA,EAAU,YAAY,OAC9B,KAAMA,EAAU,YAAY,KAC5B,OAAQA,EAAU,YAAY,OAC9B,WAAY,GACZ,QAASA,EAAU,YAAY,OAAA,EAEjCG,EAAgCD,CAAmB,EAGjD,IAAAE,EAAAH,GAAA,YAAAA,EAAO,cAAP,MAAAG,EAAoB,KACf,MAAA,GAGJ,MAAA,EACT,CAEA,MAAM,oBAAoBR,EAA0C,CAClE,MAAMC,EAAY,KAAK,MAAMC,EAAgBC,EAAc,iBAAiB,GAAK,IAAI,EACrF,IAAIC,EAAiB,CAAA,EACjB,GAAAH,EAAU,OAAS,EAAG,CACxB,MAAMI,EAAQJ,EAAU,KAAMI,GACrBL,EAAK,SAASK,EAAM,IAAI,CAChC,EACGA,IACUD,EAAAC,GAaT,MATwC,CAC7C,KAAAL,EACA,OAAQI,EAAU,YAAY,OAC9B,OAAQA,EAAU,YAAY,OAC9B,KAAMA,EAAU,YAAY,KAC5B,OAAQA,EAAU,YAAY,OAC9B,WAAY,GACZ,QAASA,EAAU,YAAY,OAAA,CAGnC,CAEA,uBAAuBK,EAAqC,CAC1DF,EAAgCE,CAAgB,CAClD,CAEA,uBAA2C,CACzC,OAAOC,EAAe,CACxB,CAEA,gBAAiB,CACT,MAAAf,EAAqB,OAAO,KAAK,cAAc,EACrD,QAAQ,IAAIA,CAAkB,EAC9B,IAAIC,EAAe,GACnB,UAAWC,KAAWF,EAAoB,CACxC,MAAMgB,EAAMd,EACGD,EAAAe,EAAI,SAASb,EAAoB,6BAA6B,EACzEF,GACF,eAAe,WAAWe,CAAG,EAGnC,CACF,CAEA,MAAeC,EAAA,IAAIlB"}