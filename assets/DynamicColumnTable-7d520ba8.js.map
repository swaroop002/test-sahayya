{"version":3,"file":"DynamicColumnTable-7d520ba8.js","sources":["../../src/views/transaction/PageCAM/Sections/BankingSummray/BankingSummary.tsx","../../src/views/transaction/PageCAM/Sections/IncomeEligibilityCalculation/IncomeEligibilityCalculation.tsx","../../src/components/DynamicColumnTable/DynamicColumnTable.tsx"],"sourcesContent":["import AclGuard from \"components/AclGuard\";\nimport { Column, EditableComponentRef } from \"components/EditableTableV2/EditableTableV2\";\nimport ErrorDialog from \"components/ErrorDialog/ErrorDialog\";\nimport InputBox from \"components/InputBox\";\nimport ReadOnlyTable from \"components/ReadOnlyTable/ReadOnlyTable\";\nimport SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport ToastCustom from \"components/Toast\";\nimport i18n from \"i18n\";\nimport { numberFormatter } from \"locale\";\nimport React, { forwardRef, useEffect, useRef, useState } from \"react\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { getStandardValidator, messageReplace } from \"utils/CommonUtil\";\nimport {\n  CAM_APPLICANT_TYPE,\n  CAM_APPLICANT_TYPE_OPTIONS,\n  INPUT_STYLE_TYPE,\n  PAGE_MODE,\n  TOAST_STYLE_TYPE,\n} from \"utils/Constant\";\nimport { getNumber, showCurrency } from \"../../Helper\";\nimport SkeletonCustom from \"components/Skeleton/Skeleton\";\n\ninterface IProps {\n  isLoading?: boolean;\n  data?: ICamBankingSummaryRowData[];\n  // getDetailsCallback: () => void;\n}\n\nexport interface ICamBankingSummaryRowData {\n  uid?: string;\n  applicantType: string;\n  accountHolderName: string;\n  bankName: string;\n  accountType: string;\n  accountNumber: number;\n  odOrCcLimit: number;\n  twelveMonthAbb: number;\n  sixMonthAbb: number;\n  threeMonthAbb: number;\n  twelveMonthCreditAvg: number;\n  currentSixMonthCredit: number;\n  previousSixMonthCredit: number;\n  creditRate: number;\n  inwardCheckReturn: number;\n  outwardCheckReturn: number;\n}\n\nconst initialCamBankingSummaryTableRowData: ICamBankingSummaryRowData = {\n  uid: \"\",\n  applicantType: \"\",\n  accountHolderName: \"\",\n  bankName: \"\",\n  accountType: \"\",\n  accountNumber: 0,\n  odOrCcLimit: 0,\n  twelveMonthAbb: 0,\n  sixMonthAbb: 0,\n  threeMonthAbb: 0,\n  twelveMonthCreditAvg: 0,\n  currentSixMonthCredit: 0,\n  previousSixMonthCredit: 0,\n  creditRate: 0,\n  inwardCheckReturn: 0,\n  outwardCheckReturn: 0,\n};\n\nconst BankingSummary: React.FC<IProps> = forwardRef((props, ref) => {\n  const { data, isLoading } = props;\n\n  /*\n    -------------------------------------------------------\n      State\n    -------------------------------------------------------\n    */\n  const [pageMode, setPageMode] = useState(PAGE_MODE.VIEW);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n  // ref\n  const toastMessageRef = useRef(null);\n  const tableRef = React.useRef<EditableComponentRef>(null);\n\n  // --------------------------- validator initialization ---------------------- //\n  const [, forceUpdate] = useState<boolean>(false);\n\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n\n  // --------------------------- global variables ---------------------- //\n\n  /*\n     -------------------------------------------------------\n       useEffect\n     -------------------------------------------------------\n   */\n\n  // useEffect(() => {\n  //   console.log(\"call  api if required\");\n  // }, [data]);\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      // @ts-ignore: will be fixed in future\n      toastMessageRef?.current?.showFunction();\n      setToastMessage(\"\");\n    }\n  }, [toastMessage, triggerToast]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n\n  /*\n    -------------------------------------------------------\n      Service Calls\n    -------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n      Handlers\n    -------------------------------------------------------\n  */\n\n  /* \n    --------------------------------------------------------\n    Validators:\n    --------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n      Button Click Handlers\n    -------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n      Helper Functions\n    -------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n      Sectional Rendering\n    -------------------------------------------------------\n  */\n  const renderApplicantType = (rowData: ICamBankingSummaryRowData) => {\n    return (\n      <div className=\"pt-4\">\n        <SimpleDropDown\n          // hideLabel\n          placeholder=\"placeholder.cam.applicantType\"\n          name={`applicantType${rowData?.uid}`}\n          value={rowData?.applicantType}\n          optionLabel=\"name\"\n          optionValue=\"code\"\n          variant={INPUT_STYLE_TYPE.PRIMARY}\n          options={CAM_APPLICANT_TYPE_OPTIONS}\n          disabled\n        />\n      </div>\n    );\n  };\n\n  const renderInputField = (\n    rowData: ICamBankingSummaryRowData,\n    options: { number?: boolean; currency?: boolean; field: keyof ICamBankingSummaryRowData }\n  ) => {\n    return (\n      <div className=\"pt-4\">\n        <InputBox\n          variant={INPUT_STYLE_TYPE.SECONDARY}\n          className={`${options?.number || options?.currency ? \"text-right\" : \"\"}`}\n          value={\n            options?.currency\n              ? showCurrency(rowData?.[options?.field] ?? \"\")\n              : rowData?.[options?.field]\n          }\n          disabled\n          // hideLabel\n          // hideErrorRow\n        />\n      </div>\n    );\n  };\n\n  /*\n    -------------------------------------------------------\n    Main Rendering\n    -------------------------------------------------------\n  */\n  return (\n    <>\n      <div className=\"flex flex-col gap-3 border border-primary-ptext-500  rounded-xl p-5 \">\n        <AclGuard override={{ read: pageMode === PAGE_MODE.VIEW }}>\n          <div className=\" grid grid-cols-4 gap-3  \">\n            <div className=\"col-span-4\">\n              {/* use standardDataFormatPromise for below table data not editable */}\n              {isLoading ? (\n                <SkeletonCustom\n                  height=\"19.375rem\"\n                  width=\"100%\"\n                  borderRadius=\"8px\"\n                  animation=\"wave\"\n                />\n              ) : (\n                <ReadOnlyTable\n                  ref={tableRef}\n                  dataKey=\"uid\"\n                  value={data}\n                  className=\"table-auto-height\"\n                >\n                  <Column\n                    header={i18n.t(\"label.cam.typeOfApplicant\")}\n                    className=\"text-primary-ptext-1000 text-left text-xs h-12 pl-6\"\n                    body={renderApplicantType}\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.accountNameHolder\")}\n                    className=\"text-primary-ptext-1000 text-left text-xs h-12 pl-6 min-w-49\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, { field: \"accountHolderName\" })\n                    }\n                    // style={{minWidth:\"200px\"}}\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.bankName\")}\n                    className=\"text-left text-primary-ptext-1000 text-xs h-12 pl-6  min-w-49\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, { field: \"bankName\" })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.accountType\")}\n                    className=\"text-left text-primary-ptext-1000 text-xs h-12 pl-6  min-w-49\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, { field: \"accountType\" })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.accountNumber\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, { field: \"accountNumber\", number: true })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.od/ccLimit\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"odOrCcLimit\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.12MonthAbb\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"twelveMonthAbb\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.6MonthAbb\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"sixMonthAbb\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.3MonthAbb\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"threeMonthAbb\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.12MonthsCreditAverage\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"twelveMonthCreditAvg\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.current6MonthsCredit\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"currentSixMonthCredit\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.previous6MonthsCredit\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"previousSixMonthCredit\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.creditRate(both)\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"creditRate\",\n                        currency: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.inwardChequeReturn%\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 pl-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"inwardCheckReturn\",\n                        number: true,\n                      })\n                    }\n                  />\n                  <Column\n                    header={i18n.t(\"label.cam.outwardChequeReturn%\")}\n                    className=\"table-header-right text-primary-ptext-1000 text-xs h-12 px-6\"\n                    body={(rowData: ICamBankingSummaryRowData) =>\n                      renderInputField(rowData, {\n                        field: \"outwardCheckReturn\",\n                        number: true,\n                      })\n                    }\n                  />\n                </ReadOnlyTable>\n              )}\n            </div>\n          </div>\n        </AclGuard>\n      </div>\n\n      <ToastCustom\n        position={\"bottom-right\"}\n        ref={toastMessageRef}\n        toastText={toastMessage}\n        variant={TOAST_STYLE_TYPE.PRIMARY}\n      />\n\n      <ErrorDialog\n        onHide={() => {\n          setShowDialogAPIError(false);\n          setErrorMessage(\"\");\n        }}\n        visible={showDialogAPIError}\n        errorMessage={errorMessage}\n      />\n    </>\n  );\n});\n\nexport default BankingSummary;\n","import AclGuard from \"components/AclGuard\";\nimport ErrorDialog from \"components/ErrorDialog/ErrorDialog\";\nimport RichTextEditor from \"components/RichTextEditor/RichTextEditor\";\nimport SaveComponent from \"components/Save/SaveComponent\";\nimport SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport SkeletonCustom from \"components/Skeleton/Skeleton\";\nimport Text from \"components/Text/Text\";\nimport ToastCustom from \"components/Toast\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CamService from \"services/transaction/CamService\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  getStandardValidator,\n  messageReplace,\n  parseStandardAPIErrorMessage,\n} from \"utils/CommonUtil\";\nimport { PAGE_MODE, STATIC_MASTER_TYPE_TOAST_TEXT, TOAST_STYLE_TYPE } from \"utils/Constant\";\n\nexport interface ICamIncomeEligibilityCalculationPageObj {\n  editorText: string;\n  errorMessage: string;\n}\n\nexport const initialCamIncomeEligibilityCalculationPageObj: ICamIncomeEligibilityCalculationPageObj = {\n  editorText: \"\",\n  errorMessage: \"\",\n};\n\ninterface IEditorRef {\n  editor: {\n    getContent: () => void;\n    plugins: {\n      wordcount: {\n        body: {\n          getCharacterCount: () => any;\n        };\n      };\n    };\n  };\n}\n\ninterface IProps {\n  isLoading: boolean;\n  data: ICamIncomeEligibilityCalculationPageObj;\n  getDetailsCallback?: () => Promise<void>;\n}\n\nconst IncomeEligibilityCalculation: React.FC<IProps> = forwardRef((props, ref) => {\n  const { data, isLoading, getDetailsCallback } = props;\n  const params: { loanUid?: string; stageUid?: string } = useParams();\n  /*\n    -------------------------------------------------------\n      State\n    -------------------------------------------------------\n  */\n  const [pageObj, setPageObj] = useState<ICamIncomeEligibilityCalculationPageObj>({\n    ...initialCamIncomeEligibilityCalculationPageObj,\n  });\n  const [pageMode, setPageMode] = useState(PAGE_MODE.VIEW);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n\n  // ref\n  const toastMessageRef = useRef(null);\n  const editorRef = useRef<IEditorRef>(null);\n\n  // --------------------------- validator initialization ---------------------- //\n  const [, forceUpdate] = useState<boolean>(false);\n\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n\n  // --------------------------- global variables ---------------------- //\n\n  /*\n     -------------------------------------------------------\n       useEffect\n     -------------------------------------------------------\n   */\n\n  useEffect(() => {\n      setPageObj((prevObj) => ({\n        ...prevObj,\n        ...data,\n      }));\n  }, [data]);\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      // @ts-ignore: will be fixed in future\n      toastMessageRef?.current?.showFunction();\n      setToastMessage(\"\");\n    }\n  }, [toastMessage, triggerToast]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n\n  /*\n    -------------------------------------------------------\n      Service Calls\n    -------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n      Handlers\n    -------------------------------------------------------\n  */\n  const handleEditorValidation = (e: any) => {\n    if (validateEditor()) {\n      if (pageObj?.errorMessage) {\n        setPageObj((prevPageObj) => ({ ...prevPageObj, errorMessage: \"\" }));\n      }\n    }\n  };\n\n  /* \n    --------------------------------------------------------\n    Validators:\n    --------------------------------------------------------\n  */\n\n  const validateEditor = () => {\n    console.log(\"editor \", editorRef);\n\n    const wordcount = editorRef?.current?.editor?.plugins?.wordcount?.body.getCharacterCount();\n\n    if (wordcount < 1) {\n      setPageObj((prevState) => {\n        return {\n          ...prevState,\n          errorMessage: \"Mandatory\",\n        };\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  /*\n    -------------------------------------------------------\n      Button Click Handlers\n    -------------------------------------------------------\n  */\n\n  const onSave = async () => {\n    if (validateEditor()) {\n      const payload = enrichForSave();\n      try {\n          await CamService.updateIncomeEligibilityComment(payload);\n        setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n        setTriggerToast(!triggerToast);\n        setPageMode(PAGE_MODE.VIEW);\n        getDetailsCallback?.();\n      } catch (error) {\n        setErrorMessage(parseStandardAPIErrorMessage(error));\n      }\n    }\n  };\n\n  const onEdit = () => setPageMode(PAGE_MODE.EDIT);\n\n  const onCancel = () => {\n    setPageMode(PAGE_MODE.VIEW);\n    resetValidator();\n    getDetailsCallback?.();\n  };\n\n\n  /*\n    -------------------------------------------------------\n      Helper Functions\n    -------------------------------------------------------\n  */\n\n    const enrichForSave = () => {\n      return {\n       loan:{\n        uid:params?.loanUid\n       },\n       stage:{\n        uid:params?.stageUid\n       },\n       remarksOnIncomeEligibility:editorRef.current?.editor?.getContent(),\n      };\n    };\n\n  const resetValidator = () => {\n    setPageObj((prevState) => {\n      return {\n        ...prevState,\n        errorMessage: \"\",\n      };\n    });\n  };\n\n  /*\n    -------------------------------------------------------\n      Sectional Renders\n    -------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n    Main Renders\n    -------------------------------------------------------\n  */\n\n  return (\n    <div>\n      <SaveComponent\n        title={\"\"}\n        pageMode={pageMode}\n        disabled={isLoading}\n        onSave={onSave}\n        onCancel={onCancel}\n        onEdit={onEdit}\n      >\n        {isLoading ? (\n          <SkeletonCustom height=\"19.375rem\" width=\"100%\" borderRadius=\"8px\" animation=\"wave\" />\n        ) : (\n          <AclGuard override={{ read: pageMode === PAGE_MODE.VIEW }}>\n            <div className=\"grid grid-cols-4 gap-3 \">\n              <div className=\"col-span-4\">\n                <RichTextEditor\n                  ref={editorRef}\n                  validation={{ errorMessage: pageObj.errorMessage }}\n                  initialValue={pageObj.editorText}\n                  onChange={handleEditorValidation}\n                  height={\"400x\"}\n                  disabled={pageMode === PAGE_MODE.VIEW}\n                />\n              </div>\n            </div>\n          </AclGuard>\n        )}\n      </SaveComponent>\n\n      <ToastCustom\n        position={\"bottom-right\"}\n        ref={toastMessageRef}\n        toastText={toastMessage}\n        variant={TOAST_STYLE_TYPE.PRIMARY}\n      />\n\n      <ErrorDialog\n        onHide={() => {\n          setShowDialogAPIError(false);\n          setErrorMessage(\"\");\n        }}\n        visible={showDialogAPIError}\n        errorMessage={errorMessage}\n      />\n    </div>\n  );\n});\n\nexport default IncomeEligibilityCalculation;\n","import InputBox from \"components/InputBox/InputBox\";\nimport Text from \"components/Text/Text\";\nimport React from \"react\";\nimport { INPUT_STYLE_TYPE } from \"utils/Constant\";\n\ninterface IProps {\n  rows: any[]; // {[column.key]:\"\" }[]\n  //rows={[{ DAY: 5 ,OCT2023: 100 ,NOV2023: 100 , DEC2023: 10},{ DAY: 10 ,OCT2023: 100 ,NOV2023: 100 , DEC2023: 10} ]}\n  columns: any[]; //  { label:\"Day/Month\" , key:\"DAY\" } { label:\"Oct 2023\" , key:\"OCT2023\" }\n  inputFields: string[]; // [\"OCT2023\",\"NOV2023\",\"DEC2023\"]\n  handleChange?: (e: any, options: { row: any; column: any; index: number }) => void;\n  //   columns={[\n  //     { label: \"Day/Month\", key: \"DAY\" },\n  //     { label: \"Oct 2023\", key: \"OCT2023\" },\n  //     { label: \"Nov 2023\", key: \"NOV2023\" },\n  //     { label: \"Dec 2023\", key: \"DEC2023\" },\n  //   ]}\n}\n\nconst DynamicColumnTable = (props: IProps) => {\n  const { rows, columns, inputFields, handleChange } = props;\n  return (\n    <div className=\"dynamic-table-wrapper\">\n      <table className=\"dynamic-table \">\n        <thead>\n          <tr className=\"dynamic-table-header-row\">\n            {columns?.map((column: any, index: any) => (\n              <th key={index} className=\"text-primary-ptext-1000  py-3 px-5 font-bold text-xs text-left \">\n                <Text className=\"\" label={column?.label} />\n              </th>\n            ))}\n           \n          </tr>\n        </thead>\n        <tbody className=\"dynamic-table-body\">\n          {rows.map((row, index: number) => (\n            <tr className=\"dynamic-table-row\">\n              {columns?.map((column: any) =>\n                inputFields.includes(column?.key) ? (\n                  <td\n                    key={column.key}\n                    className=\"text-primary-ptext-1000 text-right text-xs  p-1 h-12 pr-5 \"\n                  >\n                    <InputBox\n                      // hideLabel\n                      name=\"roi\"\n                      variant={INPUT_STYLE_TYPE.SECONDARY}\n                      value={row?.[column?.key] ?? \"\"}\n                      className=\"text-right min-w-37\"\n                      onChange={(e) => handleChange?.(e, { row, column, index })}\n                    />\n                  </td>\n                ) : (\n                  <td key={column.key} className=\" h-12 pr-5\">\n                    <Text\n                      className=\"text-primary-ptext-1000 text-xs pl-6 min-w-18 \"\n                      label={row?.[column?.key]?.toString()}\n                    />\n                  </td>\n                )\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DynamicColumnTable;\n"],"names":["BankingSummary","forwardRef","props","ref","data","isLoading","pageMode","setPageMode","useState","PAGE_MODE","toastMessage","setToastMessage","triggerToast","setTriggerToast","errorMessage","setErrorMessage","showDialogAPIError","setShowDialogAPIError","toastMessageRef","useRef","tableRef","React","forceUpdate","SimpleReactValidator","getStandardValidator","messageReplace","prev","useEffect","_a","renderApplicantType","rowData","jsx","SimpleDropDown","INPUT_STYLE_TYPE","CAM_APPLICANT_TYPE_OPTIONS","renderInputField","options","InputBox","showCurrency","jsxs","Fragment","AclGuard","SkeletonCustom","ReadOnlyTable","Column","i18n","ToastCustom","TOAST_STYLE_TYPE","ErrorDialog","initialCamIncomeEligibilityCalculationPageObj","IncomeEligibilityCalculation","getDetailsCallback","params","useParams","pageObj","setPageObj","editorRef","prevObj","handleEditorValidation","e","validateEditor","prevPageObj","_d","_c","_b","prevState","onSave","payload","enrichForSave","CamService","STATIC_MASTER_TYPE_TOAST_TEXT","error","parseStandardAPIErrorMessage","onEdit","onCancel","resetValidator","SaveComponent","RichTextEditor","DynamicColumnTable","rows","columns","inputFields","handleChange","column","index","Text","row"],"mappings":"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"}