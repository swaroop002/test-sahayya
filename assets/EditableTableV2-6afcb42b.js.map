{"version":3,"file":"EditableTableV2-6afcb42b.js","sources":["../../src/components/EditableTableV2/EditableTableV2.tsx"],"sourcesContent":["import SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport Text from \"components/Text/Text\";\nimport { DataTable, DataTableProps } from \"primereact/datatable\";\nimport React, { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport ShortUniqueId from \"short-unique-id\";\nimport { parseStandardAPIErrorMessage } from \"utils/CommonUtil\";\nexport const Column = (props: any) => {\n  return <React.Fragment />;\n};\n\nexport const MODE = {\n  CREATE: \"CREATE\",\n  UPDATE: \"UPDATE\",\n};\ninterface ITableData extends DataTableProps {\n  // [key: string]: any;\n  advanceSearch?: object;\n  search?: string;\n  standardDataFormatPromise?: any;\n  tableObj?: {\n    limit?: number;\n    loading?: boolean;\n    totalRecords?: number;\n    start?: number;\n    records?: any[];\n    search?: string;\n    page?: number;\n  };\n  isIgnoreInitialLoad?: boolean;\n  onUpdateCallback?: () => void;\n  uniqueKey: string;\n  mode?: keyof typeof MODE;\n  className?: string;\n  emptyMessage?: string | JSX.Element;\n  allRecords?: any[];\n  hideLegend?: boolean;\n  variant?: \"default\" | \"secondary\";\n  getApiResponseCallback?: (response: any) => void;\n}\n\nexport interface EditableComponentRef {\n  search: (e?: any) => void;\n  getCurrentRecords: () => any[];\n  addRow: (rowData: any) => void;\n  getAddedRecords: () => any[];\n  getLastAddedRecord: () => any[];\n  getUpdatedRecords: () => any[];\n  getDeletedRecords: () => any[];\n  reportDataChange: (rowDataObj: any) => void; // Adjust 'any' to the correct type\n  deleteRow: (rowDataObj: any) => void; // Adjust 'any' to the correct type\n  getTotalRecordsCount: () => void;\n  tableStatus: {\n    limit?: number;\n    loading?: boolean;\n    totalRecords?: number;\n    start?: number;\n    records?: any[];\n    search?: string;\n    page?: number;\n  };\n  loadingState: boolean;\n  clearAll: () => void;\n  reset: () => void;\n  getLoadingState:()=>boolean;\n}\n\nconst EditableTable = forwardRef<EditableComponentRef, ITableData>((props, ref) => {\n  const {\n    standardDataFormatPromise,\n    search,\n    advanceSearch,\n    isIgnoreInitialLoad,\n    onUpdateCallback,\n    uniqueKey,\n    className,\n    allRecords,\n    hideLegend,\n    variant,\n    getApiResponseCallback,\n    ...primeReactProps\n  } = props;\n  const isPageWisePagination = false;\n  const isOffSetStartWithZero = true;\n  const [dataTable, setDataTable] = useState({\n    limit: props.tableObj?.limit ?? 10,\n    loading: props.tableObj?.loading ?? true,\n    totalRecords: props.tableObj?.totalRecords ?? 0,\n    start: props.tableObj?.start ?? 0,\n    records: [] as any[],\n    search: props.search ?? \"\",\n    page: props.tableObj?.page ?? 0,\n    errorMessage: \"\",\n  });\n\n  const [startOffset] = useState(0);\n  const [isInitialLoad, setIsInitialLoad] = useState(false);\n\n  const [updatedRecords, setUpdatedRecords] = useState<any[]>([]);\n  const [addedRows, setAddedRows] = useState<any[]>([]);\n  const [deletedRows, setDeletedRows] = useState<any[]>([]);\n\n  /*\n  --------------------\n  Hooks\n  --------------------\n  */\n  useEffect(() => {\n    if (standardDataFormatPromise && !isIgnoreInitialLoad && MODE.UPDATE === props.mode) {\n      prepareParamAndCallPromise(null);\n      setIsInitialLoad(true);\n    } else {\n      setDataTable({\n        ...dataTable,\n        loading: false,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (standardDataFormatPromise && MODE.UPDATE === props.mode) {\n      prepareParamAndCallPromise(null);\n      setIsInitialLoad(true);\n    } else {\n      setDataTable({\n        ...dataTable,\n        loading: false,\n      });\n    }\n  }, [search]);\n\n  useEffect(() => {\n    if (onUpdateCallback) {\n      onUpdateCallback();\n    }\n  }, [dataTable]);\n\n  useImperativeHandle(ref, () => ({\n    search: () => {\n      searchFn(undefined, true);\n    },\n    getCurrentRecords,\n    getUpdatedRecords,\n    getAddedRecords,\n    getLastAddedRecord: getRecentAddedRecord,\n    getDeletedRecords,\n    getTotalRecordsCount: getTotalRecordsCount,\n    addRow: addRow,\n    reportDataChange,\n    deleteRow: deleteRow,\n    loadingState: dataTable.loading,\n    tableStatus: dataTable,\n    clearAll: clearAll,\n    reset: resetTable,\n    getLoadingState\n  }));\n\n  const getLoadingState = () => {\n   return true;\n  };\n\n  const searchFn = (e?: any, isSearchTriggered?: boolean) => {\n    resetTable();\n    if (isInitialLoad && props.mode === MODE.UPDATE) {\n      prepareParamAndCallPromise(e, isSearchTriggered);\n    } else {\n      populateRecords();\n    }\n  };\n\n  const prepareParamAndCallPromise = (e: any, isSearchTriggered?: boolean) => {\n    if (!standardDataFormatPromise) {\n      return;\n    }\n    setDataTable({\n      ...dataTable,\n      records: [],\n      loading: true,\n    });\n    const searchParams = {\n      start: props.rows ? props.tableObj?.start : dataTable.start,\n      limit: props.rows ? props.tableObj?.limit : dataTable.limit,\n      search: props.search ? props.search : dataTable.search,\n      page: isOffSetStartWithZero ? 0 : 1,\n    };\n\n    if (e) {\n      const page = e.page ? e.page : 0;\n      const rows = e.rows ? e.rows : 0;\n      // calculate the first record to fetch\n      let first = page * rows;\n      first = first + startOffset;\n\n      searchParams.start = first;\n      searchParams.page = page;\n    }\n\n    if (props.search) {\n      searchParams.search = search ?? \"\";\n    }\n\n    return props\n      .standardDataFormatPromise(\n        isPageWisePagination ? searchParams.page : searchParams.start,\n        searchParams.limit,\n        searchParams.search\n      )\n      .then((res: any) => {\n        if (res.data) {\n          if (variant === \"secondary\") {\n            setDataTable({\n              ...dataTable,\n              loading: false,\n              records: iterateOverRecordsForSecondary(res.data.results),\n              totalRecords: res.data.totalRecords,\n              start: searchParams.start ?? 0,\n              search: searchParams.search,\n              errorMessage:\"\"\n            });\n          } else {\n            setDataTable({\n              ...dataTable,\n              loading: false,\n              records: iterateOverRecords(res.data.results, isSearchTriggered),\n              totalRecords: res.data.totalRecords,\n              start: searchParams.start ?? 0,\n              search: searchParams.search,\n              errorMessage:\"\"\n            });\n          }\n\n          getApiResponseCallback?.(res?.data);\n        }\n      })\n      .catch((err: any) => {\n        setDataTable({\n          ...dataTable,\n          loading: false,\n          records: [],\n          totalRecords: 0,\n          start: searchParams.start ?? 0,\n          search: searchParams.search,\n          errorMessage: parseStandardAPIErrorMessage(err),\n        });\n        getApiResponseCallback?.(undefined);\n      });\n  };\n\n  // ENHANCEMENT: TO DO\n  // Need a property to indicated updated records;\n  const reportDataChange = (rowData: any) => {\n    let updatedRecordsLocal = [];\n    updatedRecordsLocal = dataTable.records.map((record: any) => {\n      if (record[uniqueKey] === rowData[uniqueKey]) {\n        return { ...rowData, isUpdated: true };\n      } else {\n        return record;\n      }\n    });\n    console.log(\"updatedRecordsLocal\", updatedRecordsLocal);\n\n    setDataTable({\n      ...dataTable,\n      records: updatedRecordsLocal,\n    });\n    console.log(\"rowData\", rowData);\n\n    // Maintain a separate state for updated records to use in the parent component & when the tab is changed or page is changed\n    const find = updatedRecords.find((record: any) => record[uniqueKey] === rowData[uniqueKey]);\n    console.log(\"find\", find);\n    if (!find) {\n      setUpdatedRecords([...updatedRecords, rowData]);\n    } else {\n      setUpdatedRecords(\n        updatedRecords.map((record: any) => {\n          if (record[uniqueKey] === rowData[uniqueKey]) {\n            console.log(\"record match\", record);\n\n            return { ...rowData, isUpdated: true };\n          } else {\n            return record;\n          }\n        })\n      );\n    }\n  };\n\n  // TO DO: IN FUTURE ENHANCEMENT\n  const addRow = (rowData: any) => {\n    console.log(\"addRow\", rowData);\n    const uid = new ShortUniqueId({ length: 5 });\n    const row = { ...rowData, uid: uid(), temp: true };\n    setAddedRows([...addedRows, row]);\n    setDataTable({\n      ...dataTable,\n      loading: false,\n      records: [row, ...dataTable.records],\n      totalRecords: dataTable.totalRecords + 1,\n    });\n  };\n\n  const deleteRow = (rowData: any) => {\n    console.log(\"deleteRow\", rowData);\n    const isTempRow = Object.hasOwnProperty.call(rowData, \"temp\");\n\n    if (isTempRow) {\n      setAddedRows(addedRows.filter((record: any) => record[uniqueKey] !== rowData[uniqueKey]));\n      setUpdatedRecords(\n        updatedRecords.filter((record: any) => record[uniqueKey] !== rowData[uniqueKey])\n      );\n      setDataTable({\n        ...dataTable,\n        records: dataTable.records.filter(\n          (record: any) => record[uniqueKey] !== rowData[uniqueKey]\n        ),\n      });\n      return;\n    }\n    // this is for existing records which are not temp\n    let deletedRecordsLocal = [];\n    deletedRecordsLocal = dataTable.records.map((record: any) => {\n      if (record[uniqueKey] === rowData[uniqueKey]) {\n        return { ...record, isActive: !rowData.isActive, isDeleted: !rowData.isDeleted };\n      } else {\n        return record;\n      }\n    });\n    setDataTable({\n      ...dataTable,\n      records: deletedRecordsLocal,\n    });\n    // Maintain a separate state for updated records to use in the parent component &\n    // when the tab is changed or page is changed\n    const find = deletedRows.find((record: any) => record[uniqueKey] === rowData[uniqueKey]);\n    if (!find) {\n      setDeletedRows([...deletedRows, { ...rowData, isActive: false, isDeleted: true }]);\n    } else {\n      const remainingRows = deletedRows.filter(\n        (record: any) => record[uniqueKey] !== rowData[uniqueKey]\n      );\n      setDeletedRows([...remainingRows]);\n    }\n  };\n\n  /*\n  --------------------\n  Helper Functions\n  --------------------\n  */\n  const populateRecords = () => {\n    //  allRecords is the records from the page which contains both the existing records and the newly added records\n    console.log(\"allRecords\", allRecords);\n\n    const addRecords = allRecords?.filter((record: any) => !record.uid);\n    // array to store the add records from page\n    addRecords?.forEach((record: any) => {\n      const uid = new ShortUniqueId({ length: 5 });\n\n      record.uid = uid();\n      record.temp = true;\n    });\n    setAddedRows(addRecords ?? []);\n    setUpdatedRecords(addRecords ?? []);\n    setDataTable({\n      ...dataTable,\n      records: [...(addRecords ?? [])],\n      totalRecords: dataTable.totalRecords + (addRecords ?? []).length,\n      loading: false,\n    });\n  };\n  const clearAll = () => {\n    setUpdatedRecords([]);\n    setAddedRows([]);\n    setDeletedRows([]);\n  };\n\n  const resetTable = () => {\n    clearAll();\n    setDataTable({\n      ...dataTable,\n      loading: false,\n      records: [],\n      totalRecords: 0,\n      start: 0,\n      search: \"\",\n    });\n  };\n\n  const getCurrentRecords = () => {\n    return dataTable.records;\n  };\n\n  const getUpdatedRecords = () => {\n    return updatedRecords\n      .filter((row: any) => !row.temp)\n      .map((row: any) => {\n        return row;\n      });\n  };\n  const getAddedRecords = () => {\n    return updatedRecords\n      .filter((row: any) => row.temp === true)\n      .map((row: any) => {\n        const { uid, temp, ...rest } = row;\n        return rest;\n      });\n  };\n  const getRecentAddedRecord = () => {\n    return addedRows[addedRows.length - 1];\n  };\n  const getDeletedRecords = () => {\n    return deletedRows;\n  };\n\n  // ENHANCEMENT: TO DO\n  //\n  /**\n   * Iterates over the records and performs necessary operations.\n   *\n   * @param records - The records to iterate over.\n   * @returns An array of records after performing the necessary operations.\n   */\n  const iterateOverRecords = (records: any, isSearchTriggered?: boolean) => {\n    //  allRecords is the records from the page which contains both the existing records and the newly added records\n    console.log(\"allRecords\", allRecords);\n\n    const addRecords = allRecords?.filter((record: any) => !record.uid);\n    // array to store the add records from page\n    addRecords?.forEach((record: any) => {\n      const uid = new ShortUniqueId({ length: 5 });\n      record.uid = uid();\n      record.temp = true;\n    });\n    // array to store the updated records from page\n    const updatedRecordsFromAllRecords = allRecords?.filter((record: any) => !record.temp);\n    console.log(\"updatedRecordsFromAllRecords\", updatedRecordsFromAllRecords);\n\n    console.log(\"updatedRecords\", updatedRecords);\n\n    const updatedRecordsLocal = records.map((record: any) => {\n      const find = updatedRecords.find(\n        (updatedRecord: any) => updatedRecord[uniqueKey] === record[uniqueKey]\n      );\n      if (find && isSearchTriggered !== true) {\n        return find;\n      } else {\n        return record;\n      }\n    });\n    setAddedRows(addRecords ?? []);\n    return [...(addRecords ?? []), ...updatedRecordsLocal];\n  };\n  const iterateOverRecordsForSecondary = (records: any) => {\n    const enrichedRecords = records.map((record: any) => {\n      if (!record.uid) {\n        const uid = new ShortUniqueId({ length: 5 });\n        record.uid = uid();\n        record.temp = true;\n        return record;\n      } else {\n        return record;\n      }\n    });\n\n    return enrichedRecords;\n  };\n\n  const emptyMessageRender = () => {\n    const { errorMessage } = dataTable;\n\n    return (\n      <div className=\"absolute left-0 top-0 flex flex-col w-full h-full bg-white justify-center items-center\">\n        <div className=\"text-sm text-inputBorderColour pt-3 font-medium\">\n          {errorMessage ? (\n            <div className=\"flex justify-center mt-7 ml-4\">{errorMessage}</div>\n          ) : (\n            props.emptyMessage ?? <>No Data</>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const onChange = (e: any) => {\n    setDataTable({\n      ...dataTable,\n      limit: e.value,\n    });\n  };\n\n  const getTotalRecordsCount = () => {\n    return dataTable.totalRecords;\n  };\n\n  const combinedRowClassName = (rowData: any) => {\n    if (rowData?.isDeleted) {\n      return \" !bg-semantic-crimson-100\";\n    } else if (rowData?.temp) {\n      return \" !bg-semantic-deepSkyBlue-100\";\n    } else if (rowData?.isUpdated && !rowData?.temp) {\n      return \" !bg-semantic-yellow-100\";\n    }\n    return rowData?.uid ? { \"row-highlight\": rowData.uid % 2 } : \"\";\n  };\n\n  const { loading, records, limit, start, totalRecords, errorMessage } = dataTable;\n\n  const RowsPerPageDropdown = (options: any) => {\n    const dropdownOptions = [\n      { label: 10, value: 10 },\n      { label: 20, value: 20 },\n      { label: 50, value: 50 },\n      { label: \"All\", value: options.totalRecords },\n    ];\n\n    return (\n      <div className=\"flex ml-auto\">\n        <div className=\"flex\">\n          <Text\n            label=\"Rows Per Page\"\n            className=\"text-secondary-gray-500 text-xs ml-4 flex items-center\"\n          />\n        </div>\n        <SimpleDropDown\n          value={options.value}\n          options={dropdownOptions}\n          onChange={onChange}\n          className=\"border-none !w-20 !text-primary-gray-700 !text-xss !font-Roboto\"\n        />\n      </div>\n    );\n  };\n\n  const template1 = {\n    layout: \"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown \",\n    RowsPerPageDropdown,\n  };\n\n  const getTableStatus = () => {\n    const updateRecordsLocal = updatedRecords.filter((record: any) => !record.temp);\n    return {\n      ADDED_RECORDS: addedRows.length,\n      UPDATED_RECORDS: updateRecordsLocal.length,\n      DELETED_RECORDS: deletedRows.length,\n    };\n  };\n  console.log(\"updatedRecords\", updatedRecords);\n\n  return (\n    <div className={`investment-table`}>\n      {!hideLegend && (\n        <>\n          {props.mode === MODE.UPDATE ? (\n            <div className=\"mb-2 flex flex-row justify-center w-full text-primary-ptext-1000 text-left text-xs font-bold\">\n              {/* <div>Original Records : {dataTable.totalRecords}</div> */}\n              <div className=\"flex items-center\">\n                <div className=\"flex items-center mx-2\">\n                  <div className=\"w-4 h-4 rounded-full bg-semantic-deepSkyBlue-100 border-none\"></div>\n                  <div className=\"ml-2 \">Added : {getTableStatus().ADDED_RECORDS}</div>\n                </div>\n                <div className=\"flex items-center mx-2\">\n                  <div className=\"w-4 h-4 rounded-full bg-semantic-yellow-100 border-none\"></div>\n                  <div className=\"ml-2\">Updated : {getTableStatus().UPDATED_RECORDS}</div>\n                </div>\n                <div className=\"flex items-center mx-2\">\n                  <div className=\"w-4 h-4 rounded-full bg-semantic-crimson-100 border-none\"></div>\n                  <div className=\"ml-2\">Deleted : {getTableStatus().DELETED_RECORDS}</div>\n                </div>\n              </div>\n              {/* <div>\n            Current Records :{\" \"}\n            {dataTable.totalRecords + addedRecordsState.length - deletedRecordsState.length}\n          </div> */}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </>\n      )}\n\n      <DataTable\n        breakpoint=\"768px\"\n        // className={`px-0 rounded-xl ${primeReactProps.className ? primeReactProps.className : \"\"}`}\n        dataKey={primeReactProps.dataKey}\n        emptyMessage={emptyMessageRender}\n        first={start}\n        lazy\n        loading={loading}\n        onPage={searchFn} /*prepareParamAndCallPromise*/\n        paginator={MODE.UPDATE === props.mode}\n        paginatorTemplate={template1}\n        paginatorLeft={\n          <Text\n            label={`${dataTable.start + 1}-${\n              dataTable.start + dataTable.limit > dataTable.totalRecords\n                ? dataTable.totalRecords\n                : dataTable.start + dataTable.limit\n            } of ${dataTable.totalRecords}`}\n            className=\"text-secondary-gray-500 text-xs ml-4\"\n          />\n        }\n        responsiveLayout=\"scroll\"\n        rowClassName={combinedRowClassName}\n        rows={limit}\n        scrollHeight=\"556px\"\n        stripedRows\n        totalRecords={totalRecords}\n        value={records}\n        resizableColumns={false}\n        selection={props.selection}\n        selectionMode={props.selectionMode}\n        style={{ width: \"100%\" }}\n        className={`border border-secondary-concrete px-0 overflow-x-auto rounded-lg read-only-table ${className}`}\n        //  rowGroupFooterTemplate\n        {...primeReactProps}\n      >\n        {props.children}\n      </DataTable>\n    </div>\n  );\n});\n\nexport default React.memo(EditableTable);\n"],"names":["Column","props","jsx","React","MODE","EditableTable","forwardRef","ref","standardDataFormatPromise","search","advanceSearch","isIgnoreInitialLoad","onUpdateCallback","uniqueKey","className","allRecords","hideLegend","variant","getApiResponseCallback","primeReactProps","dataTable","setDataTable","useState","_a","_b","_c","_d","_e","startOffset","isInitialLoad","setIsInitialLoad","updatedRecords","setUpdatedRecords","addedRows","setAddedRows","deletedRows","setDeletedRows","useEffect","prepareParamAndCallPromise","useImperativeHandle","searchFn","getCurrentRecords","getUpdatedRecords","getAddedRecords","getRecentAddedRecord","getDeletedRecords","getTotalRecordsCount","addRow","reportDataChange","deleteRow","clearAll","resetTable","getLoadingState","isSearchTriggered","populateRecords","searchParams","page","rows","first","res","iterateOverRecordsForSecondary","iterateOverRecords","err","parseStandardAPIErrorMessage","rowData","updatedRecordsLocal","record","find","uid","ShortUniqueId","row","deletedRecordsLocal","remainingRows","addRecords","temp","rest","records","updatedRecordsFromAllRecords","updatedRecord","emptyMessageRender","errorMessage","Fragment","onChange","combinedRowClassName","loading","limit","start","totalRecords","template1","options","dropdownOptions","jsxs","Text","SimpleDropDown","getTableStatus","updateRecordsLocal","DataTable","EditableTableV2"],"mappings":"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"}