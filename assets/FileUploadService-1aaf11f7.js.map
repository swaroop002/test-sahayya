{"version":3,"file":"FileUploadService-1aaf11f7.js","sources":["../../src/utils/Uploader.ts","../../src/services/FileUploadService.ts"],"sourcesContent":["import axios from \"axios\";\nimport BaseApiService from \"services/BaseApiService\";\n\n// initializing axios\nconst api = axios.create({\n  baseURL: \"https://sahayya.dev.vm.web-devapp.com/\",\n});\n\nconst DEFAULT_PATH = \"/storage/api\";\n\n// original source: https://github.com/pilovm/multithreaded-uploader/blob/master/frontend/uploader.js\nexport class Uploader extends BaseApiService {\n  chunkSize: any;\n  threadsQuantity: number;\n  file: any;\n  fileName: any;\n  aborted: boolean;\n  uploadedSize: number;\n  progressCache: any;\n  activeConnections: any;\n  parts: any[];\n  uploadedParts: any[];\n  fileId: null;\n  fileKey: null;\n  finalUrl: any;\n  onProgressFn: (err: any) => void;\n  onErrorFn: (err: any) => void;\n  constructor(options: any) {\n    super(options);\n    // this must be bigger than or equal to 5MB,\n    // otherwise AWS will respond with:\n    // \"Your proposed upload is smaller than the minimum allowed size\"\n    this.chunkSize = options.chunkSize || 1024 * 1024 * 10;\n    // number of parallel uploads\n    this.threadsQuantity = Math.min(options.threadsQuantity || 5, 10);\n    this.file = options.file;\n    this.fileName = options.fileName;\n    this.aborted = false;\n    this.uploadedSize = 0;\n    this.progressCache = {};\n    this.activeConnections = {};\n    this.parts = [];\n    this.uploadedParts = [];\n    this.fileId = null;\n    this.fileKey = null;\n    this.finalUrl = null;\n    this.onProgressFn = () => {\n      //\n    };\n    this.onErrorFn = () => {\n      //\n    };\n  }\n\n  // starting the multipart upload request\n  start = async () => {\n    this.initialize();\n  };\n\n  async initialize() {\n    try {\n      const fileName = this.fileName;\n      const timestamp = new Date().getTime();\n      const randomString = Math.random().toString(36).substring(2, 8);\n      const objectName = `${timestamp}_${randomString}_${fileName}`;\n\n      // initializing the multipart request\n      const videoInitializationUploadInput = {\n        name: objectName,\n        contentType: this.file.type,\n        size: this.file.size,\n      };\n      const url = `${DEFAULT_PATH}/awsS3/true/initialize/multipart/upload`;\n      const initializeReponse = await this.makePostRequestWithAuth(\n        url,\n        videoInitializationUploadInput\n      );\n\n      const AWSFileDataOutput = initializeReponse.data;\n      this.fileId = AWSFileDataOutput.UploadId;\n      this.fileKey = AWSFileDataOutput.Key;\n\n      // retrieving the pre-signed URLs\n      const numberOfparts = Math.ceil(this.file.size / this.chunkSize);\n\n      const AWSMultipartFileDataInput = {\n        uploadId: this.fileId,\n        name: this.fileKey,\n        parts: numberOfparts,\n      };\n\n      const url2 = `${DEFAULT_PATH}/awsS3/true/generate/multipart/signed/url`;\n      const urlsResponse = await this.makePostRequestWithAuth(url2, AWSMultipartFileDataInput);\n      const newParts = urlsResponse.data.parts;\n      this.parts.push(...newParts);\n\n      this.sendNext();\n    } catch (error) {\n      await this.complete(error);\n    }\n  }\n\n  sendNext() {\n    const activeConnections = Object.keys(this.activeConnections).length;\n\n    if (activeConnections >= this.threadsQuantity) {\n      return;\n    }\n\n    if (!this.parts.length) {\n      if (!activeConnections) {\n        this.complete();\n      }\n\n      return;\n    }\n\n    const part: any = this.parts.pop();\n\n    if (this.file && part) {\n      const sentSize = (part.PartNumber - 1) * this.chunkSize;\n      const chunk = this.file.slice(sentSize, sentSize + this.chunkSize);\n\n      const sendChunkStarted = () => {\n        this.sendNext();\n      };\n\n      this.sendChunk(chunk, part, sendChunkStarted)\n        .then(() => {\n          this.sendNext();\n        })\n        .catch((error) => {\n          this.parts.push(part);\n\n          this.complete(error);\n        });\n    }\n  }\n\n  // terminating the multipart upload request on success or failure\n  async complete(error?: any) {\n    if (error && !this.aborted) {\n      this.onErrorFn(error);\n      return;\n    }\n\n    if (error) {\n      this.onErrorFn(error);\n      return;\n    }\n\n    try {\n      await this.sendCompleteRequest();\n    } catch (error) {\n      this.onErrorFn(error);\n    }\n  }\n\n  // finalizing the multipart upload request on success by calling\n  // the finalization API\n  async sendCompleteRequest() {\n    if (this.fileId && this.fileKey) {\n      const videoFinalizationMultiPartInput = {\n        UploadId: this.fileId,\n        Key: this.fileKey,\n        parts: this.uploadedParts,\n        contentType: this.file.type,\n        size: this.file.size,\n      };\n\n      const url = `${DEFAULT_PATH}/awsS3/true/finalize/multipart/upload`;\n\n      this.finalUrl = await this.makePostRequestWithAuth(url, videoFinalizationMultiPartInput);\n    }\n  }\n\n  sendChunk(chunk: any, part: any, sendChunkStarted: any) {\n    return new Promise((resolve, reject) => {\n      this.upload(chunk, part, sendChunkStarted)\n        .then((status) => {\n          if (status !== 200) {\n            reject(new Error(\"Failed chunk upload\"));\n            return;\n          }\n          resolve(1);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n\n  // calculating the current progress of the multipart upload request\n  handleProgress(part: any, event: any) {\n    if (this.file) {\n      if (event.type === \"progress\" || event.type === \"error\" || event.type === \"abort\") {\n        this.progressCache[part] = event.loaded;\n      }\n\n      if (event.type === \"uploaded\") {\n        this.uploadedSize += this.progressCache[part] || 0;\n        delete this.progressCache[part];\n      }\n\n      const inProgress = Object.keys(this.progressCache)\n        .map(Number)\n        .reduce((memo, id) => (memo += this.progressCache[id]), 0);\n\n      const sent = Math.min(this.uploadedSize + inProgress, this.file.size);\n\n      const total = this.file.size;\n\n      const percentage = Math.round((sent / total) * 100);\n\n      this.onProgressFn({\n        sent: sent,\n        total: total,\n        percentage: percentage,\n      });\n    }\n  }\n\n  // uploading a part through its pre-signed URL\n  upload(file: any, part: any, sendChunkStarted: any) {\n    // uploading each part with its pre-signed URL\n    return new Promise((resolve, reject) => {\n      if (this.fileId && this.fileKey) {\n        // - 1 because PartNumber is an index starting from 1 and not 0\n        const xhr = (this.activeConnections[part.PartNumber - 1] = new XMLHttpRequest());\n\n        sendChunkStarted();\n        const progressListener = this.handleProgress.bind(this, part.PartNumber - 1);\n        xhr.upload.addEventListener(\"progress\", progressListener);\n        xhr.addEventListener(\"error\", progressListener);\n        xhr.addEventListener(\"abort\", progressListener);\n        xhr.addEventListener(\"loadend\", progressListener);\n\n        xhr.open(\"PUT\", part.signedUrl);\n\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            // retrieving the ETag parameter from the HTTP headers\n            const ETag = xhr.getResponseHeader(\"ETag\");\n\n            if (ETag) {\n              const uploadedPart = {\n                PartNumber: part.PartNumber,\n                // removing the enclosing characters from\n                // the raw ETag\n                ETag: ETag.replaceAll('\"', \"\"),\n              };\n              this.uploadedParts.push(uploadedPart);\n              resolve(xhr.status);\n              delete this.activeConnections[part.PartNumber - 1];\n            }\n          }\n        };\n\n        xhr.onerror = (error) => {\n          reject(error);\n          delete this.activeConnections[part.PartNumber - 1];\n        };\n\n        xhr.onabort = () => {\n          reject(new Error(\"Upload canceled by user\"));\n          delete this.activeConnections[part.PartNumber - 1];\n        };\n\n        xhr.send(file);\n      }\n    });\n  }\n\n  onProgress(onProgress: any) {\n    this.onProgressFn = onProgress;\n    return this;\n  }\n\n  onError(onError: any) {\n    this.onErrorFn = onError;\n    return this;\n  }\n\n  abort() {\n    Object.keys(this.activeConnections)\n      .map(Number)\n      .forEach((id) => {\n        this.activeConnections[id].abort();\n      });\n\n    this.aborted = true;\n  }\n\n  async getFinalUrl(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const interval = setInterval(() => {\n        if (this.finalUrl) {\n          clearInterval(interval);\n          resolve(this.finalUrl);\n        }\n      }, 1000); // Check every second\n\n      // Reject the promise if it hasn't resolved after 30 seconds\n      setTimeout(() => {\n        clearInterval(interval);\n        reject(new Error(\"Timed out while waiting for final URL\"));\n      }, 500000000);\n    });\n  }\n}\n","import { Uploader } from \"utils/Uploader\";\nimport BaseApiService from \"./BaseApiService\";\n\nconst DEFAULT_PATH_UNSIGNED = \"/storage/api\";\nconst DEFAULT_PATH_SIGNED = \"/custom/api\";\n\nclass FileUploadService extends BaseApiService {\n  saveFile = async (file: File, objectName: string) => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const url = `${DEFAULT_PATH_UNSIGNED}/awsS3/true/${objectName}/upload`;\n    return this.makePostRequestWithAuth(url, formData, {\n      \"Content-Type\": \"multipart/form-data\",\n    });\n  };\n\n  saveVideo = async (file: any) => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    if (file) {\n      let percentage: any = undefined;\n\n      const videoUploaderOptions = {\n        fileName: file.name,\n        file: file,\n      };\n      const uploader = new Uploader(videoUploaderOptions);\n\n      uploader\n        .onProgress(({ percentage: newPercentage }: any) => {\n          // to avoid the same percentage to be logged twice\n          if (newPercentage !== percentage) {\n            percentage = newPercentage;\n            console.log(\"percentage\", `${percentage}%`);\n            const progressElement = document.getElementById(\"progress\");\n            if (progressElement) {\n              progressElement.textContent = `Uploading... ${percentage}%`;\n            }\n          }\n        })\n        .onError((error: any) => {\n          console.error(error);\n        });\n\n      await uploader.start();\n      const finalUrl = await uploader.getFinalUrl();\n      console.log(finalUrl);\n      const { data, ...restProperties } = finalUrl;\n      const transformedFinalUrl = {\n        data: { videoUrl: data },\n        ...restProperties,\n      };\n      return transformedFinalUrl;\n    }\n  };\n\n  getSignedURL(objectUrl: string) {\n    const url = `${DEFAULT_PATH_SIGNED}/document/awsS3/signed/url?objectUrl=${objectUrl}`;\n    return this.makeGetRequestWithAuth(url);\n  }\n}\n\nexport default new FileUploadService();\n"],"names":["axios","DEFAULT_PATH","Uploader","BaseApiService","options","__publicField","fileName","timestamp","randomString","videoInitializationUploadInput","url","AWSFileDataOutput","numberOfparts","AWSMultipartFileDataInput","url2","newParts","error","activeConnections","part","sentSize","chunk","sendChunkStarted","videoFinalizationMultiPartInput","resolve","reject","status","event","inProgress","memo","id","sent","total","percentage","file","xhr","progressListener","ETag","uploadedPart","onProgress","onError","interval","DEFAULT_PATH_UNSIGNED","DEFAULT_PATH_SIGNED","FileUploadService","objectName","formData","videoUploaderOptions","uploader","newPercentage","progressElement","finalUrl","data","restProperties","objectUrl","FileUploadService$1"],"mappings":"yNAIYA,EAAM,OAAO,CACvB,QAAS,wCACX,CAAC,EAED,MAAMC,EAAe,eAGd,MAAMC,UAAiBC,CAAe,CAgB3C,YAAYC,EAAc,CACxB,MAAMA,CAAO,EAhBfC,EAAA,kBACAA,EAAA,wBACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,qBACAA,EAAA,sBACAA,EAAA,0BACAA,EAAA,cACAA,EAAA,sBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,kBA6BAA,EAAA,aAAQ,SAAY,CAClB,KAAK,WAAW,CAAA,GAxBhB,KAAK,UAAYD,EAAQ,WAAa,KAAO,KAAO,GAEpD,KAAK,gBAAkB,KAAK,IAAIA,EAAQ,iBAAmB,EAAG,EAAE,EAChE,KAAK,KAAOA,EAAQ,KACpB,KAAK,SAAWA,EAAQ,SACxB,KAAK,QAAU,GACf,KAAK,aAAe,EACpB,KAAK,cAAgB,GACrB,KAAK,kBAAoB,GACzB,KAAK,MAAQ,GACb,KAAK,cAAgB,GACrB,KAAK,OAAS,KACd,KAAK,QAAU,KACf,KAAK,SAAW,KAChB,KAAK,aAAe,IAAM,CAAA,EAG1B,KAAK,UAAY,IAAM,CAAA,CAGzB,CAOA,MAAM,YAAa,CACb,GAAA,CACF,MAAME,EAAW,KAAK,SAChBC,EAAY,IAAI,KAAK,EAAE,QAAQ,EAC/BC,EAAe,KAAK,SAAS,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,EAIxDC,EAAiC,CACrC,KAJiB,GAAGF,KAAaC,KAAgBF,IAKjD,YAAa,KAAK,KAAK,KACvB,KAAM,KAAK,KAAK,IAAA,EAEZI,EAAM,GAAGT,2CAMTU,GALoB,MAAM,KAAK,wBACnCD,EACAD,CAAA,GAG0C,KAC5C,KAAK,OAASE,EAAkB,SAChC,KAAK,QAAUA,EAAkB,IAGjC,MAAMC,EAAgB,KAAK,KAAK,KAAK,KAAK,KAAO,KAAK,SAAS,EAEzDC,EAA4B,CAChC,SAAU,KAAK,OACf,KAAM,KAAK,QACX,MAAOD,CAAA,EAGHE,EAAO,GAAGb,6CAEVc,GADe,MAAM,KAAK,wBAAwBD,EAAMD,CAAyB,GACzD,KAAK,MAC9B,KAAA,MAAM,KAAK,GAAGE,CAAQ,EAE3B,KAAK,SAAS,QACPC,GACD,MAAA,KAAK,SAASA,CAAK,CAC3B,CACF,CAEA,UAAW,CACT,MAAMC,EAAoB,OAAO,KAAK,KAAK,iBAAiB,EAAE,OAE1D,GAAAA,GAAqB,KAAK,gBAC5B,OAGE,GAAA,CAAC,KAAK,MAAM,OAAQ,CACjBA,GACH,KAAK,SAAS,EAGhB,OAGI,MAAAC,EAAY,KAAK,MAAM,IAAI,EAE7B,GAAA,KAAK,MAAQA,EAAM,CACrB,MAAMC,GAAYD,EAAK,WAAa,GAAK,KAAK,UACxCE,EAAQ,KAAK,KAAK,MAAMD,EAAUA,EAAW,KAAK,SAAS,EAE3DE,EAAmB,IAAM,CAC7B,KAAK,SAAS,CAAA,EAGhB,KAAK,UAAUD,EAAOF,EAAMG,CAAgB,EACzC,KAAK,IAAM,CACV,KAAK,SAAS,CAAA,CACf,EACA,MAAOL,GAAU,CACX,KAAA,MAAM,KAAKE,CAAI,EAEpB,KAAK,SAASF,CAAK,CAAA,CACpB,EAEP,CAGA,MAAM,SAASA,EAAa,CACtB,GAAAA,GAAS,CAAC,KAAK,QAAS,CAC1B,KAAK,UAAUA,CAAK,EACpB,OAGF,GAAIA,EAAO,CACT,KAAK,UAAUA,CAAK,EACpB,OAGE,GAAA,CACF,MAAM,KAAK,4BACJA,GACP,KAAK,UAAUA,CAAK,CACtB,CACF,CAIA,MAAM,qBAAsB,CACtB,GAAA,KAAK,QAAU,KAAK,QAAS,CAC/B,MAAMM,EAAkC,CACtC,SAAU,KAAK,OACf,IAAK,KAAK,QACV,MAAO,KAAK,cACZ,YAAa,KAAK,KAAK,KACvB,KAAM,KAAK,KAAK,IAAA,EAGZZ,EAAM,GAAGT,yCAEf,KAAK,SAAW,MAAM,KAAK,wBAAwBS,EAAKY,CAA+B,EAE3F,CAEA,UAAUF,EAAYF,EAAWG,EAAuB,CACtD,OAAO,IAAI,QAAQ,CAACE,EAASC,IAAW,CACtC,KAAK,OAAOJ,EAAOF,EAAMG,CAAgB,EACtC,KAAMI,GAAW,CAChB,GAAIA,IAAW,IAAK,CACXD,EAAA,IAAI,MAAM,qBAAqB,CAAC,EACvC,OAEFD,EAAQ,CAAC,CAAA,CACV,EACA,MAAOP,GAAU,CAChBQ,EAAOR,CAAK,CAAA,CACb,CAAA,CACJ,CACH,CAGA,eAAeE,EAAWQ,EAAY,CACpC,GAAI,KAAK,KAAM,EACTA,EAAM,OAAS,YAAcA,EAAM,OAAS,SAAWA,EAAM,OAAS,WACnE,KAAA,cAAcR,CAAI,EAAIQ,EAAM,QAG/BA,EAAM,OAAS,aACjB,KAAK,cAAgB,KAAK,cAAcR,CAAI,GAAK,EAC1C,OAAA,KAAK,cAAcA,CAAI,GAGhC,MAAMS,EAAa,OAAO,KAAK,KAAK,aAAa,EAC9C,IAAI,MAAM,EACV,OAAO,CAACC,EAAMC,IAAQD,GAAQ,KAAK,cAAcC,CAAE,EAAI,CAAC,EAErDC,EAAO,KAAK,IAAI,KAAK,aAAeH,EAAY,KAAK,KAAK,IAAI,EAE9DI,EAAQ,KAAK,KAAK,KAElBC,EAAa,KAAK,MAAOF,EAAOC,EAAS,GAAG,EAElD,KAAK,aAAa,CAChB,KAAAD,EACA,MAAAC,EACA,WAAAC,CAAA,CACD,EAEL,CAGA,OAAOC,EAAWf,EAAWG,EAAuB,CAElD,OAAO,IAAI,QAAQ,CAACE,EAASC,IAAW,CAClC,GAAA,KAAK,QAAU,KAAK,QAAS,CAEzB,MAAAU,EAAO,KAAK,kBAAkBhB,EAAK,WAAa,CAAC,EAAI,IAAI,eAE9CG,IACjB,MAAMc,EAAmB,KAAK,eAAe,KAAK,KAAMjB,EAAK,WAAa,CAAC,EACvEgB,EAAA,OAAO,iBAAiB,WAAYC,CAAgB,EACpDD,EAAA,iBAAiB,QAASC,CAAgB,EAC1CD,EAAA,iBAAiB,QAASC,CAAgB,EAC1CD,EAAA,iBAAiB,UAAWC,CAAgB,EAE5CD,EAAA,KAAK,MAAOhB,EAAK,SAAS,EAE9BgB,EAAI,mBAAqB,IAAM,CAC7B,GAAIA,EAAI,aAAe,GAAKA,EAAI,SAAW,IAAK,CAExC,MAAAE,EAAOF,EAAI,kBAAkB,MAAM,EAEzC,GAAIE,EAAM,CACR,MAAMC,EAAe,CACnB,WAAYnB,EAAK,WAGjB,KAAMkB,EAAK,WAAW,IAAK,EAAE,CAAA,EAE1B,KAAA,cAAc,KAAKC,CAAY,EACpCd,EAAQW,EAAI,MAAM,EAClB,OAAO,KAAK,kBAAkBhB,EAAK,WAAa,CAAC,GAErD,EAGEgB,EAAA,QAAWlB,GAAU,CACvBQ,EAAOR,CAAK,EACZ,OAAO,KAAK,kBAAkBE,EAAK,WAAa,CAAC,CAAA,EAGnDgB,EAAI,QAAU,IAAM,CACXV,EAAA,IAAI,MAAM,yBAAyB,CAAC,EAC3C,OAAO,KAAK,kBAAkBN,EAAK,WAAa,CAAC,CAAA,EAGnDgB,EAAI,KAAKD,CAAI,EACf,CACD,CACH,CAEA,WAAWK,EAAiB,CAC1B,YAAK,aAAeA,EACb,IACT,CAEA,QAAQC,EAAc,CACpB,YAAK,UAAYA,EACV,IACT,CAEA,OAAQ,CACC,OAAA,KAAK,KAAK,iBAAiB,EAC/B,IAAI,MAAM,EACV,QAASV,GAAO,CACV,KAAA,kBAAkBA,CAAE,EAAE,MAAM,CAAA,CAClC,EAEH,KAAK,QAAU,EACjB,CAEA,MAAM,aAA4B,CAChC,OAAO,IAAI,QAAQ,CAACN,EAASC,IAAW,CAChC,MAAAgB,EAAW,YAAY,IAAM,CAC7B,KAAK,WACP,cAAcA,CAAQ,EACtBjB,EAAQ,KAAK,QAAQ,IAEtB,GAAI,EAGP,WAAW,IAAM,CACf,cAAciB,CAAQ,EACfhB,EAAA,IAAI,MAAM,uCAAuC,CAAC,GACxD,GAAS,CAAA,CACb,CACH,CACF,CClTA,MAAMiB,EAAwB,eACxBC,EAAsB,cAE5B,MAAMC,UAA0BxC,CAAe,CAA/C,kCACEE,EAAA,gBAAW,MAAO4B,EAAYW,IAAuB,CAC7C,MAAAC,EAAW,IAAI,SACZA,EAAA,OAAO,OAAQZ,CAAI,EACtB,MAAAvB,EAAM,GAAG+B,gBAAoCG,WAC5C,OAAA,KAAK,wBAAwBlC,EAAKmC,EAAU,CACjD,eAAgB,qBAAA,CACjB,CAAA,GAGHxC,EAAA,iBAAY,MAAO4B,GAAc,CAI/B,GAHiB,IAAI,WACZ,OAAO,OAAQA,CAAI,EAExBA,EAAM,CACR,IAAID,EAEJ,MAAMc,EAAuB,CAC3B,SAAUb,EAAK,KACf,KAAAA,CAAA,EAEIc,EAAW,IAAI7C,EAAS4C,CAAoB,EAElDC,EACG,WAAW,CAAC,CAAE,WAAYC,KAAyB,CAElD,GAAIA,IAAkBhB,EAAY,CACnBA,EAAAgB,EACL,QAAA,IAAI,aAAc,GAAGhB,IAAa,EACpC,MAAAiB,EAAkB,SAAS,eAAe,UAAU,EACtDA,IACFA,EAAgB,YAAc,gBAAgBjB,MAElD,CACD,EACA,QAAShB,GAAe,CACvB,QAAQ,MAAMA,CAAK,CAAA,CACpB,EAEH,MAAM+B,EAAS,QACT,MAAAG,EAAW,MAAMH,EAAS,cAChC,QAAQ,IAAIG,CAAQ,EACpB,KAAM,CAAE,KAAAC,EAAM,GAAGC,CAAA,EAAmBF,EAK7B,MAJqB,CAC1B,KAAM,CAAE,SAAUC,CAAK,EACvB,GAAGC,CAAA,EAGP,GAGF,aAAaC,EAAmB,CACxB,MAAA3C,EAAM,GAAGgC,yCAA2DW,IACnE,OAAA,KAAK,uBAAuB3C,CAAG,CACxC,CACF,CAEA,MAAe4C,EAAA,IAAIX"}