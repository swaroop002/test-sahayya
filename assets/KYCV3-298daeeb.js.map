{"version":3,"file":"KYCV3-298daeeb.js","sources":["../../src/assets/img/fileUploadIcons/Verified_Tick.svg","../../src/services/KYCService.ts","../../src/components/KYCV3/KYCV3.tsx"],"sourcesContent":["export default \"__VITE_ASSET__bdf4d2cf__\"","import BaseApiService from \"./BaseApiService\";\nconst DEFAULT_PATH = \"/custom/api/login\";\nclass KYCService extends BaseApiService {\n  getKycDocument(loanUid: string, pageUid: string) {\n    const url = `${DEFAULT_PATH}/${loanUid}/${pageUid}/kyc`;\n    return this.makeGetRequestWithAuth(url);\n  }\n\n  saveKycDocument(payload: any, substage: string) {\n    const url = `${DEFAULT_PATH}/${substage}/kyc`;\n    return this.makePostRequestWithAuth(url, payload);\n  }\n\n  savePartnerOrDirectorKycDocument = (payload: any) => {\n    const url = `${DEFAULT_PATH}/dde/corporate/director/kyc`;\n    return this.makePostRequestWithAuth(url, payload);\n  };\n\n  updateKycDocument(payload: any, substage: string) {\n    const url = `${DEFAULT_PATH}/${substage}/kyc`;\n    return this.makePutRequestWithAuth(url, payload);\n  }\n\n  populateKycDocument(payload: any, substage: string) {\n    const url = `${DEFAULT_PATH}/${substage}/kyc/ocr`;\n    return this.makePostRequestWithAuth(url, payload);\n  }\n\n  getPopulateDocumentByKyc(loanUid: string, pageUid: string) {\n    const url = `${DEFAULT_PATH}/${loanUid}/${pageUid}/prepopulatebykyc`;\n    return this.makeGetRequestWithAuth(url);\n  }\n\n  sendOTPForAadhar(payload: any) {\n    const url = `/identity/api/integration/karza/eaadhaar/otp`;\n    return this.makePostRequestWithAuth(url, payload);\n  }\n\n  validateAadhar(payload: any, substage: string) {\n    const url = `${DEFAULT_PATH}/${substage}/kyc/validate/aadhaar`;\n    return this.makePostRequestWithAuth(url, payload);\n  }\n}\n\nexport default new KYCService();\n","import LoaderIcon from \"assets/img/buttonIcons/loader.png\";\nimport VerifiedIcon from \"assets/img/fileUploadIcons/Verified_Tick.svg\";\nimport ButtonBox from \"components/ButtonBox/ButtonBox\";\nimport DatePicker from \"components/DatePicker\";\nimport DialogBox from \"components/Dialog\";\nimport { IAttributeConfig } from \"components/DocumentUploader/DocumentUploader\";\nimport ErrorDialog from \"components/ErrorDialog\";\nimport FileUploadCustom, { IUploadedFile } from \"components/FileUploadCustom\";\nimport FileUploadMenuBox from \"components/FileUploadMenuBox\";\nimport IconButton, { BUTTON_TYPES } from \"components/IconButton\";\nimport InputBox from \"components/InputBox\";\nimport { IMediaInfo, initialMediaGallerySectionInfo } from \"components/MediaGallery/MediaGallery\";\nimport SimpleDropDown from \"components/SimpleDropDown\";\nimport SkeletonCustom from \"components/Skeleton/Skeleton\";\nimport Text from \"components/Text\";\nimport TextButton from \"components/TextButton/TextButton\";\nimport { CalendarChangeParams } from \"primereact/calendar\";\nimport { DropdownChangeParams } from \"primereact/dropdown\";\nimport React, { Fragment, ReactNode, useEffect, useRef, useState } from \"react\";\nimport DocumentCategoryService from \"services/DocumentCategoryService\";\nimport DocumentService from \"services/DocumentService\";\nimport KYCService from \"services/KYCService\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  getStandardValidator,\n  messageReplace,\n  parseStandardAPIErrorMessage,\n  validateGetAPIResponse,\n} from \"utils/CommonUtil\";\nimport {\n  BUTTON_TYPE,\n  DOCUMENT_CATEGORY,\n  DOCUMENT_SECTION,\n  DOCUMENT_TYPE,\n  INPUT_STYLE_TYPE,\n} from \"utils/Constant\";\nimport { IKycUploadedDocSection } from \"views/transaction/PageDDE/Login/PageApplicant\";\n\n/*-------------------Interfaces----------------------------------*/\ninterface IKYCDocumentProps {\n  isLoading?: boolean;\n  mode: ReadMode | EditMode;\n  disableKycCardMenu?: boolean;\n  uid: string; //card uid (uid of saved document or when populated with ocr)\n  docNo?: string; //used for populate using ocr (api returned data)\n  maskedDocNo?: string; //used for populate using ocr and validate aadhaar\n  docName?: string; //used in view mode to select document type from dropdown\n  dateOfBirth?: string; //used in view mode to set dob\n  docSections?: IKycUploadedDocSection[]; //used in view mode to show sections uploaded by the user for the document\n  isVerified?: boolean; //used in view mode to show document is verified or not\n  uploadTitle?: string;\n  documentListIndex: number;\n  removeDocumentInList?: (index: number) => void;\n  cardNameList: string[];\n  handlerCardNameList: (list: string[]) => void;\n  onSave: (kycDocData: IKycDocumentsInfo, docListIdx: number) => void;\n  onRemove?: (kycDocData: IKycDocumentsInfo, docListIdx?: number) => void;\n  onPopulate: (kycDocData: IKycDocumentsInfo, docListIdx: number) => void;\n  ocrStatus: IPopulateOcr;\n  aadharVerificationStatus: IAadharVerification;\n  onVerifyAadhar: (\n    kycDocData: IKycDocumentsInfo,\n    aadharOtp: IAadharOTP,\n    docListIdx: number,\n    uid: string //card uid (uid of saved document or when populated with ocr)\n  ) => void;\n  handlerAadharVerificationStatus: () => void;\n  placeOfUpload?: string; //required for media gallery\n}\n\nexport interface IKycDocumentCardListInfo {\n  listId: string; // to pass as key while mapping with array of KycDocument components\n  uid: string; //saved kyc document uid\n  docName: string; //saved document name\n  docNo: string; //saved document number\n  dob: string; //saved dob\n  maskedDocNo: string; //saved masked number (only for aadhar)\n  docSections: IKycUploadedDocSection[];\n  isVerified: boolean;\n}\nexport interface IPopulateOcr {\n  uid: string;\n  success: boolean;\n  failed: boolean;\n}\n\ninterface IDropDownOptions {\n  uid?: string;\n  label: string;\n  value: string;\n  isActive?: boolean;\n}\n\nexport interface IKycDocuments {\n  documentType: string;\n  documentNumber: string;\n  documentUrl: any[];\n  [key: string]: any;\n}\n\ninterface IKycDocumentsInfo {\n  uid: string;\n  primaryKeyAttributeName?: string; // attribute field which has isPrimarykey value as true in document type attributes\n  documentUid: string;\n  documentName: string;\n  documentType: string;\n  documentNumber: string;\n  dob: any;\n  sectionMetaDropdownOptions: IDropDownOptions[];\n  documentUrl: { [key: string]: any }[];\n  isActive: boolean;\n  [key: string]: any;\n}\n\ninterface IKYCDocAttribute {\n  code: string;\n  attributes: IAttributeConfig[];\n  primaryKey: string;\n}\n\nexport interface IOCR {\n  showPopulateOcr: boolean;\n  enableOcr: boolean;\n}\n\nexport interface IAadharOTP {\n  otp: string;\n  requestId: string;\n  message: string;\n  verified: boolean;\n}\n\nexport interface IAadharVerification {\n  verified: boolean;\n  failedToVerify: boolean;\n}\n\n/*---------------------Types---------------------- */\n\ntype ReadMode = \"READ\";\ntype EditMode = \"EDIT\";\nexport type ViewMode = \"VIEW\";\n\n/*---------------------Constants------------------- */\n\nexport const CARD_MODE: { READ: ReadMode; EDIT: EditMode } = {\n  READ: \"READ\",\n  EDIT: \"EDIT\",\n};\n\nexport const FILE_UPLOADER_MODE: { mode: ViewMode } = {\n  mode: \"VIEW\",\n};\n\nconst initialKycDocumentDataInfo: IKycDocumentsInfo = {\n  uid: \"\",\n  documentUid: \"\",\n  primaryKeyAttributeName: \"\",\n  sectionMetaDropdownOptions: [],\n  documentType: \"\",\n  documentName: \"\",\n  documentUrl: [],\n  documentNumber: \"\",\n  dob: \"\",\n  isActive: true,\n};\n\nconst initialOcr: IOCR = { showPopulateOcr: false, enableOcr: false };\n\nconst initialAadharInfo: IAadharOTP = {\n  otp: \"\",\n  message: \"\",\n  requestId: \"\",\n  verified: false,\n};\n\nconst KYC_INPUT_FIELDS_TYPE = {\n  DATE: \"date\",\n  TEXT: \"text\",\n  NUMBER: \"number\",\n};\n\nconst KYC_INPUT_FIELDS_ATTRIBUTE_NAME = {\n  MASKEDNO: \"maskedNo\",\n  DOB: \"dob\",\n};\n\n/*------------------------------Component--------------------------------*/\n\nconst KYCV3: React.FC<IKYCDocumentProps> = (props: IKYCDocumentProps) => {\n  const {\n    isLoading,\n    mode,\n    disableKycCardMenu,\n    uid,\n    docNo,\n    maskedDocNo,\n    dateOfBirth,\n    docName,\n    docSections,\n    isVerified,\n    uploadTitle,\n    documentListIndex,\n    removeDocumentInList,\n    cardNameList,\n    handlerCardNameList,\n    onSave,\n    onRemove,\n    onPopulate,\n    ocrStatus,\n    onVerifyAadhar,\n    aadharVerificationStatus,\n    handlerAadharVerificationStatus,\n    placeOfUpload,\n  } = props;\n\n  const [cardMode, setCardMode] = useState<ReadMode | EditMode>(mode);\n  const [selectedKycDoc, setSelectedKycDoc] = useState<string>(docName ?? \"\");\n  const [mandatorySectionsUploaded, setMandatorySectionsUploaded] = useState(false);\n  // to store the list of document types (e.g. PAN, Aadhar) to be shown in the dropdown\n  const [documentTypeList, setDocumentTypeList] = useState<IDropDownOptions[]>([]);\n  // store the attribute like name and type of input field required for document type\n  const [docAttributeConfigList, setDocAttributeConfigList] = useState<IKYCDocAttribute[]>([]);\n  // to store the data of a particular document type (e.g. PAN, Aadhar) to be sent to the parent component\n  const [documentInfo, setDocumentInfo] = useState<IKycDocumentsInfo>(initialKycDocumentDataInfo);\n  const [aadharInfo, setAadharInfo] = useState<IAadharOTP>({\n    ...initialAadharInfo,\n    verified: isVerified ? isVerified : false,\n  });\n  const [documentSections, setDocumentSections] = useState<any[]>([]); // to store the list of sections of a particular document type (e.g. PAN, Aadhar) to be shown in the dropdown\n  const [documentMetaDataOptions, setDocumentMetaDataOptions] = useState<IDropDownOptions[]>([]);\n  const [, forceUpdate] = useState<undefined | boolean>(undefined);\n  const [showValidationPopUp, setShowValidationPopUp] = useState<boolean>(false); //control visibility of validation dialog/popup for a kyc document e.g. Aadhar\n  const [ocr, setOcr] = useState(initialOcr);\n  const [loaderOcr, setLoaderOcr] = useState(false);\n  const [loaderValidation, setLoaderValidation] = useState(false);\n  const [isDuplicateError, setIsDuplicateError] = useState(false); //duplicate document type card error\n\n  //states to handle api service errors\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n\n  const validator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n\n  const documentCardMenuOptions = [\n    {\n      className: ``,\n      label: \"Remove\",\n      command: () => {\n        if (removeDocumentInList !== undefined && documentListIndex !== undefined) {\n          if (uid) {\n            setDocumentInfo((prev) => {\n              return {\n                ...prev,\n                isActive: false,\n              };\n            });\n          } else {\n            removeDocumentInList(documentListIndex);\n          }\n\n          //remove the document name from the duplicateKycCardTracker\n          const docNameArr = [...cardNameList];\n          docNameArr.splice(documentListIndex, 1);\n          handlerCardNameList([...docNameArr]);\n        }\n      },\n      disabled: false,\n    },\n  ];\n\n  useEffect(() => {\n    init();\n\n    // //set card mode always in READ (when loan id is present and received via props then mode===\"EDIT\" so we reset card mode to READ)\n    if (mode === \"EDIT\") {\n      setCardMode(CARD_MODE.READ);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n\n  useEffect(() => {\n    if (!showValidationPopUp) {\n      validator.current = new SimpleReactValidator({\n        validators: { ...getStandardValidator() },\n        ...messageReplace(),\n        autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n      });\n    }\n  }, [showValidationPopUp]);\n\n  useEffect(() => {\n    if (docName && documentTypeList.length) {\n      setSelectedKycDoc(docName);\n      const selectedDocumentType = documentTypeList?.find(\n        (doc: IDropDownOptions) => doc.value === docName\n      );\n\n      if (selectedDocumentType) {\n        prepareDocumentSections(selectedDocumentType);\n      }\n    }\n  }, [docName, documentTypeList]);\n\n  useEffect(() => {\n    if (docNo && docName && documentTypeList.length) {\n      const primaryKeyForDoc = getPrimaryAttributeKeyName(docName);\n      setDocumentInfo((prev) => {\n        return {\n          ...prev,\n          documentNumber: docNo,\n          [`${primaryKeyForDoc}`]: maskedDocNo ? maskedDocNo : docNo,\n          primaryKeyAttributeName: primaryKeyForDoc,\n          dob: dateOfBirth ?? \"\",\n        };\n      });\n      setLoaderOcr(false);\n    }\n  }, [docNo, dateOfBirth, documentTypeList]);\n\n  useEffect(() => {\n    if (ocrStatus.failed || ocrStatus.success) {\n      setLoaderOcr(false);\n    }\n\n    if (documentSections.length) {\n      // check if selected kyc doc type supports ocr or not\n      const isOcrAvailableInDocType = documentSections.some(\n        (section) => section.isOcrActive === true\n      );\n      // if it supports\n      if (isOcrAvailableInDocType) {\n        setOcr((prev) => {\n          return {\n            ...prev,\n            showPopulateOcr: true,\n          };\n        });\n      }\n      //if it doesn't\n      else {\n        setOcr((prev) => {\n          return {\n            ...prev,\n            showPopulateOcr: false,\n          };\n        });\n      }\n    }\n  }, [documentSections, ocrStatus]);\n\n  useEffect(() => {\n    if (aadharVerificationStatus.failedToVerify) {\n      setLoaderValidation(false);\n      setAadharInfo({ otp: \"\", requestId: \"\", message: \"\", verified: false });\n      //reset aadhar status from parent component\n      setTimeout(() => {\n        handlerAadharVerificationStatus();\n      }, 3000);\n    } else if (aadharVerificationStatus.verified) {\n      setLoaderValidation(false);\n      setAadharInfo({ otp: \"\", requestId: \"\", message: \"\", verified: true });\n      //reset aadhar status from parent component\n      setTimeout(() => {\n        handlerAadharVerificationStatus();\n      }, 3000);\n    }\n  }, [aadharVerificationStatus]);\n\n  //to check if mandatory sections are uploaded\n  useEffect(() => {\n    const { documentNumber, documentUrl, sectionMetaDropdownOptions, isActive } = documentInfo;\n    //if docName is available via props then allow user to modify already saved documents\n    if (documentUrl.length > 0 || docName) {\n      if (documentUrl.length === sectionMetaDropdownOptions.length || docName) {\n        setMandatorySectionsUploaded(true);\n      } else {\n        setMandatorySectionsUploaded(false);\n      }\n    } else {\n      setMandatorySectionsUploaded(false);\n    }\n\n    if (!documentNumber && !documentInfo.uid && docNo && uid && docName) {\n      const primaryKeyForDoc = getPrimaryAttributeKeyName(docName);\n      setDocumentInfo((prev) => {\n        return {\n          ...prev,\n          uid: uid ?? \"\",\n          documentNumber: docNo,\n          [`${primaryKeyForDoc}`]: maskedDocNo ? maskedDocNo : docNo,\n          primaryKeyAttributeName: primaryKeyForDoc,\n          dob: dateOfBirth ?? \"\",\n        };\n      });\n    }\n\n    if (!isActive && onRemove !== undefined) {\n      onRemove({ ...documentInfo, uid }, documentListIndex);\n    }\n  }, [documentInfo]);\n\n  /*----------------------------- Service Calls --------------------------------- */\n\n  const init = async () => {\n    if (!documentTypeList.length) {\n      getDocumentList();\n    }\n  };\n\n  const getDocumentList = async () => {\n    try {\n      const res = await DocumentCategoryService.getDocumentCategory(\n        0,\n        20,\n        `${DOCUMENT_CATEGORY.DOCUMENT_CATEGORY_KYC}`\n      );\n\n      if (validateGetAPIResponse(res)) {\n        const documentTypeList: IDropDownOptions[] = [];\n        let docAttrConfigList: IKYCDocAttribute[] = [];\n\n        const findPrimaryKeyAttributeName = (attributes: any) => {\n          for (const attribute of attributes) {\n            if (attribute.isPrimaryAttribute) return attribute.name;\n          }\n          return \"\";\n        };\n\n        res.data.results?.forEach((record: { [key: string]: any }) => {\n          documentTypeList.push({\n            uid: record.documentType?.uid,\n            label: record.documentType?.name,\n            value: record.documentType?.code,\n            isActive: record.documentType?.isActive ?? false,\n          });\n\n          docAttrConfigList.push({\n            code: record.documentType?.code,\n            attributes: record.documentType?.attributeConfig\n              ? JSON.parse(record.documentType?.attributeConfig)\n              : [],\n            primaryKey: \"\",\n          });\n        });\n\n        docAttrConfigList = docAttrConfigList.map((docAttributes) => ({\n          ...docAttributes,\n          primaryKey: findPrimaryKeyAttributeName(docAttributes.attributes),\n        }));\n\n        documentTypeList.length ? setDocumentTypeList(documentTypeList) : setDocumentTypeList([]);\n\n        docAttrConfigList.length\n          ? setDocAttributeConfigList([...docAttrConfigList])\n          : setDocAttributeConfigList([]);\n      }\n    } catch (error) {\n      setErrorMessage(parseStandardAPIErrorMessage(error));\n    }\n  };\n\n  const getSectionList = async (uid: string) => {\n    try {\n      const res = await DocumentService.getDocument(uid);\n      if (validateGetAPIResponse(res)) {\n        return res.data;\n      }\n    } catch (error) {\n      setErrorMessage(parseStandardAPIErrorMessage(error));\n    }\n  };\n\n  /*-----------------------------------Event Handlers----------------------------- */\n\n  const handleKycDropdownChange = async (e: DropdownChangeParams) => {\n    setSelectedKycDoc(e.value);\n    const selectedDocumentType = documentTypeList?.find(\n      (doc: IDropDownOptions) => doc.value === e.value\n    );\n\n    if (selectedDocumentType) {\n      prepareDocumentSections(selectedDocumentType);\n\n      //reset validator\n      validator.current = new SimpleReactValidator({\n        validators: { ...getStandardValidator() },\n        ...messageReplace(),\n        autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n      });\n\n      if (documentListIndex !== undefined) {\n        if (!cardNameList.includes(e.value)) {\n          const docNameArr = [...cardNameList];\n          docNameArr[documentListIndex] = e.value;\n          handlerCardNameList(docNameArr);\n          setIsDuplicateError(false);\n        } else {\n          const docNameArr = [...cardNameList];\n          docNameArr[documentListIndex] = \"\";\n          handlerCardNameList(docNameArr);\n          setIsDuplicateError(true);\n        }\n      }\n    }\n  };\n\n  const handleOtpInputChange = (e: React.BaseSyntheticEvent) => {\n    setAadharInfo((prev) => {\n      return {\n        ...prev,\n        otp: e.target.value,\n      };\n    });\n  };\n\n  const handleInputChange = (e: React.BaseSyntheticEvent) => {\n    setDocumentInfo((prev: IKycDocumentsInfo) => ({\n      ...prev,\n      documentNumber: e.target.value.toUpperCase(),\n      [e.target.name]: e.target.value.toUpperCase(),\n    }));\n  };\n\n  const handleDobChange = (e: CalendarChangeParams) => {\n    const { value } = e.target;\n    setDocumentInfo((prev: IKycDocumentsInfo) => ({\n      ...prev,\n      dob: value,\n    }));\n  };\n\n  const onSaveCardInfo = async () => {\n    let isValid = false;\n    isValid = await validateForm();\n    if (!isValid) {\n      return;\n    }\n\n    let unsavedDocumentInfo = { ...documentInfo };\n    const sortedDocSections = sortSectionsByName(unsavedDocumentInfo.documentUrl);\n\n    unsavedDocumentInfo = {\n      ...unsavedDocumentInfo,\n      documentUrl: sortedDocSections,\n    };\n\n    onSave(\n      {\n        ...unsavedDocumentInfo,\n        uid,\n        primaryKeyAttributeName: getPrimaryAttributeKeyName(documentInfo.documentType),\n      },\n      documentListIndex\n    );\n    setCardMode(CARD_MODE.READ);\n  };\n\n  const onPopulateWithOcr = () => {\n    onPopulate(documentInfo, documentListIndex);\n    setLoaderOcr(true);\n  };\n\n  const onValidateAadhar = async () => {\n    // handle aadhar validation\n    let isValid = false;\n    isValid = await validateForm();\n    if (!isValid) {\n      return;\n    }\n    sendOTP(false); // sending otp for the first time\n    setLoaderValidation(true);\n  };\n\n  const sendOTP = async (isOtpResend: boolean) => {\n    try {\n      const payload = {\n        aadhaarNo: documentInfo.documentNumber,\n        consent: \"Y\",\n      };\n\n      const res = await KYCService.sendOTPForAadhar(payload);\n\n      if (res.data?.statusCode === 101) {\n        setAadharInfo({\n          otp: \"\",\n          requestId: res.data.requestId ?? \"\",\n          message: res.data.result?.message ?? \"\",\n          verified: false,\n        });\n\n        if (!isOtpResend) {\n          //if otp is resend then skip the below code\n          setShowValidationPopUp(true);\n          validator.current?.hideMessages();\n        }\n      } else {\n        setErrorMessage(\"Failed to send OTP\");\n        setLoaderValidation(false);\n      }\n    } catch (error) {\n      setErrorMessage(parseStandardAPIErrorMessage(error));\n      setLoaderValidation(false);\n    }\n  };\n\n  const onCancelValidation = () => {\n    setAadharInfo({ otp: \"\", requestId: \"\", message: \"\", verified: false });\n    setShowValidationPopUp(false);\n    setLoaderValidation(false);\n  };\n\n  const onVerify = async () => {\n    //validate otp input field for value\n    let isValid = false;\n    isValid = await validateForm();\n    if (!isValid) {\n      return;\n    }\n    onVerifyAadhar(documentInfo, aadharInfo, documentListIndex, uid);\n    setShowValidationPopUp(false);\n  };\n\n  const onResendOTP = () => {\n    sendOTP(true);\n  };\n\n  /*-----------------------------Validators-------------------------------------- */\n\n  const validate = (e: React.BaseSyntheticEvent) => {\n    validator?.current?.showMessageFor(e?.target?.name);\n  };\n\n  const validateForm = async () => {\n    let isValid = false;\n    isValid = validator?.current?.allValid() ?? false;\n    if (isValid) {\n      return isValid;\n    } else {\n      forceUpdate((prev) => !prev);\n      validator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n\n  /*-----------------------------Helper Functions-------------------------------- */\n\n  const prepareDocumentSections = async (selectedDocumentType: IDropDownOptions) => {\n    if (selectedDocumentType && selectedDocumentType.uid) {\n      const res = await getSectionList(selectedDocumentType.uid);\n\n      const sections: any[] = [];\n      const metaDataOptions: IDropDownOptions[] = [];\n\n      res?.documentSections?.forEach((documentSection: any) => {\n        if (documentSection.isActive) {\n          if (documentSection.section?.code === DOCUMENT_SECTION.DOCUMENT_SECTIONS_FRONT_PAGE) {\n            sections.unshift({\n              ...documentSection.section,\n              isOcrActive: documentSection.isOcrActive,\n              documentSectionUid: documentSection.uid,\n            });\n          } else {\n            sections.push({\n              ...documentSection.section,\n              isOcrActive: documentSection.isOcrActive,\n              documentSectionUid: documentSection.uid,\n            });\n          }\n\n          metaDataOptions.push({\n            label: documentSection.section?.name,\n            value: documentSection.section?.code,\n          });\n        }\n      });\n\n      //if docName and docNo exists then keep the saved sections in documentUrl else make documentUrl as empty\n      if (docName && docNo) {\n        setDocumentInfo((prev: IKycDocumentsInfo) => ({\n          ...prev,\n          documentUid: selectedDocumentType.uid ? selectedDocumentType.uid : \"\",\n          documentName: selectedDocumentType.label,\n          documentType: selectedDocumentType.value,\n          documentNumber: docNo ? docNo : \"\",\n          dob: dateOfBirth ? dateOfBirth : \"\",\n          sectionMetaDropdownOptions: metaDataOptions,\n        }));\n      } else {\n        setDocumentInfo((prev: IKycDocumentsInfo) => ({\n          ...prev,\n          documentUid: selectedDocumentType.uid ? selectedDocumentType.uid : \"\",\n          documentName: selectedDocumentType.label,\n          documentType: selectedDocumentType.value,\n          documentNumber: docNo ? docNo : \"\",\n          dob: dateOfBirth ? dateOfBirth : \"\",\n          documentUrl: [],\n          sectionMetaDropdownOptions: metaDataOptions,\n        }));\n      }\n\n      setDocumentSections([...sections]);\n      setDocumentMetaDataOptions([...metaDataOptions]);\n      setMandatorySectionsUploaded(false);\n    }\n  };\n\n  const getUploadedFileInfo = (uploadedFile: IUploadedFile, section: any) => {\n    setDocumentInfo({\n      ...documentInfo,\n      documentUrl: [\n        ...documentInfo.documentUrl,\n        {\n          [`${section.name}`]: uploadedFile.url,\n          ...uploadedFile,\n          code: section.code,\n          name: section.name,\n          isOcrActive: section.isOcrActive,\n        },\n      ],\n    });\n\n    if (section.isOcrActive) {\n      setOcr((prev) => {\n        return { ...prev, enableOcr: true };\n      });\n    }\n  };\n\n  // delete a specific section url from the state documentInfo if deleted from uploader\n  const onDeleteFromUploader = (sectionName: string) => {\n    //check if the section to be deleted allows ocr or not\n    let isOcrAvailable = false;\n    const updatedDocumentUrl = documentInfo.documentUrl.filter((doc) => {\n      if (doc.name === sectionName) {\n        isOcrAvailable = doc.isOcrActive;\n      }\n      return doc.name !== sectionName;\n    });\n\n    //function to check if there is any uploaded section which has ocr active in updatedDocumentUrl. if yes then keep ocr button enabled else disable it\n    const isOcrSectionPresent = () => {\n      return updatedDocumentUrl.some((doc) => {\n        return doc.isOcrActive;\n      });\n    };\n\n    // if section allows ocr then disable populate with ocr text button when the section is deleted\n    if (isOcrAvailable && !isOcrSectionPresent()) {\n      setOcr((prev) => {\n        return {\n          ...prev,\n          enableOcr: false,\n        };\n      });\n    }\n\n    setDocumentInfo({\n      ...documentInfo,\n      documentUrl: updatedDocumentUrl,\n    });\n  };\n\n  const getPrimaryAttributeKeyName = (documentCode: string) => {\n    for (const docAttribute of docAttributeConfigList) {\n      if (docAttribute.code === documentCode) {\n        return docAttribute.primaryKey;\n      }\n    }\n  };\n\n  const sortSectionsByName = (sections: any[]) => {\n    const sortedSections: { [key: string]: any }[] = [];\n    const sectionCodeMap = new Map();\n\n    sections.forEach((section) => {\n      sectionCodeMap.set(section.code, section);\n    });\n\n    for (let idx = 0; idx < documentSections.length; idx++) {\n      sortedSections.push(sectionCodeMap.get(documentSections[idx].code));\n    }\n    return sortedSections;\n  };\n\n  /*----------------------------Sectional Renders--------------------------------*/\n\n  // to show a dummy uploader when nothing is selected from dropdown\n  const renderDummyUploader = (): ReactNode => {\n    return (\n      <div className=\"pointer-events-none h-32.5\">\n        <FileUploadCustom disabled />\n      </div>\n    );\n  };\n\n  //loader icon\n  const renderLoaderIcon = (): ReactNode => {\n    return (\n      <span>\n        <img className=\"w-3 h-3 animate-spin\" src={LoaderIcon} alt=\"loader\" />\n      </span>\n    );\n  };\n\n  // to show file uploader(s) based on the number of sections in the document type\n  const renderDocumentSections = (): ReactNode => {\n    const category = {\n      label: \"KYC\",\n      value: DOCUMENT_CATEGORY.DOCUMENT_CATEGORY_KYC,\n    };\n    const defaultOptions = { label: \"\", value: \"\" };\n\n    const prepareMediaGalleryInfo = (idx: number) => {\n      if (documentInfo.documentUrl.length > 0) {\n        let sections = [...documentInfo.documentUrl];\n        sections = sortSectionsByName(sections);\n\n        const collectedMediaInfo: any = {\n          ...sections[idx],\n          sectionName: sections[idx]?.name,\n          category: category.label,\n          type: documentInfo.documentName,\n        };\n\n        const preparedInfo: IMediaInfo = {\n          uid: \"\",\n          placeOfUpload: placeOfUpload ?? \"\",\n          name: \"\",\n          fileName: collectedMediaInfo?.fileName,\n          fileType: collectedMediaInfo?.contentType,\n          download: \"\",\n          category: collectedMediaInfo?.category,\n          type: collectedMediaInfo?.type,\n          sectionName: collectedMediaInfo?.name,\n          url: collectedMediaInfo?.url,\n        };\n\n        return preparedInfo;\n      } else if (docSections && docSections?.length > 0) {\n        const sectionName = documentSections.find(\n          (documentSection) => documentSection.code === docSections[idx].sectionType\n        )?.name;\n\n        const sortedSections: IKycUploadedDocSection[] = [];\n        const sectionMap = new Map();\n\n        docSections.forEach((section) => {\n          sectionMap.set(section.sectionType, section);\n        });\n\n        for (let idx = 0; idx < documentSections.length; idx++) {\n          sortedSections.push(sectionMap.get(documentSections[idx].code));\n        }\n\n        const preparedInfo: IMediaInfo = {\n          uid: \"\",\n          placeOfUpload: placeOfUpload ?? \"\",\n          name: \"\",\n          fileName: sortedSections?.[idx]?.fileName ?? \"\",\n          fileType: sortedSections?.[idx]?.fileType,\n          download: \"\",\n          category: category.label,\n          type: documentInfo.documentName,\n          sectionName: sectionName ?? \"\",\n          url: sortedSections?.[idx]?.url ?? \"\",\n        };\n\n        return preparedInfo;\n      }\n    };\n\n    return (\n      <div className={`flex justify-start h-32.5`}>\n        <div className=\"flex gap-x-6 overflow-x-auto custom-kyc-doc-scroll\">\n          {documentSections.map((section, index) => {\n            return (\n              <FileUploadCustom\n                key={`file-uploader-${documentInfo.documentType}-${section.code}`}\n                mode={docName ? FILE_UPLOADER_MODE.mode : undefined}\n                docInfoForMediaGallery={prepareMediaGalleryInfo(index)}\n                uploaderIndex={index}\n                getUrl={(uploadedFile: IUploadedFile) => {\n                  getUploadedFileInfo(uploadedFile, section);\n                }}\n                savedFileInfoFromApi={docSections ? docSections[index] : {}}\n                footerTitle={section.name}\n                clearCardUploadSectionData={onDeleteFromUploader}\n                metaCategoryDropdownOptions={[category ?? defaultOptions]}\n                metaTypeDropdownOptions={[\n                  {\n                    uid: documentInfo.documentUid,\n                    label: documentInfo.documentName,\n                    value: documentInfo.documentType,\n                  },\n                ]}\n                metaSectionDropdownOptions={documentMetaDataOptions ?? [defaultOptions]}\n                disableMetaCategory\n                disableMetaType\n                disableMetaSection\n                disableKebab={!!uid || cardMode === CARD_MODE.READ || aadharInfo.verified}\n                disabled={cardMode === CARD_MODE.READ}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const renderDocInputFields = (): ReactNode => {\n    const inputFieldsCollection = docAttributeConfigList.find(\n      (item: any) => item.code === selectedKycDoc\n    );\n\n    const generateFieldValidation = (docCode: string, attribute: IAttributeConfig) => {\n      let validationRules = attribute.required ? \"mandatory\" : \"optional\";\n      if (docCode === DOCUMENT_TYPE.PAN) {\n        validationRules = validationRules + \"|pan\";\n        return validationRules;\n      } else if (docCode === DOCUMENT_TYPE.AADHAR_CARD) {\n        validationRules = validationRules + \"|aadharCard\";\n        return validationRules;\n      } else if (docCode === DOCUMENT_TYPE.PASSPORT) {\n        if (attribute.name === KYC_INPUT_FIELDS_ATTRIBUTE_NAME.DOB) {\n          validationRules = validationRules + \"|dob\";\n        }\n        return validationRules;\n      }\n      return validationRules;\n    };\n\n    return (\n      <div>\n        {inputFieldsCollection?.attributes?.map((attribute: IAttributeConfig) => (\n          <React.Fragment key={`doc-attribute-${attribute.name}`}>\n            <div className=\"flex flex-col\">\n              {attribute.name !== KYC_INPUT_FIELDS_ATTRIBUTE_NAME.MASKEDNO && (\n                <Text\n                  className=\"self-start text-xs select-none\"\n                  label={attribute.label}\n                  mandatory={attribute.required}\n                />\n              )}\n\n              {attribute.inputType === KYC_INPUT_FIELDS_TYPE.TEXT ||\n              attribute.inputType === KYC_INPUT_FIELDS_TYPE.NUMBER ? (\n                <Fragment>\n                  {attribute.name !== KYC_INPUT_FIELDS_ATTRIBUTE_NAME.MASKEDNO && (\n                    <div className=\"w-50\">\n                      <InputBox\n                        name={`${attribute.name}`}\n                        className=\"!h-6 !py-1 !px-2 focus:outline-0 !focus:border focus:border-secondary-steelBlue-300 outline-0\"\n                        value={documentInfo?.[`${attribute.name}`] ?? \"\"}\n                        onChange={handleInputChange}\n                        onBlur={validate}\n                        validation={validator?.current?.message(\n                          `${attribute.name}`,\n                          documentInfo[`${attribute.name}`],\n                          generateFieldValidation(inputFieldsCollection.code, attribute)\n                        )}\n                        hideLabel\n                        disabled={\n                          cardMode === CARD_MODE.READ || isDuplicateError || aadharInfo.verified\n                        }\n                      />\n                    </div>\n                  )}\n                </Fragment>\n              ) : null}\n\n              {attribute.inputType === KYC_INPUT_FIELDS_TYPE.DATE && (\n                <div className=\"w-50\">\n                  <DatePicker\n                    name=\"dob\"\n                    value={new Date(documentInfo.dob)}\n                    maxDate={new Date()}\n                    variant={INPUT_STYLE_TYPE.SECONDARY}\n                    onChange={handleDobChange}\n                    onBlur={validate}\n                    placeholder=\"DD-MM-YYYY \"\n                    validation={validator?.current?.message(\n                      \"dob\",\n                      documentInfo?.dob,\n                      generateFieldValidation(inputFieldsCollection.code, attribute)\n                    )}\n                    hideLabel\n                    disabled={cardMode === CARD_MODE.READ || isDuplicateError}\n                  />\n                </div>\n              )}\n            </div>\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const renderValidationDialog = (): ReactNode => {\n    return (\n      <DialogBox className={`w-77 pt-6 pb-4 px-6`} visible={showValidationPopUp} closable={false}>\n        <div className=\"flex flex-col\">\n          <div className=\"mb-16 select-none\">\n            <div className=\"font-bold text-primary-primaryTextColor\">\n              <Text label={\"Enter OTP\"} />\n            </div>\n            <div className=\"text-xs\">\n              <Text label={aadharInfo.message} />\n            </div>\n          </div>\n\n          <div className=\"w-64 mb-8 select-none\">\n            <InputBox\n              name=\"otp\"\n              label={\"OTP\"}\n              onBlur={validate}\n              validation={validator?.current?.message(\"otp\", aadharInfo?.otp, \"mandatory\")}\n              onChange={handleOtpInputChange}\n            />\n          </div>\n\n          <div className=\"mb-8 flex justify-center\">\n            <TextButton\n              label=\"Resend OTP\"\n              className=\"text-primary-sapphireBlue-1000 text-sm cursor-pointer underline select-none\"\n              onClick={onResendOTP}\n            />\n          </div>\n\n          <div className=\"flex gap-6 items-center justify-center text-xs text-primary-ptext-1000 select-none\">\n            <ButtonBox buttonType={BUTTON_TYPE.CANCEL_OUTLINE} onClick={onCancelValidation} />\n            <ButtonBox buttonType={BUTTON_TYPE.VERIFY} onClickWithLoader={onVerify} />\n          </div>\n        </div>\n      </DialogBox>\n    );\n  };\n\n  const renderKycTemplate = (): ReactNode => {\n    return (\n      <div\n        className={`border ${\n          cardMode === CARD_MODE.READ\n            ? \"border-primary-ptext-500\"\n            : \"border-primary-sapphireBlue-600\"\n        } rounded-xl p-5 flex flex-col gap-3 text-xs`}\n      >\n        {/* card header */}\n        <div className=\"flex items-center justify-end\">\n          <div className=\"flex gap-3\">\n            {cardMode === CARD_MODE.READ ? (\n              <IconButton\n                className={`select-none`}\n                buttonType={BUTTON_TYPES.EDIT}\n                onClick={() => setCardMode(CARD_MODE.EDIT)}\n                tooltipOptions={{\n                  position: \"top\",\n                  className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n                  showDelay: \"1000,\",\n                  hideDelay: \"300\",\n                }}\n                disabled={mode === CARD_MODE.READ || isDuplicateError}\n              />\n            ) : (\n              <div className=\"flex gap-6\">\n                <IconButton\n                  className={\"select-none\"}\n                  buttonType={BUTTON_TYPES.CANCEL}\n                  onClick={() => setCardMode(CARD_MODE.READ)}\n                  tooltipOptions={{\n                    position: \"left\",\n                    className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n                    showDelay: \"1000,\",\n                    hideDelay: \"300\",\n                  }}\n                />\n                <IconButton\n                  className={\"select-none\"}\n                  buttonType={BUTTON_TYPES.SAVE}\n                  onClickWithLoader={onSaveCardInfo}\n                  tooltipOptions={{\n                    position: \"top\",\n                    className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n                    showDelay: \"1000,\",\n                    hideDelay: \"300\",\n                  }}\n                  disabled={!mandatorySectionsUploaded}\n                />\n              </div>\n            )}\n\n            <FileUploadMenuBox\n              model={documentCardMenuOptions}\n              variant=\"SECONDARY\"\n              disabled={disableKycCardMenu ? disableKycCardMenu : false}\n            />\n          </div>\n        </div>\n\n        <div className=\"w-3/4 h-8\">\n          <SimpleDropDown\n            placeholder={\"Select Document Type\"}\n            hideLabel\n            hideErrorRow\n            optionLabel=\"label\"\n            optionValue=\"value\"\n            options={documentTypeList}\n            value={selectedKycDoc}\n            onChange={handleKycDropdownChange}\n            disabled={!!uid || cardMode === CARD_MODE.READ || aadharInfo.verified}\n          />\n          {isDuplicateError && (\n            <div className=\"pl-2 text-xxs text-semantic-crimson-600\">\n              <Text label={\"Document already selected\"} />\n            </div>\n          )}\n        </div>\n\n        {/* uploader section */}\n        <div className=\"flex flex-col gap-2\">\n          <div className=\"font-thin text-primary-ptext-900 select-none\">\n            <Text label={uploadTitle ?? \"Attach Documents (PDF, JPG, JPEG or PNG)\"} />\n          </div>\n\n          {selectedKycDoc && !isDuplicateError ? renderDocumentSections() : renderDummyUploader()}\n        </div>\n\n        {/* card footer */}\n        <div\n          className={`-mx-5 px-5 pt-3 border-t-0.5 ${\n            cardMode === CARD_MODE.READ\n              ? \" border-primary-ptext-500\"\n              : \" border-primary-sapphireBlue-600\"\n          }`}\n        >\n          <div className=\"flex flex-col gap-2\">\n            {ocr.showPopulateOcr && (\n              <div className=\"self-end\">\n                <IconButton\n                  className={`select-none`}\n                  buttonType={BUTTON_TYPES.OCR}\n                  onClick={onPopulateWithOcr}\n                  tooltipOptions={{\n                    position: \"top\",\n                    className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n                    showDelay: \"1000,\",\n                    hideDelay: \"300\",\n                  }}\n                  disabled={cardMode === CARD_MODE.READ || !ocr.enableOcr || aadharInfo.verified}\n                >\n                  {loaderOcr && renderLoaderIcon()}\n                  <Text\n                    className={`font-normal text-xs text-primary-ptext-600 ${\n                      ocr.enableOcr && cardMode !== CARD_MODE.READ\n                        ? \"text-primary-sapphireBlue-600 cursor-pointer\"\n                        : \"\"\n                    } ${aadharInfo.verified ? \"!text-primary-ptext-600 pointer-events-none\" : \"\"}`}\n                    label={\"label.populate.OCR\"}\n                  />\n                </IconButton>\n              </div>\n            )}\n\n            <div className=\"flex flex-wrap items-center justify-between\">\n              {docAttributeConfigList.length && selectedKycDoc ? renderDocInputFields() : null}\n\n              {documentInfo.documentType === DOCUMENT_TYPE.AADHAR_CARD && !aadharInfo.verified && (\n                <div className=\"self-end flex flex-col\">\n                  <button\n                    className={`w-43 h-8 flex gap-1.5 items-center justify-center py-1 text-center border rounded-md select-none ${\n                      cardMode === CARD_MODE.READ || !mandatorySectionsUploaded\n                        ? \"pointer-events-none border-primary-ptext-400 bg-primary-ptext-200 text-primary-ptext-600\"\n                        : \"border-primary-copyTextColor text-primary-copyTextColor cursor-pointer\"\n                    }`}\n                    onClick={onValidateAadhar}\n                  >\n                    {loaderValidation && renderLoaderIcon()}\n                    <Text className=\"cursor-pointer\" label={\"Validate Aadhar\"} />\n                  </button>\n                  <span className=\"h-4 text-xxs text-semantic-crimson-600\">\n                    {aadharVerificationStatus.failedToVerify && (\n                      <Text label={\"Aadhar Validation Failed\"} />\n                    )}\n                  </span>\n                </div>\n              )}\n\n              {documentInfo.documentType === DOCUMENT_TYPE.AADHAR_CARD && aadharInfo.verified && (\n                <div className=\"flex items-center gap-3 text-xs\">\n                  <img src={VerifiedIcon} alt=\"verified\" />\n                  <Text label={\"Verified\"} />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"w-full h-full\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center w-full h-full\">\n            <SkeletonCustom height=\"19rem\" width=\"100%\" borderRadius=\"8px\" animation=\"wave\" />\n          </div>\n        ) : (\n          renderKycTemplate()\n        )}\n\n        {/* pop up/dialog for validation */}\n        {showValidationPopUp && renderValidationDialog()}\n\n        <ErrorDialog\n          onHide={() => {\n            setShowDialogAPIError(false);\n            setErrorMessage(\"\");\n          }}\n          visible={showDialogAPIError}\n          errorMessage={errorMessage}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default KYCV3;\n"],"names":["VerifiedIcon","DEFAULT_PATH","KYCService","BaseApiService","__publicField","payload","url","loanUid","pageUid","substage","KYCService$1","CARD_MODE","FILE_UPLOADER_MODE","initialKycDocumentDataInfo","initialOcr","initialAadharInfo","KYC_INPUT_FIELDS_TYPE","KYC_INPUT_FIELDS_ATTRIBUTE_NAME","KYCV3","props","isLoading","mode","disableKycCardMenu","uid","docNo","maskedDocNo","dateOfBirth","docName","docSections","isVerified","uploadTitle","documentListIndex","removeDocumentInList","cardNameList","handlerCardNameList","onSave","onRemove","onPopulate","ocrStatus","onVerifyAadhar","aadharVerificationStatus","handlerAadharVerificationStatus","placeOfUpload","cardMode","setCardMode","useState","selectedKycDoc","setSelectedKycDoc","mandatorySectionsUploaded","setMandatorySectionsUploaded","documentTypeList","setDocumentTypeList","docAttributeConfigList","setDocAttributeConfigList","documentInfo","setDocumentInfo","aadharInfo","setAadharInfo","documentSections","setDocumentSections","documentMetaDataOptions","setDocumentMetaDataOptions","forceUpdate","showValidationPopUp","setShowValidationPopUp","ocr","setOcr","loaderOcr","setLoaderOcr","loaderValidation","setLoaderValidation","isDuplicateError","setIsDuplicateError","errorMessage","setErrorMessage","showDialogAPIError","setShowDialogAPIError","validator","useRef","SimpleReactValidator","getStandardValidator","messageReplace","prev","documentCardMenuOptions","docNameArr","useEffect","init","selectedDocumentType","doc","prepareDocumentSections","primaryKeyForDoc","getPrimaryAttributeKeyName","isOcrAvailableInDocType","section","documentNumber","documentUrl","sectionMetaDropdownOptions","isActive","getDocumentList","res","DocumentCategoryService","DOCUMENT_CATEGORY","validateGetAPIResponse","docAttrConfigList","findPrimaryKeyAttributeName","attributes","attribute","_a","record","_b","_c","_d","_e","_f","_g","docAttributes","error","parseStandardAPIErrorMessage","getSectionList","DocumentService","handleKycDropdownChange","handleOtpInputChange","handleInputChange","handleDobChange","value","onSaveCardInfo","isValid","validateForm","unsavedDocumentInfo","sortedDocSections","sortSectionsByName","onPopulateWithOcr","onValidateAadhar","sendOTP","isOtpResend","onCancelValidation","onVerify","onResendOTP","validate","sections","metaDataOptions","documentSection","DOCUMENT_SECTION","getUploadedFileInfo","uploadedFile","onDeleteFromUploader","sectionName","isOcrAvailable","updatedDocumentUrl","documentCode","docAttribute","sortedSections","sectionCodeMap","idx","renderDummyUploader","jsx","FileUploadCustom","renderLoaderIcon","LoaderIcon","renderDocumentSections","category","defaultOptions","prepareMediaGalleryInfo","collectedMediaInfo","sectionMap","index","renderDocInputFields","inputFieldsCollection","item","generateFieldValidation","docCode","validationRules","DOCUMENT_TYPE","React","jsxs","Text","Fragment","InputBox","DatePicker","INPUT_STYLE_TYPE","renderValidationDialog","DialogBox","TextButton","ButtonBox","BUTTON_TYPE","renderKycTemplate","IconButton","BUTTON_TYPES","FileUploadMenuBox","SimpleDropDown","SkeletonCustom","ErrorDialog"],"mappings":"o+BAAA,MAAeA,GAAA,qCCCTC,EAAe,oBACrB,MAAMC,WAAmBC,EAAe,CAAxC,kCAWEC,GAAA,wCAAoCC,GAAiB,CACnD,MAAMC,EAAM,GAAGL,+BACR,OAAA,KAAK,wBAAwBK,EAAKD,CAAO,CAAA,GAZlD,eAAeE,EAAiBC,EAAiB,CACzC,MAAAF,EAAM,GAAGL,KAAgBM,KAAWC,QACnC,OAAA,KAAK,uBAAuBF,CAAG,CACxC,CAEA,gBAAgBD,EAAcI,EAAkB,CACxC,MAAAH,EAAM,GAAGL,KAAgBQ,QACxB,OAAA,KAAK,wBAAwBH,EAAKD,CAAO,CAClD,CAOA,kBAAkBA,EAAcI,EAAkB,CAC1C,MAAAH,EAAM,GAAGL,KAAgBQ,QACxB,OAAA,KAAK,uBAAuBH,EAAKD,CAAO,CACjD,CAEA,oBAAoBA,EAAcI,EAAkB,CAC5C,MAAAH,EAAM,GAAGL,KAAgBQ,YACxB,OAAA,KAAK,wBAAwBH,EAAKD,CAAO,CAClD,CAEA,yBAAyBE,EAAiBC,EAAiB,CACnD,MAAAF,EAAM,GAAGL,KAAgBM,KAAWC,qBACnC,OAAA,KAAK,uBAAuBF,CAAG,CACxC,CAEA,iBAAiBD,EAAc,CAC7B,MAAMC,EAAM,+CACL,OAAA,KAAK,wBAAwBA,EAAKD,CAAO,CAClD,CAEA,eAAeA,EAAcI,EAAkB,CACvC,MAAAH,EAAM,GAAGL,KAAgBQ,yBACxB,OAAA,KAAK,wBAAwBH,EAAKD,CAAO,CAClD,CACF,CAEA,MAAeK,GAAA,IAAIR,GCqGNS,EAAgD,CAC3D,KAAM,OACN,KAAM,MACR,EAEaC,GAAyC,CACpD,KAAM,MACR,EAEMC,GAAgD,CACpD,IAAK,GACL,YAAa,GACb,wBAAyB,GACzB,2BAA4B,CAAC,EAC7B,aAAc,GACd,aAAc,GACd,YAAa,CAAC,EACd,eAAgB,GAChB,IAAK,GACL,SAAU,EACZ,EAEMC,GAAmB,CAAE,gBAAiB,GAAO,UAAW,EAAM,EAE9DC,GAAgC,CACpC,IAAK,GACL,QAAS,GACT,UAAW,GACX,SAAU,EACZ,EAEMC,GAAwB,CAC5B,KAAM,OACN,KAAM,OACN,OAAQ,QACV,EAEMC,GAAkC,CACtC,SAAU,WACV,IAAK,KACP,EAIMC,GAAsCC,GAA6B,CACjE,KAAA,CACJ,UAAAC,EACA,KAAAC,EACA,mBAAAC,EACA,IAAAC,EACA,MAAAC,EACA,YAAAC,EACA,YAAAC,EACA,QAAAC,EACA,YAAAC,EACA,WAAAC,GACA,YAAAC,GACA,kBAAAC,EACA,qBAAAC,GACA,aAAAC,EACA,oBAAAC,EACA,OAAAC,GACA,SAAAC,GACA,WAAAC,GACA,UAAAC,EACA,eAAAC,GACA,yBAAAC,EACA,gCAAAC,GACA,cAAAC,EACE,EAAAvB,EAEE,CAACwB,EAAUC,CAAW,EAAIC,WAA8BxB,CAAI,EAC5D,CAACyB,EAAgBC,EAAiB,EAAIF,EAAAA,SAAiBlB,GAAW,EAAE,EACpE,CAACqB,GAA2BC,CAA4B,EAAIJ,WAAS,EAAK,EAE1E,CAACK,EAAkBC,EAAmB,EAAIN,EAAA,SAA6B,CAAE,CAAA,EAEzE,CAACO,EAAwBC,EAAyB,EAAIR,EAAA,SAA6B,CAAE,CAAA,EAErF,CAACS,EAAcC,CAAe,EAAIV,WAA4BhC,EAA0B,EACxF,CAAC2C,EAAYC,CAAa,EAAIZ,WAAqB,CACvD,GAAG9B,GACH,SAAUc,IAA0B,EAAA,CACrC,EACK,CAAC6B,EAAkBC,EAAmB,EAAId,EAAA,SAAgB,CAAE,CAAA,EAC5D,CAACe,GAAyBC,EAA0B,EAAIhB,EAAA,SAA6B,CAAE,CAAA,EACvF,CAAG,CAAAiB,CAAW,EAAIjB,WAA8B,MAAS,EACzD,CAACkB,EAAqBC,EAAsB,EAAInB,WAAkB,EAAK,EACvE,CAACoB,GAAKC,CAAM,EAAIrB,WAAS/B,EAAU,EACnC,CAACqD,GAAWC,EAAY,EAAIvB,WAAS,EAAK,EAC1C,CAACwB,GAAkBC,CAAmB,EAAIzB,WAAS,EAAK,EACxD,CAAC0B,EAAkBC,EAAmB,EAAI3B,WAAS,EAAK,EAGxD,CAAC4B,GAAcC,CAAe,EAAI7B,WAAS,EAAE,EAC7C,CAAC8B,GAAoBC,EAAqB,EAAI/B,WAAS,EAAK,EAE5DgC,EAAYC,EAAA,OAChB,IAAIC,GAAqB,CACvB,WAAY,CAAE,GAAGC,IAAuB,EACxC,GAAGC,GAAe,EAClB,gBAAiB,CAAE,YAAa,IAAMnB,EAAaoB,GAAS,CAACA,CAAI,CAAE,CAAA,CACpE,CAAA,EAGGC,GAA0B,CAC9B,CACE,UAAW,GACX,MAAO,SACP,QAAS,IAAM,CACT,GAAAnD,KAAyB,QAAaD,IAAsB,OAAW,CACrER,EACFgC,EAAiB2B,IACR,CACL,GAAGA,EACH,SAAU,EAAA,EAEb,EAEDlD,GAAqBD,CAAiB,EAIlC,MAAAqD,EAAa,CAAC,GAAGnD,CAAY,EACxBmD,EAAA,OAAOrD,EAAmB,CAAC,EAClBG,EAAA,CAAC,GAAGkD,CAAU,CAAC,EAEvC,EACA,SAAU,EACZ,CAAA,EAGFC,EAAAA,UAAU,IAAM,CACTC,KAGDjE,IAAS,QACXuB,EAAYjC,EAAU,IAAI,CAE9B,EAAG,CAAE,CAAA,EAEL0E,EAAAA,UAAU,IAAM,CACVZ,IACFG,GAAsB,EAAI,CAC5B,EACC,CAACH,EAAY,CAAC,EAEjBY,EAAAA,UAAU,IAAM,CACTtB,IACOc,EAAA,QAAU,IAAIE,GAAqB,CAC3C,WAAY,CAAE,GAAGC,IAAuB,EACxC,GAAGC,GAAe,EAClB,gBAAiB,CAAE,YAAa,IAAMnB,EAAaoB,GAAS,CAACA,CAAI,CAAE,CAAA,CACpE,EACH,EACC,CAACnB,CAAmB,CAAC,EAExBsB,EAAAA,UAAU,IAAM,CACV,GAAA1D,GAAWuB,EAAiB,OAAQ,CACtCH,GAAkBpB,CAAO,EACzB,MAAM4D,EAAuBrC,GAAA,YAAAA,EAAkB,KAC5CsC,GAA0BA,EAAI,QAAU7D,GAGvC4D,GACFE,GAAwBF,CAAoB,EAEhD,EACC,CAAC5D,EAASuB,CAAgB,CAAC,EAE9BmC,EAAAA,UAAU,IAAM,CACV,GAAA7D,GAASG,GAAWuB,EAAiB,OAAQ,CACzC,MAAAwC,EAAmBC,GAA2BhE,CAAO,EAC3D4B,EAAiB2B,IACR,CACL,GAAGA,EACH,eAAgB1D,EAChB,CAAC,GAAGkE,GAAkB,EAAGjE,GAA4BD,EACrD,wBAAyBkE,EACzB,IAAKhE,GAAe,EAAA,EAEvB,EACD0C,GAAa,EAAK,EAEnB,EAAA,CAAC5C,EAAOE,EAAawB,CAAgB,CAAC,EAEzCmC,EAAAA,UAAU,IAAM,CAKd,IAJI/C,EAAU,QAAUA,EAAU,UAChC8B,GAAa,EAAK,EAGhBV,EAAiB,OAAQ,CAE3B,MAAMkC,EAA0BlC,EAAiB,KAC9CmC,GAAYA,EAAQ,cAAgB,EAAA,EAIrC3B,EADE0B,EACMV,IACC,CACL,GAAGA,EACH,gBAAiB,EAAA,GAMbA,IACC,CACL,GAAGA,EACH,gBAAiB,EAAA,EAPpB,EAWL,EACC,CAACxB,EAAkBpB,CAAS,CAAC,EAEhC+C,EAAAA,UAAU,IAAM,CACV7C,EAAyB,gBAC3B8B,EAAoB,EAAK,EACXb,EAAA,CAAE,IAAK,GAAI,UAAW,GAAI,QAAS,GAAI,SAAU,EAAA,CAAO,EAEtE,WAAW,IAAM,CACiBhB,MAC/B,GAAI,GACED,EAAyB,WAClC8B,EAAoB,EAAK,EACXb,EAAA,CAAE,IAAK,GAAI,UAAW,GAAI,QAAS,GAAI,SAAU,EAAA,CAAM,EAErE,WAAW,IAAM,CACiBhB,MAC/B,GAAI,EACT,EACC,CAACD,CAAwB,CAAC,EAG7B6C,EAAAA,UAAU,IAAM,CACd,KAAM,CAAE,eAAAS,EAAgB,YAAAC,EAAa,2BAAAC,EAA4B,SAAAC,GAAa3C,EAY9E,IAVIyC,EAAY,OAAS,GAAKpE,KACxBoE,EAAY,SAAWC,EAA2B,QAAUrE,GAC9DsB,EAA6B,EAAI,EAKnCA,EAA6B,EAAK,EAGhC,CAAC6C,GAAkB,CAACxC,EAAa,KAAO9B,GAASD,GAAOI,EAAS,CAC7D,MAAA+D,EAAmBC,GAA2BhE,CAAO,EAC3D4B,EAAiB2B,IACR,CACL,GAAGA,EACH,IAAK3D,GAAO,GACZ,eAAgBC,EAChB,CAAC,GAAGkE,GAAkB,EAAGjE,GAA4BD,EACrD,wBAAyBkE,EACzB,IAAKhE,GAAe,EAAA,EAEvB,EAGC,CAACuE,GAAY7D,KAAa,QAC5BA,GAAS,CAAE,GAAGkB,EAAc,IAAA/B,GAAOQ,CAAiB,CACtD,EACC,CAACuB,CAAY,CAAC,EAIjB,MAAMgC,GAAO,SAAY,CAClBpC,EAAiB,QACJgD,IAClB,EAGIA,GAAkB,SAAY,OAC9B,GAAA,CACI,MAAAC,EAAM,MAAMC,GAAwB,oBACxC,EACA,GACA,GAAGC,GAAkB,uBAAA,EAGnB,GAAAC,GAAuBH,CAAG,EAAG,CAC/B,MAAMjD,EAAuC,CAAA,EAC7C,IAAIqD,EAAwC,CAAA,EAEtC,MAAAC,EAA+BC,GAAoB,CACvD,UAAWC,KAAaD,EACtB,GAAIC,EAAU,mBAAoB,OAAOA,EAAU,KAE9C,MAAA,EAAA,GAGTC,EAAAR,EAAI,KAAK,UAAT,MAAAQ,EAAkB,QAASC,GAAmC,oBAC5D1D,EAAiB,KAAK,CACpB,KAAKyD,EAAAC,EAAO,eAAP,YAAAD,EAAqB,IAC1B,OAAOE,EAAAD,EAAO,eAAP,YAAAC,EAAqB,KAC5B,OAAOC,EAAAF,EAAO,eAAP,YAAAE,EAAqB,KAC5B,WAAUC,EAAAH,EAAO,eAAP,YAAAG,EAAqB,WAAY,EAAA,CAC5C,EAEDR,EAAkB,KAAK,CACrB,MAAMS,EAAAJ,EAAO,eAAP,YAAAI,EAAqB,KAC3B,YAAYC,EAAAL,EAAO,eAAP,MAAAK,EAAqB,gBAC7B,KAAK,OAAMC,GAAAN,EAAO,eAAP,YAAAM,GAAqB,eAAe,EAC/C,CAAC,EACL,WAAY,EAAA,CACb,CAAA,GAGiBX,EAAAA,EAAkB,IAAKY,IAAmB,CAC5D,GAAGA,EACH,WAAYX,EAA4BW,EAAc,UAAU,CAChE,EAAA,EAEFjE,EAAiB,OAASC,GAAoBD,CAAgB,EAAIC,GAAoB,CAAA,CAAE,EAEtEoD,EAAA,OACdlD,GAA0B,CAAC,GAAGkD,CAAiB,CAAC,EAChDlD,GAA0B,CAAA,CAAE,SAE3B+D,GACS1C,EAAA2C,GAA6BD,CAAK,CAAC,CACrD,CAAA,EAGIE,GAAiB,MAAO/F,GAAgB,CACxC,GAAA,CACF,MAAM4E,EAAM,MAAMoB,GAAgB,YAAYhG,CAAG,EAC7C,GAAA+E,GAAuBH,CAAG,EAC5B,OAAOA,EAAI,WAENiB,GACS1C,EAAA2C,GAA6BD,CAAK,CAAC,CACrD,CAAA,EAKII,GAA0B,MAAO,GAA4B,CACjEzE,GAAkB,EAAE,KAAK,EACzB,MAAMwC,EAAuBrC,GAAA,YAAAA,EAAkB,KAC5CsC,GAA0BA,EAAI,QAAU,EAAE,OAG7C,GAAID,IACFE,GAAwBF,CAAoB,EAGlCV,EAAA,QAAU,IAAIE,GAAqB,CAC3C,WAAY,CAAE,GAAGC,IAAuB,EACxC,GAAGC,GAAe,EAClB,gBAAiB,CAAE,YAAa,IAAMnB,EAAaoB,GAAS,CAACA,CAAI,CAAE,CAAA,CACpE,EAEGnD,IAAsB,QACxB,GAAKE,EAAa,SAAS,EAAE,KAAK,EAK3B,CACC,MAAAmD,EAAa,CAAC,GAAGnD,CAAY,EACnCmD,EAAWrD,CAAiB,EAAI,GAChCG,EAAoBkD,CAAU,EAC9BZ,GAAoB,EAAI,MATW,CAC7B,MAAAY,EAAa,CAAC,GAAGnD,CAAY,EACxBmD,EAAArD,CAAiB,EAAI,EAAE,MAClCG,EAAoBkD,CAAU,EAC9BZ,GAAoB,EAAK,EAQ/B,EAGIiD,GAAwB,GAAgC,CAC5DhE,EAAeyB,IACN,CACL,GAAGA,EACH,IAAK,EAAE,OAAO,KAAA,EAEjB,CAAA,EAGGwC,GAAqB,GAAgC,CACzDnE,EAAiB2B,IAA6B,CAC5C,GAAGA,EACH,eAAgB,EAAE,OAAO,MAAM,YAAY,EAC3C,CAAC,EAAE,OAAO,IAAI,EAAG,EAAE,OAAO,MAAM,YAAY,CAC5C,EAAA,CAAA,EAGEyC,GAAmB,GAA4B,CAC7C,KAAA,CAAE,MAAAC,CAAM,EAAI,EAAE,OACpBrE,EAAiB2B,IAA6B,CAC5C,GAAGA,EACH,IAAK0C,CACL,EAAA,CAAA,EAGEC,GAAiB,SAAY,CACjC,IAAIC,EAAU,GAEd,GADAA,EAAU,MAAMC,KACZ,CAACD,EACH,OAGE,IAAAE,EAAsB,CAAE,GAAG1E,GACzB,MAAA2E,EAAoBC,GAAmBF,EAAoB,WAAW,EAEtDA,EAAA,CACpB,GAAGA,EACH,YAAaC,CAAA,EAGf9F,GACE,CACE,GAAG6F,EACH,IAAAzG,EACA,wBAAyBoE,GAA2BrC,EAAa,YAAY,CAC/E,EACAvB,CAAA,EAEFa,EAAYjC,EAAU,IAAI,CAAA,EAGtBwH,GAAoB,IAAM,CAC9B9F,GAAWiB,EAAcvB,CAAiB,EAC1CqC,GAAa,EAAI,CAAA,EAGbgE,GAAmB,SAAY,CAEnC,IAAIN,EAAU,GACdA,EAAU,MAAMC,KACXD,IAGLO,GAAQ,EAAK,EACb/D,EAAoB,EAAI,EAAA,EAGpB+D,GAAU,MAAOC,GAAyB,WAC1C,GAAA,CACF,MAAMjI,EAAU,CACd,UAAWiD,EAAa,eACxB,QAAS,GAAA,EAGL6C,EAAM,MAAMjG,GAAW,iBAAiBG,CAAO,IAEjDsG,EAAAR,EAAI,OAAJ,YAAAQ,EAAU,cAAe,KACblD,EAAA,CACZ,IAAK,GACL,UAAW0C,EAAI,KAAK,WAAa,GACjC,UAASU,EAAAV,EAAI,KAAK,SAAT,YAAAU,EAAiB,UAAW,GACrC,SAAU,EAAA,CACX,EAEIyB,IAEHtE,GAAuB,EAAI,GAC3B8C,EAAAjC,EAAU,UAAV,MAAAiC,EAAmB,kBAGrBpC,EAAgB,oBAAoB,EACpCJ,EAAoB,EAAK,SAEpB8C,GACS1C,EAAA2C,GAA6BD,CAAK,CAAC,EACnD9C,EAAoB,EAAK,CAC3B,CAAA,EAGIiE,GAAqB,IAAM,CACjB9E,EAAA,CAAE,IAAK,GAAI,UAAW,GAAI,QAAS,GAAI,SAAU,EAAA,CAAO,EACtEO,GAAuB,EAAK,EAC5BM,EAAoB,EAAK,CAAA,EAGrBkE,GAAW,SAAY,CAE3B,IAAIV,EAAU,GACdA,EAAU,MAAMC,KACXD,IAGUvF,GAAAe,EAAcE,EAAYzB,EAAmBR,CAAG,EAC/DyC,GAAuB,EAAK,EAAA,EAGxByE,GAAc,IAAM,CACxBJ,GAAQ,EAAI,CAAA,EAKRK,GAAY,GAAgC,UAChD7B,EAAAhC,GAAA,YAAAA,EAAW,UAAX,MAAAgC,EAAoB,gBAAeF,EAAA,iBAAG,SAAH,YAAAA,EAAW,KAAI,EAG9CoB,GAAe,SAAY,SAC/B,IAAID,EAAU,GAEd,OADUA,IAAAnB,EAAA9B,GAAA,YAAAA,EAAW,UAAX,YAAA8B,EAAoB,aAAc,GACxCmB,IAGUhE,EAACoB,GAAS,CAACA,CAAI,GAC3B2B,EAAAhC,GAAA,YAAAA,EAAW,UAAX,MAAAgC,EAAoB,eACR/C,EAACoB,GAAS,CAACA,CAAI,EACpB,GACT,EAKIO,GAA0B,MAAOF,GAA2C,OAC5E,GAAAA,GAAwBA,EAAqB,IAAK,CACpD,MAAMY,EAAM,MAAMmB,GAAe/B,EAAqB,GAAG,EAEnDoD,EAAkB,CAAA,EAClBC,EAAsC,CAAA,GAEvCjC,EAAAR,GAAA,YAAAA,EAAA,mBAAA,MAAAQ,EAAkB,QAASkC,GAAyB,WACnDA,EAAgB,aACdlC,EAAAkC,EAAgB,UAAhB,YAAAlC,EAAyB,QAASmC,GAAiB,6BACrDH,EAAS,QAAQ,CACf,GAAGE,EAAgB,QACnB,YAAaA,EAAgB,YAC7B,mBAAoBA,EAAgB,GAAA,CACrC,EAEDF,EAAS,KAAK,CACZ,GAAGE,EAAgB,QACnB,YAAaA,EAAgB,YAC7B,mBAAoBA,EAAgB,GAAA,CACrC,EAGHD,EAAgB,KAAK,CACnB,OAAO/B,EAAAgC,EAAgB,UAAhB,YAAAhC,EAAyB,KAChC,OAAOC,EAAA+B,EAAgB,UAAhB,YAAA/B,EAAyB,IAAA,CACjC,EACH,GAKAvD,EADE5B,GAAWH,EACI0D,IAA6B,CAC5C,GAAGA,EACH,YAAaK,EAAqB,IAAMA,EAAqB,IAAM,GACnE,aAAcA,EAAqB,MACnC,aAAcA,EAAqB,MACnC,eAAgB/D,GAAgB,GAChC,IAAKE,GAA4B,GACjC,2BAA4BkH,CAC5B,GAEe1D,IAA6B,CAC5C,GAAGA,EACH,YAAaK,EAAqB,IAAMA,EAAqB,IAAM,GACnE,aAAcA,EAAqB,MACnC,aAAcA,EAAqB,MACnC,eAAgB/D,GAAgB,GAChC,IAAKE,GAA4B,GACjC,YAAa,CAAC,EACd,2BAA4BkH,CAC5B,EAXA,EAcgBjF,GAAA,CAAC,GAAGgF,CAAQ,CAAC,EACN9E,GAAA,CAAC,GAAG+E,CAAe,CAAC,EAC/C3F,EAA6B,EAAK,EACpC,EAGI8F,GAAsB,CAACC,EAA6BnD,IAAiB,CACzDtC,EAAA,CACd,GAAGD,EACH,YAAa,CACX,GAAGA,EAAa,YAChB,CACE,CAAC,GAAGuC,EAAQ,MAAM,EAAGmD,EAAa,IAClC,GAAGA,EACH,KAAMnD,EAAQ,KACd,KAAMA,EAAQ,KACd,YAAaA,EAAQ,WACvB,CACF,CAAA,CACD,EAEGA,EAAQ,aACV3B,EAAQgB,IACC,CAAE,GAAGA,EAAM,UAAW,EAAK,EACnC,CACH,EAII+D,GAAwBC,GAAwB,CAEpD,IAAIC,EAAiB,GACrB,MAAMC,EAAqB9F,EAAa,YAAY,OAAQkC,IACtDA,EAAI,OAAS0D,IACfC,EAAiB3D,EAAI,aAEhBA,EAAI,OAAS0D,EACrB,EAUGC,GAAkB,EAPM,IACnBC,EAAmB,KAAM5D,GACvBA,EAAI,WACZ,MAKDtB,EAAQgB,IACC,CACL,GAAGA,EACH,UAAW,EAAA,EAEd,EAGa3B,EAAA,CACd,GAAGD,EACH,YAAa8F,CAAA,CACd,CAAA,EAGGzD,GAA8B0D,GAAyB,CAC3D,UAAWC,KAAgBlG,EACrB,GAAAkG,EAAa,OAASD,EACxB,OAAOC,EAAa,UAExB,EAGIpB,GAAsBS,GAAoB,CAC9C,MAAMY,EAA2C,CAAA,EAC3CC,MAAqB,IAElBb,EAAA,QAAS9C,GAAY,CACb2D,EAAA,IAAI3D,EAAQ,KAAMA,CAAO,CAAA,CACzC,EAED,QAAS4D,EAAM,EAAGA,EAAM/F,EAAiB,OAAQ+F,IAC/CF,EAAe,KAAKC,EAAe,IAAI9F,EAAiB+F,CAAG,EAAE,IAAI,CAAC,EAE7D,OAAAF,CAAA,EAMHG,GAAsB,IAExBC,EAAA,IAAC,OAAI,UAAU,6BACb,eAACC,GAAiB,CAAA,SAAQ,EAAC,CAAA,CAC7B,CAAA,EAKEC,GAAmB,IAErBF,EAAAA,IAAC,OACC,CAAA,SAAAA,EAAA,IAAC,MAAI,CAAA,UAAU,uBAAuB,IAAKG,GAAY,IAAI,QAAS,CAAA,CACtE,CAAA,EAKEC,GAAyB,IAAiB,CAC9C,MAAMC,EAAW,CACf,MAAO,MACP,MAAO3D,GAAkB,qBAAA,EAErB4D,EAAiB,CAAE,MAAO,GAAI,MAAO,EAAG,EAExCC,EAA2BT,GAAgB,eAC3C,GAAAnG,EAAa,YAAY,OAAS,EAAG,CACvC,IAAIqF,EAAW,CAAC,GAAGrF,EAAa,WAAW,EAC3CqF,EAAWT,GAAmBS,CAAQ,EAEtC,MAAMwB,EAA0B,CAC9B,GAAGxB,EAASc,CAAG,EACf,aAAa9C,EAAAgC,EAASc,CAAG,IAAZ,YAAA9C,EAAe,KAC5B,SAAUqD,EAAS,MACnB,KAAM1G,EAAa,YAAA,EAgBd,MAb0B,CAC/B,IAAK,GACL,cAAeZ,IAAiB,GAChC,KAAM,GACN,SAAUyH,GAAA,YAAAA,EAAoB,SAC9B,SAAUA,GAAA,YAAAA,EAAoB,YAC9B,SAAU,GACV,SAAUA,GAAA,YAAAA,EAAoB,SAC9B,KAAMA,GAAA,YAAAA,EAAoB,KAC1B,YAAaA,GAAA,YAAAA,EAAoB,KACjC,IAAKA,GAAA,YAAAA,EAAoB,GAAA,UAIlBvI,IAAeA,GAAA,YAAAA,EAAa,QAAS,EAAG,CACjD,MAAMsH,GAAcrC,EAAAnD,EAAiB,KAClCmF,GAAoBA,EAAgB,OAASjH,EAAY6H,CAAG,EAAE,WAC9D,IAFiB,YAAA5C,EAEjB,KAEG0C,EAA2C,CAAA,EAC3Ca,MAAiB,IAEXxI,EAAA,QAASiE,GAAY,CACpBuE,EAAA,IAAIvE,EAAQ,YAAaA,CAAO,CAAA,CAC5C,EAED,QAAS4D,EAAM,EAAGA,EAAM/F,EAAiB,OAAQ+F,IAC/CF,EAAe,KAAKa,EAAW,IAAI1G,EAAiB+F,CAAG,EAAE,IAAI,CAAC,EAgBzD,MAb0B,CAC/B,IAAK,GACL,cAAe/G,IAAiB,GAChC,KAAM,GACN,WAAUoE,EAAAyC,GAAA,YAAAA,EAAiBE,KAAjB,YAAA3C,EAAuB,WAAY,GAC7C,UAAUC,EAAAwC,GAAA,YAAAA,EAAiBE,KAAjB,YAAA1C,EAAuB,SACjC,SAAU,GACV,SAAUiD,EAAS,MACnB,KAAM1G,EAAa,aACnB,YAAa4F,GAAe,GAC5B,MAAKlC,EAAAuC,GAAA,YAAAA,EAAiBE,KAAjB,YAAAzC,EAAuB,MAAO,EAAA,EAIvC,EAGF,OACG2C,EAAAA,IAAA,MAAA,CAAI,UAAW,4BACd,SAACA,EAAA,IAAA,MAAA,CAAI,UAAU,qDACZ,SAAiBjG,EAAA,IAAI,CAACmC,EAASwE,IAE5BV,EAAA,IAACC,GAAA,CAEC,KAAMjI,EAAUf,GAAmB,KAAO,OAC1C,uBAAwBsJ,EAAwBG,CAAK,EACrD,cAAeA,EACf,OAASrB,GAAgC,CACvCD,GAAoBC,EAAcnD,CAAO,CAC3C,EACA,qBAAsBjE,EAAcA,EAAYyI,CAAK,EAAI,CAAC,EAC1D,YAAaxE,EAAQ,KACrB,2BAA4BoD,GAC5B,4BAA6B,CAACe,GAAYC,CAAc,EACxD,wBAAyB,CACvB,CACE,IAAK3G,EAAa,YAClB,MAAOA,EAAa,aACpB,MAAOA,EAAa,YACtB,CACF,EACA,2BAA4BM,IAA2B,CAACqG,CAAc,EACtE,oBAAmB,GACnB,gBAAe,GACf,mBAAkB,GAClB,aAAc,CAAC,CAAC1I,GAAOoB,IAAahC,EAAU,MAAQ6C,EAAW,SACjE,SAAUb,IAAahC,EAAU,IAAA,EAvB5B,iBAAiB2C,EAAa,gBAAgBuC,EAAQ,MAAA,CA0BhE,EACH,CACF,CAAA,CAAA,EAIEyE,GAAuB,IAAiB,OAC5C,MAAMC,EAAwBnH,EAAuB,KAClDoH,GAAcA,EAAK,OAAS1H,CAAA,EAGzB2H,EAA0B,CAACC,EAAiBhE,IAAgC,CAC5E,IAAAiE,EAAkBjE,EAAU,SAAW,YAAc,WACrD,OAAAgE,IAAYE,EAAc,KAC5BD,EAAkBA,EAAkB,OAC7BA,GACED,IAAYE,EAAc,aACnCD,EAAkBA,EAAkB,cAC7BA,IACED,IAAYE,EAAc,UAC/BlE,EAAU,OAASzF,GAAgC,MACrD0J,EAAkBA,EAAkB,QAE/BA,EAEF,EAGT,OACGhB,EAAA,IAAA,MAAA,CACE,UAAuBhD,EAAA4D,GAAA,YAAAA,EAAA,aAAA,YAAA5D,EAAY,IAAKD,GACtCiD,SAAAA,OAAAA,EAAAA,IAAAkB,GAAM,SAAN,CACC,SAACC,EAAA,KAAA,MAAA,CAAI,UAAU,gBACZ,SAAA,CAAUpE,EAAA,OAASzF,GAAgC,UAClD0I,EAAA,IAACoB,EAAA,CACC,UAAU,iCACV,MAAOrE,EAAU,MACjB,UAAWA,EAAU,QAAA,CACvB,EAGDA,EAAU,YAAc1F,GAAsB,MAC/C0F,EAAU,YAAc1F,GAAsB,OAC3C2I,EAAA,IAAAqB,WAAA,CACE,WAAU,OAAS/J,GAAgC,UACjD0I,EAAAA,IAAA,MAAA,CAAI,UAAU,OACb,SAAAA,EAAA,IAACsB,GAAA,CACC,KAAM,GAAGvE,EAAU,OACnB,UAAU,gGACV,OAAOpD,GAAA,YAAAA,EAAe,GAAGoD,EAAU,UAAW,GAC9C,SAAUgB,GACV,OAAQgB,GACR,YAAY/B,EAAA9B,GAAA,YAAAA,EAAW,UAAX,YAAA8B,EAAoB,QAC9B,GAAGD,EAAU,OACbpD,EAAa,GAAGoD,EAAU,MAAM,EAChC+D,EAAwBF,EAAsB,KAAM7D,CAAS,GAE/D,UAAS,GACT,SACE/D,IAAahC,EAAU,MAAQ4D,GAAoBf,EAAW,QAAA,CAAA,CAGpE,CAAA,CAEJ,CAAA,EACE,KAEHkD,EAAU,YAAc1F,GAAsB,MAC5C2I,EAAAA,IAAA,MAAA,CAAI,UAAU,OACb,SAAAA,EAAA,IAACuB,GAAA,CACC,KAAK,MACL,MAAO,IAAI,KAAK5H,EAAa,GAAG,EAChC,YAAa,KACb,QAAS6H,GAAiB,UAC1B,SAAUxD,GACV,OAAQe,GACR,YAAY,cACZ,YAAY7B,EAAAhC,GAAA,YAAAA,EAAW,UAAX,YAAAgC,EAAoB,QAC9B,MACAvD,GAAA,YAAAA,EAAc,IACdmH,EAAwBF,EAAsB,KAAM7D,CAAS,GAE/D,UAAS,GACT,SAAU/D,IAAahC,EAAU,MAAQ4D,CAAA,CAAA,EAE7C,CAAA,EAEJ,CAxDmB,EAAA,iBAAiBmC,EAAU,MAyDhD,GAEJ,CAAA,CAAA,EAIE0E,GAAyB,IAAiB,OAE5C,OAAAzB,EAAAA,IAAC0B,GAAU,CAAA,UAAW,sBAAuB,QAAStH,EAAqB,SAAU,GACnF,SAAA+G,OAAC,MAAI,CAAA,UAAU,gBACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAnB,EAAAA,IAAC,OAAI,UAAU,0CACb,eAACoB,EAAK,CAAA,MAAO,YAAa,CAC5B,CAAA,EACApB,EAAAA,IAAC,OAAI,UAAU,UACb,eAACoB,EAAK,CAAA,MAAOvH,EAAW,OAAA,CAAS,CACnC,CAAA,CAAA,EACF,EAEAmG,EAAAA,IAAC,MAAI,CAAA,UAAU,wBACb,SAAAA,EAAA,IAACsB,GAAA,CACC,KAAK,MACL,MAAO,MACP,OAAQvC,GACR,YAAY/B,EAAA9B,GAAA,YAAAA,EAAW,UAAX,YAAA8B,EAAoB,QAAQ,MAAOnD,GAAA,YAAAA,EAAY,IAAK,aAChE,SAAUiE,EAAA,CAAA,EAEd,EAEAkC,EAAAA,IAAC,MAAI,CAAA,UAAU,2BACb,SAAAA,EAAA,IAAC2B,GAAA,CACC,MAAM,aACN,UAAU,8EACV,QAAS7C,EAAA,CAAA,EAEb,EAEAqC,EAAAA,KAAC,MAAI,CAAA,UAAU,qFACb,SAAA,CAAAnB,EAAA,IAAC4B,GAAU,CAAA,WAAYC,GAAY,eAAgB,QAASjD,GAAoB,QAC/EgD,GAAU,CAAA,WAAYC,GAAY,OAAQ,kBAAmBhD,GAAU,CAAA,EAC1E,CAAA,CACF,CAAA,CACF,CAAA,CAAA,EAIEiD,GAAoB,IAEtBX,EAAA,KAAC,MAAA,CACC,UAAW,UACTnI,IAAahC,EAAU,KACnB,2BACA,+EAIN,SAAA,CAAAgJ,EAAAA,IAAC,OAAI,UAAU,gCACb,SAACmB,EAAA,KAAA,MAAA,CAAI,UAAU,aACZ,SAAA,CAAAnI,IAAahC,EAAU,KACtBgJ,EAAA,IAAC+B,EAAA,CACC,UAAW,cACX,WAAYC,EAAa,KACzB,QAAS,IAAM/I,EAAYjC,EAAU,IAAI,EACzC,eAAgB,CACd,SAAU,MACV,UAAW,2DACX,UAAW,QACX,UAAW,KACb,EACA,SAAUU,IAASV,EAAU,MAAQ4D,CAAA,CAGvC,EAAAuG,EAAA,KAAC,MAAI,CAAA,UAAU,aACb,SAAA,CAAAnB,EAAA,IAAC+B,EAAA,CACC,UAAW,cACX,WAAYC,EAAa,OACzB,QAAS,IAAM/I,EAAYjC,EAAU,IAAI,EACzC,eAAgB,CACd,SAAU,OACV,UAAW,2DACX,UAAW,QACX,UAAW,KACb,CAAA,CACF,EACAgJ,EAAA,IAAC+B,EAAA,CACC,UAAW,cACX,WAAYC,EAAa,KACzB,kBAAmB9D,GACnB,eAAgB,CACd,SAAU,MACV,UAAW,2DACX,UAAW,QACX,UAAW,KACb,EACA,SAAU,CAAC7E,EAAA,CACb,CAAA,EACF,EAGF2G,EAAA,IAACiC,GAAA,CACC,MAAOzG,GACP,QAAQ,YACR,SAAU7D,GAA0C,EAAA,CACtD,CAAA,CAAA,CACF,CACF,CAAA,EAEAwJ,EAAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAnB,EAAA,IAACkC,GAAA,CACC,YAAa,uBACb,UAAS,GACT,aAAY,GACZ,YAAY,QACZ,YAAY,QACZ,QAAS3I,EACT,MAAOJ,EACP,SAAU0E,GACV,SAAU,CAAC,CAACjG,GAAOoB,IAAahC,EAAU,MAAQ6C,EAAW,QAAA,CAC/D,EACCe,SACE,MAAI,CAAA,UAAU,0CACb,SAACoF,EAAA,IAAAoB,EAAA,CAAK,MAAO,2BAAA,CAA6B,CAC5C,CAAA,CAAA,EAEJ,EAGAD,EAAAA,KAAC,MAAI,CAAA,UAAU,sBACb,SAAA,CAACnB,EAAAA,IAAA,MAAA,CAAI,UAAU,+CACb,SAAAA,EAAAA,IAACoB,GAAK,MAAOjJ,IAAe,2CAA4C,CAC1E,CAAA,EAECgB,GAAkB,CAACyB,EAAmBwF,GAAA,EAA2BL,GAAoB,CAAA,EACxF,EAGAC,EAAA,IAAC,MAAA,CACC,UAAW,gCACThH,IAAahC,EAAU,KACnB,4BACA,qCAGN,SAAAmK,EAAA,KAAC,MAAI,CAAA,UAAU,sBACZ,SAAA,CAAA7G,GAAI,iBACH0F,MAAC,MAAI,CAAA,UAAU,WACb,SAAAmB,EAAA,KAACY,EAAA,CACC,UAAW,cACX,WAAYC,EAAa,IACzB,QAASxD,GACT,eAAgB,CACd,SAAU,MACV,UAAW,2DACX,UAAW,QACX,UAAW,KACb,EACA,SAAUxF,IAAahC,EAAU,MAAQ,CAACsD,GAAI,WAAaT,EAAW,SAErE,SAAA,CAAAW,IAAa0F,GAAiB,EAC/BF,EAAA,IAACoB,EAAA,CACC,UAAW,8CACT9G,GAAI,WAAatB,IAAahC,EAAU,KACpC,+CACA,MACF6C,EAAW,SAAW,8CAAgD,KAC1E,MAAO,oBAAA,CACT,CAAA,CAAA,CAAA,EAEJ,EAGFsH,EAAAA,KAAC,MAAI,CAAA,UAAU,8CACZ,SAAA,CAAuB1H,EAAA,QAAUN,EAAiBwH,GAAyB,EAAA,KAE3EhH,EAAa,eAAiBsH,EAAc,aAAe,CAACpH,EAAW,UACtEsH,EAAAA,KAAC,MAAI,CAAA,UAAU,yBACb,SAAA,CAAAA,EAAA,KAAC,SAAA,CACC,UAAW,oGACTnI,IAAahC,EAAU,MAAQ,CAACqC,GAC5B,2FACA,2EAEN,QAASoF,GAER,SAAA,CAAA/D,IAAoBwF,GAAiB,EACrCF,EAAA,IAAAoB,EAAA,CAAK,UAAU,iBAAiB,MAAO,kBAAmB,CAAA,CAAA,CAC7D,EACApB,EAAAA,IAAC,OAAK,CAAA,UAAU,yCACb,SAAAnH,EAAyB,gBACvBmH,EAAAA,IAAAoB,EAAA,CAAK,MAAO,0BAAA,CAA4B,CAE7C,CAAA,CAAA,EACF,EAGDzH,EAAa,eAAiBsH,EAAc,aAAepH,EAAW,UACrEsH,EAAA,KAAC,MAAI,CAAA,UAAU,kCACb,SAAA,CAAAnB,EAAA,IAAC,MAAI,CAAA,IAAK3J,GAAc,IAAI,WAAW,EACvC2J,EAAAA,IAACoB,EAAK,CAAA,MAAO,UAAY,CAAA,CAAA,EAC3B,CAAA,EAEJ,CAAA,EACF,CAAA,CACF,CAAA,CAAA,CAAA,EAKN,aACGF,GAAM,SAAN,CACC,SAACC,OAAA,MAAA,CAAI,UAAU,gBACZ,SAAA,CAAA1J,QACE,MAAI,CAAA,UAAU,iDACb,SAAAuI,MAACmC,IAAe,OAAO,QAAQ,MAAM,OAAO,aAAa,MAAM,UAAU,MAAO,CAAA,EAClF,EAEAL,GAAkB,EAInB1H,GAAuBqH,GAAuB,EAE/CzB,EAAA,IAACoC,GAAA,CACC,OAAQ,IAAM,CACZnH,GAAsB,EAAK,EAC3BF,EAAgB,EAAE,CACpB,EACA,QAASC,GACT,aAAAF,EAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ"}