{"version":3,"file":"OrganizationReportingBranchCreateViewEdit-37c82629.js","sources":["../../src/views/masterData/OrganizationLevel/OrganizationReportingBranch/OrganizationReportingCreateViewEdit/OrganizationReportingBranchCreateViewEdit.tsx"],"sourcesContent":["/**\n * Author : Waseem\n * Created on : 21 June, 2023\n * updated :sachin pandey\n **/\n\n/*\n  -------------------------------------------------------\n   Imports:\n  -------------------------------------------------------\n*/\nimport LoadingIcon from \"assets/img/common/Loading.svg\";\nimport ButtonBox from \"components/ButtonBox\";\nimport InputBox from \"components/InputBox\";\nimport InputTextArea from \"components/InputTextArea\";\nimport RadioButton from \"components/RadioButton/RadioButton\";\nimport Text from \"components/Text\";\nimport { RouteProps, withRouter } from \"hoc/withRouter\";\nimport { useEffect, useRef, useState, ChangeEvent } from \"react\";\nimport {\n  ACTIVE_TYPE,\n  BRANCH_TYPE,\n  BUTTON_TYPE,\n  DROPDOWN_STYLE_TYPE,\n  ENTITY,\n  INPUT_STYLE_TYPE,\n  OPERATION_TYPE,\n  PAGE_MODE,\n  STATIC_MASTER_TYPE_TOAST_TEXT,\n  STATUS_LIST,\n  TOAST_STYLE_TYPE,\n} from \"utils/Constant\";\nimport queryString from \"query-string\";\nimport SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport ToastCustom from \"components/Toast/Toast\";\nimport { linkOrganizationBranch } from \"routes\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  convertDateToISO,\n  formatDate,\n  getStandardValidator,\n  messageReplace,\n  parseStandardAPIErrorMessage,\n  stringifyObject,\n  validateGetAPIResponse,\n} from \"utils/CommonUtil\";\nimport DatePicker from \"components/DatePicker/DatePicker\";\nimport EditableTable from \"components/EditableTable/EditableTable\";\nimport { Column } from \"primereact/column\";\nimport DemoService from \"services/DemoService\";\nimport AutoComplete from \"components/AutoComplete/AutoComplete\";\nimport PincodeService from \"services/masterdata/Location/Pincode\";\nimport ErrorDialog from \"components/ErrorDialog/ErrorDialog\";\nimport { ToastPositionType } from \"primereact/toast\";\nimport OrgStructureBranchService from \"services/masterdata/OrgStruct/Branch/Branch\";\nimport OrgStructureLevelService from \"services/masterdata/OrgStruct/Level/Level\";\nimport CityService from \"services/masterdata/Location/City\";\n\nimport AclGuard from \"components/AclGuard/AclGuard\";\nimport EditableTableV2 from \"components/EditableTableV2/EditableTableV2\";\nimport IncomeSchemeService from \"services/masterdata/ProductConfig/IncomeSchemeService\";\nimport StaticMasterDataService from \"services/masterdata/StaticMaster/StaticMasterDataService\";\nimport OrgStructureLevelTypeService from \"services/masterdata/OrgStruct/LevelType/OrgStructureLevelTypeService\";\nimport PartnerMasterDataService from \"services/masterdata/Partners/PartnerMasterDataService\";\nimport ProductConfigProductService from \"services/masterdata/ProductConfig/ProductConfigProductService\";\nimport SystemDate from \"services/masterdata/SystemDate\";\nimport StaticMasterTypeService from \"services/masterdata/StaticMaster/StaticMasterTypeService\";\nimport { getParsedDate } from \"utils/Util\";\nimport MenuBox from \"components/MenuBox/MenuBox\";\n\n/*\n  -------------------------------------------------------\n  PROPS:\n  -------------------------------------------------------\n*/\n\nconst OrganizationReportingBranchCreateViewEdit = (props: RouteProps) => {\n  /*\n    -------------------------------------------------------\n      States\n    -------------------------------------------------------\n  */\n\n  const [pageObj, setPageObj] = useState<any>({\n    name: \"\",\n    systemCode: \"\",\n    // spoke ??\n    branch: \"\", //radios\n    parentBranch: \"\",\n    org_reporting_level: \"\",\n    dateOfBranchOpening: \"\",\n    dateOfBranchClosing: \"\",\n    address: \"\",\n    pincode: \"\",\n    city: \"\",\n    state: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    description: \"\",\n    reasons: \"\",\n    isActive: \"\",\n  });\n  const [initObj, setInitObj] = useState<any>({\n    name: \"\",\n    systemCode: \"\",\n    // spoke ??\n    branch: \"\", //radios\n    parentBranch: \"\",\n    org_reporting_level: \"\",\n    dateOfBranchOpening: \"\",\n    dateOfBranchClosing: \"\",\n    address: \"\",\n    pincode: \"\",\n    city: \"\",\n    state: \"\",\n    latitude: \"\",\n    longitude: \"\",\n    description: \"\",\n    reasons: \"\",\n    isActive: \"\",\n  });\n  const initialTableObj = {\n    applicableFrom: \"\",\n    applicableTo: \"\",\n    productType: {\n      uid: \"\",\n    },\n  };\n\n  const [isNameDuplicated, setIsNameDuplicated] = useState(false);\n  const [isCodeDuplicated, setIsCodeDuplicated] = useState(false);\n  const [uid, setUid] = useState<any>(\"\");\n  const [pageMode, setPageMode] = useState(PAGE_MODE.CREATE);\n  const [isNameDuplicate, setNameDuplicate] = useState(false);\n  const [position, setPosition] = useState<ToastPositionType | undefined>(\"bottom-right\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [toastMessageVariant, setToastMessageVariant] = useState(TOAST_STYLE_TYPE.PRIMARY);\n  const [navigateBack, setNavigateBack] = useState(false);\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n  const [suggestionsTemplate, setSuggestionsTemplate] = useState<\n    {\n      name?: string | undefined;\n      code?: string | undefined;\n    }[]\n  >([]);\n  const [renderFirst, setRenderFirst] = useState(true);\n  const toastMessageRef = useRef(null);\n  const productMappingRef = useRef<any>(null);\n  const isFirstRender = useRef(true);\n  const [, forceUpdate] = useState<undefined | boolean>(undefined);\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n\n  /*\n      -------------------------------------------------------\n        Hooks: useEffect\n      -------------------------------------------------------\n    */\n\n  useEffect(() => {\n    const parsed: {\n      mode?: string;\n      uid?: string;\n    } = queryString.parse(props.location.search);\n    if (parsed?.mode && parsed?.mode !== undefined) {\n      setPageMode(parsed.mode);\n    }\n    setUid(parsed.uid);\n\n    getProductList();\n    getCurrentDate();\n    if (renderFirst && parsed.mode == \"CREATE\") {\n      productMappingRef?.current?.addRow(initialTableObj);\n      setRenderFirst(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      // @ts-ignore :i ill do it later\n      toastMessageRef?.current?.showFunction();\n    }\n  }, [toastMessage, toastMessageVariant, triggerToast]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n  useEffect(() => {\n    const parsed: {\n      mode?: string;\n      uid?: string;\n    } = queryString.parse(props.location.search);\n    if (parsed?.mode && parsed?.mode !== undefined) {\n      setPageMode(parsed.mode);\n    }\n    if (parsed?.uid && parsed?.uid !== undefined) {\n      setUid(parsed.uid);\n\n      OrgStructureBranchService.findById(parsed.uid)\n        .then((res: any) => {\n          if (validateGetAPIResponse(res)) {\n            console.log(res);\n            if (Object.keys(res.data).length > 0 || res.data.id) {\n              setPageObj({\n                name: res?.data.name,\n                systemCode: res?.data.code,\n                address: res?.data.address,\n                dateOfBranchOpening: res?.data.dateOfOpening,\n                dateOfBranchClosing: res?.data.dateOfClosing ?? \"\",\n                parentBranch: res?.data?.parent, // radio buttons\n                org_reporting_level:\n                  res?.data?.parent?.orgReportingLevel ?? res.data?.orgReportingLevel,\n                pincode: res?.data?.pinCode,\n                city: res?.data?.city,\n                state: res?.data?.city.state,\n                isActive: res?.data?.isActive ? \"ACTIVE\" : \"IN_ACTIVE\",\n                latitude: parseInt(res?.data.latitude),\n                longitude: parseInt(res?.data.longitude),\n                reasons: res?.data.reason,\n                description: res?.data.description,\n              });\n              setSelectedBranch(res.data?.type);\n\n              setInitObj({\n                name: res.data.name,\n                code: res.data.systemCode,\n                address: res.data.address,\n                dateOfOpening: res.data.dateOfBranchOpening,\n                dateOfClosing: res.data.dateOfBranchClosing,\n                type: res.data.branch, // radio buttons\n                orgReportingLevel: {\n                  uid: res.data?.orgReportingLevel?.uid,\n                },\n                parent: {\n                  uid: res.data?.parentBranch?.uid,\n                },\n\n                pinCode: {\n                  uid: res.data?.pincode?.uid,\n                },\n                city: {\n                  uid: res.data?.city?.uid,\n                },\n                latitude: parseInt(res.data.latitude),\n                longitude: parseInt(res.data.longitude),\n                reason: res.data.reason,\n                description: res.data.description,\n              });\n            }\n          }\n        })\n        .catch((err) => {\n          // IF API fails to load, show the error message\n        });\n    }\n  }, []);\n\n  /* \n    -----------------------------------------------------------------------------------------------------------------------\n    Validators:\n    -----------------------------------------------------------------------------------------------------------------------\n  */\n\n  const validate = (e: any) => {\n    simpleValidator?.current?.showMessageFor(e?.target?.name);\n  };\n\n  const validateForm = async () => {\n    let isValid = false;\n\n    isValid = simpleValidator?.current?.allValid() && !isNameDuplicated && !isCodeDuplicated;\n\n    if (isValid) {\n      return isValid;\n    } else {\n      setPosition(\"top-right\");\n      setToastMessageVariant(TOAST_STYLE_TYPE.QUATERNARY);\n      setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.ERROR);\n      setTriggerToast(!triggerToast);\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n\n  const onAddLoanRow = () => {\n    // @ts-ignore  :i ill do it later\n    productMappingRef?.current?.addRow(initialTableObj);\n  };\n  const [ProductList, setProductList] = useState<any>([]);\n  const getProductList = () => {\n    StaticMasterDataService.getAll(0, 200, \"isActive=true&staticMasterType.code=PRODUCT_NAME\")\n      .then((res: any) => {\n        setProductList([...res.data.results] ?? []);\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n  const renderProduct = (rowData: any) => {\n    return (\n      <SimpleDropDown\n        name={`productType-${rowData.uid}`}\n        value={rowData.productType?.uid}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.productType.uid = e.target.value;\n          productMappingRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `productType-${rowData.uid}`,\n          rowData.productType?.uid,\n          \"mandatory\"\n        )}\n        onBlur={validate}\n        options={ProductList}\n        optionLabel=\"name\"\n        optionValue=\"uid\"\n      />\n    );\n  };\n\n  const [currentDate, setCurrentDate] = useState<any>(\"\");\n  const getCurrentDate = async () => {\n    try {\n      const res = await SystemDate.getCurrentDate();\n      setCurrentDate(formatDate(res.data?.date));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const renderFromDateTime = (rowData: any) => {\n    // const applicableFromDate = new Date(rowData.applicableFrom);\n    // const parsedYear = applicableFromDate.getFullYear();\n    // const parsedMonth = applicableFromDate.getMonth();\n    // const parsedDay = applicableFromDate.getDate();\n    // const parsedDate = new Date(parsedYear, parsedMonth, parsedDay);\n    const applicableFromDate = new Date(rowData.applicableFrom);\n    const parsedYear = applicableFromDate.getFullYear();\n    const parsedMonth = applicableFromDate.getMonth();\n    const parsedDay = applicableFromDate.getDate();\n    const parsedDate = new Date(parsedYear, parsedMonth, parsedDay);\n    return (\n      // <DatePicker\n      //   disabled={pageMode === PAGE_MODE.VIEW}\n      //   name={`applicableFrom${rowData.uid}`}\n      //   value={rowData.applicableFrom != \"\" ? parsedDate : \"\"}\n      //   variant={INPUT_STYLE_TYPE.SECONDARY}\n      //   onChange={(e) => {\n      //     const rowDataObj = { ...rowData };\n      //     rowDataObj.applicableFrom = e.target.value;\n      //     productMappingRef.current?.reportDataChange(rowDataObj);\n      //   }}\n      //   onBlur={validate}\n      //   validation={\n      //     new Date(rowData.expiryDate) < new Date(currentDate)\n      //       ? \"Applicable from Date should not be less than System Date\"\n      //       : simpleValidator?.current?.message(\n      //           `applicableFrom${rowData.uid}`,\n      //           rowData.applicableFrom,\n      //           \"mandatory\"\n      //         )\n      //   }\n      //   placeholder=\"DD-MM-YYYY\"\n      // />\n      <DatePicker\n        disabled={!rowData.temp && pageMode === PAGE_MODE.EDIT}\n        name={`applicableFrom${rowData.uid}`}\n        value={rowData.applicableFrom != \"\" ? parsedDate : \"\"}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.applicableFrom = e.target.value;\n          productMappingRef.current?.reportDataChange(rowDataObj);\n        }}\n        onBlur={validate}\n        validation={\n          new Date(rowData.expiryDate) < new Date(currentDate)\n            ? \"Applicable from Date should not be less than System Date\"\n            : simpleValidator?.current?.message(\n                `applicableFrom${rowData.uid}`,\n                rowData.applicableFrom,\n                \"mandatory\"\n              )\n        }\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n\n  const renderToDateTime = (rowData: any) => {\n    // const applicableToDate = new Date(rowData.applicableTo);\n    // const parsedYear = applicableToDate.getFullYear();\n    // const parsedMonth = applicableToDate.getMonth();\n    // const parsedDay = applicableToDate.getDate();\n    // const parsedDate = new Date(parsedYear, parsedMonth, parsedDay);\n    return (\n      // <DatePicker\n      //   disabled={pageMode === PAGE_MODE.VIEW}\n      //   name={`applicableTo${rowData.uid}`}\n      //   value={rowData.applicableTo != \"\" ? parsedDate : \"\"}\n      //   variant={INPUT_STYLE_TYPE.SECONDARY}\n      //   onChange={(e) => {\n      //     const rowDataObj = { ...rowData };\n      //     rowDataObj.applicableTo = e.target.value;\n      //     productMappingRef.current?.reportDataChange(rowDataObj);\n      //   }}\n      //   onBlur={validate}\n      //   validation={\n      //     new Date(rowData.applicableTo) < new Date(currentDate)\n      //       ? \"Applicable from Date should not be less than System Date\"\n      //       : simpleValidator?.current?.message(\n      //           `applicableTo${rowData.uid}`,\n      //           rowData.applicableTo,\n      //           \"mandatory\"\n      //         )\n      //   }\n      //   placeholder=\"DD-MM-YYYY\"\n      // />\n      <DatePicker\n        // disabled={\n        //   !rowData.temp && pageMode === PAGE_MODE.EDIT\n        //     ? rowData.applicableTo\n        //       ? true\n        //       : false\n        //     : false\n        // }\n        name={`applicableTo${rowData.uid}`}\n        value={rowData.applicableTo != null ? getParsedDate(rowData.applicableTo) : \"\"}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.applicableTo = e.target.value ?? \"\";\n          productMappingRef.current?.reportDataChange(rowDataObj);\n        }}\n        minDate={getParsedDate(rowData.applicableFrom)}\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n\n  /*\n      -------------------------------------------------------\n        Handlers: Event handler for onChange, onBlur etc\n      -------------------------------------------------------\n    */\n\n  const handleInputChange = (event: any) => {\n    const { name, value } = event.target;\n\n    setPageObj((prevPageObj: any) => ({\n      ...prevPageObj,\n      [name]: value,\n    }));\n  };\n\n  const handleFilterChange = (event: ChangeEvent<HTMLInputElement> | any) => {\n    const { name, value } = event.target;\n\n    if (typeof value === \"object\") {\n      setPageObj((prevFilterObj: any) => ({\n        ...prevFilterObj,\n        [name]: {\n          name: `${value?.name}`,\n          uid: value.uid,\n        },\n      }));\n    } else\n      setPageObj((prevFilterObj: any) => ({\n        ...prevFilterObj,\n        [name]: value,\n      }));\n    if (name === \"parentBranch\") {\n      setPageObj((prevPageObj: any) => ({\n        ...prevPageObj,\n        org_reporting_level: value.orgReportingLevel,\n      }));\n    }\n    if (name === \"city\") {\n      setPageObj((prevPageObj: any) => ({\n        ...prevPageObj,\n        state: value.state,\n      }));\n    }\n  };\n  const handleFilterChangeForPinCode = (event: ChangeEvent<HTMLInputElement> | any) => {\n    const { name, value } = event.target;\n\n    if (typeof value === \"object\") {\n      setPageObj((prevPageObj: any) => {\n        const updatedPageObj = {\n          ...prevPageObj,\n          pincode: { pinCode: value?.pinCode, uid: value?.uid },\n        };\n        return { ...updatedPageObj };\n      });\n    } else {\n      setPageObj((prevPageObj: any) => {\n        const updatedPageObj = {\n          ...prevPageObj,\n          [name]: { pinCode: value, uid: \"\" },\n        };\n        return { ...updatedPageObj };\n      });\n    }\n  };\n\n  const [isChecked, setIsChecked] = useState(false);\n\n  useEffect(() => {\n    console.log(\"this is to check \");\n  }, [isChecked]);\n  const [selectedBranch, setSelectedBranch] = useState(null);\n\n  const handleRadioChange = (selectedValue: any) => {\n    setSelectedBranch(selectedValue); // Update selected branch\n    if (selectedValue !== \"SPOKE\") {\n      simpleValidator.current = new SimpleReactValidator({\n        validators: { ...getStandardValidator() },\n        ...messageReplace(),\n        autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n      });\n      simpleValidator?.current?.hideMessageFor(\"parentBranch\");\n      setPageObj({\n        ...pageObj,\n        parentBranch: \"\",\n        branch: selectedValue,\n      });\n    } else {\n      setPageObj({\n        ...pageObj,\n        branch: selectedValue,\n      });\n    }\n\n    // Update the pageObj with the selected branch value\n  };\n  /* \n      -------------------------------------------------------\n        ButtonClick Functions:\n      -------------------------------------------------------\n    */\n  const prepareToApprove = () => {\n    const payloadForApprove: any = {\n      name: pageObj?.name,\n      uid: uid,\n      code: pageObj?.systemCode,\n      address: pageObj?.address,\n      dateOfOpening: pageObj?.dateOfBranchOpening,\n      dateOfClosing: pageObj?.dateOfBranchClosing ?? \"\",\n      type: pageObj?.branch, // radio buttons\n      orgReportingLevel: {\n        uid: pageObj?.org_reporting_level?.uid,\n      },\n      parent: {\n        uid: pageObj?.parentBranch?.uid ?? \"\",\n      },\n\n      pinCode: {\n        uid: pageObj?.pincode?.uid,\n      },\n      city: {\n        uid: pageObj?.city?.uid,\n      },\n      latitude: parseInt(pageObj.latitude),\n      longitude: parseInt(pageObj.longitude),\n      reason: pageObj.reasons,\n      description: pageObj.description,\n      productMappings: [],\n    };\n    if (payloadForApprove.dateOfClosing === \"\") {\n      payloadForApprove.dateOfClosing = null;\n    }\n    if (payloadForApprove?.parent?.uid === \"\") {\n      payloadForApprove.parent = null;\n    }\n\n    const addedRecords = [\n      ...(productMappingRef.current?.getAddedRecords() ?? []),\n      ...(productMappingRef.current?.getDeletedRecords() ?? []),\n      ...(productMappingRef.current?.getUpdatedRecords() ?? []),\n    ];\n    addedRecords.forEach((detail) => {\n      if (detail.applicableTo === \"\") {\n        detail.applicableTo = null;\n      }\n    });\n\n    payloadForApprove.productMappings = addedRecords;\n\n    let enrichForSave;\n    const finalJsonObject = payloadForApprove;\n    const initialJsonObject = initObj;\n\n    if (pageMode === PAGE_MODE.CREATE) {\n      enrichForSave = {\n        name: pageObj.name,\n\n        operationType: OPERATION_TYPE.CREATE,\n        entity: ENTITY.BRANCH,\n        initialStateJson: \"\",\n        finalStateJson: stringifyObject(finalJsonObject),\n        reqPayload: stringifyObject(finalJsonObject),\n        reasonForChange: pageObj.reasons,\n      };\n    } else {\n      enrichForSave = {\n        name: pageObj.name,\n        uid: uid,\n        operationType: OPERATION_TYPE.UPDATE,\n        entity: ENTITY.BRANCH,\n        initialStateJson: stringifyObject(initialJsonObject),\n        finalStateJson: stringifyObject(finalJsonObject),\n        reqPayload: stringifyObject(finalJsonObject),\n        reasonForChange: pageObj.reasons,\n      };\n    }\n    return enrichForSave;\n  };\n\n  const prepareForSave = () => {\n    const ObjectForSave: any = {\n      name: pageObj?.name,\n      code: pageObj?.systemCode,\n      address: pageObj?.address,\n      dateOfOpening: pageObj?.dateOfBranchOpening ?? \"\",\n      dateOfClosing: pageObj?.dateOfBranchClosing ?? \"\",\n      type: pageObj?.branch, // radio buttons\n      orgReportingLevel: {\n        uid: pageObj?.org_reporting_level?.uid,\n      },\n\n      parent: {\n        uid: pageObj?.parentBranch?.uid ?? \"\",\n      },\n\n      pinCode: {\n        uid: pageObj?.pincode?.uid,\n      },\n      city: {\n        uid: pageObj?.city?.uid,\n      },\n      latitude: parseInt(pageObj?.latitude),\n      longitude: parseInt(pageObj?.longitude),\n      reason: pageObj?.reasons,\n      description: pageObj?.description,\n      productMappings: [],\n    };\n    const addedRecords = [\n      ...(productMappingRef?.current?.getAddedRecords() ?? []),\n      ...(productMappingRef?.current?.getDeletedRecords() ?? []),\n      ...(productMappingRef?.current?.getUpdatedRecords() ?? []),\n    ];\n\n    ObjectForSave.productMappings = addedRecords;\n    if (pageObj?.parentBranch?.uid === undefined) {\n      ObjectForSave.parent = null;\n    }\n    if (pageObj.dateOfBranchClosing === \"\") {\n      ObjectForSave.dateOfClosing = null;\n    }\n\n    return ObjectForSave;\n  };\n  const prepareForUpdate = () => {\n    const ObjectForUpdate: any = {\n      uid: uid,\n      name: pageObj.name,\n      code: pageObj.systemCode,\n      address: pageObj.address,\n      dateOfOpening: parseDateForDatePicker(pageObj.dateOfBranchOpening),\n      dateOfClosing: parseDateForDatePicker(pageObj.dateOfBranchClosing),\n      type: pageObj.branch, // radio buttons\n      orgReportingLevel: {\n        uid: pageObj?.org_reporting_level?.uid,\n      },\n      parent: {\n        uid: pageObj?.parentBranch?.uid ?? \"\",\n      },\n\n      pinCode: {\n        uid: pageObj?.pincode?.uid,\n      },\n      city: {\n        uid: pageObj?.city?.uid,\n      },\n      latitude: parseInt(pageObj.latitude),\n      longitude: parseInt(pageObj.longitude),\n      reason: pageObj.reasons,\n      description: pageObj.description,\n      productMappings: [],\n    };\n    const addedRecords = [\n      ...(productMappingRef.current?.getAddedRecords() ?? []),\n      ...(productMappingRef.current?.getDeletedRecords() ?? []),\n      ...(productMappingRef.current?.getUpdatedRecords() ?? []),\n    ];\n\n    ObjectForUpdate.productMappings = addedRecords;\n    if (pageObj?.parentBranch?.uid == undefined) {\n      ObjectForUpdate.parent = null;\n    }\n    if (pageObj.dateOfBranchClosing == \"\") {\n      ObjectForUpdate.dateOfClosing = null;\n    }\n    return ObjectForUpdate;\n  };\n  const onSaveClick = async () => {\n    setErrorMessage(\"\");\n    let isValid = false;\n\n    isValid = await validateForm();\n\n    if (!isValid) {\n      setPosition(\"top-right\");\n      setToastMessageVariant(TOAST_STYLE_TYPE.QUATERNARY);\n      setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.ERROR);\n      setTriggerToast(!triggerToast);\n      return;\n    }\n\n    if (simpleValidator?.current?.allValid()) {\n      const enrichedObjForSave = prepareForSave();\n      const enrichedObjForUpdate = prepareForUpdate();\n\n      if (pageMode === PAGE_MODE.CREATE) {\n        return OrgStructureBranchService.create(enrichedObjForSave)\n          .then((res) => {\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setToastMessage(\"Saved Successfully\");\n            setTriggerToast(!triggerToast);\n            setNavigateBack(true);\n          })\n          .catch((err) => {\n            setErrorMessage(parseStandardAPIErrorMessage(err));\n            setNavigateBack(false);\n          });\n      } else {\n        return OrgStructureBranchService.update(uid, enrichedObjForUpdate)\n          .then((res) => {\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setToastMessage(\"Saved Successfully\");\n            setTriggerToast(!triggerToast);\n            setNavigateBack(true);\n          })\n          .catch((err) => {\n            setErrorMessage(parseStandardAPIErrorMessage(err));\n            setNavigateBack(false);\n          });\n      }\n    } else {\n      setPosition(\"top-right\");\n      setToastMessageVariant(TOAST_STYLE_TYPE.QUATERNARY);\n      setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.ERROR);\n      setTriggerToast(!triggerToast);\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n    }\n  };\n\n  const onCancelClick = () => {\n    props.navigate(linkOrganizationBranch);\n  };\n\n  const onApproveClick = async() => {\n    setErrorMessage(\"\");\n    let isValid = false;\n    isValid = await validateForm();\n    if (!isValid) {\n      return;\n    }\n    const enrichedObj = prepareToApprove();\n    return StaticMasterTypeService.approve(enrichedObj)\n      .then((res) => {\n        setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n        setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SENT_FOR_APPROVAL);\n        setTriggerToast(!triggerToast);\n        setNavigateBack(true);\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n\n  const onBackClick = () => {\n    props.navigate(linkOrganizationBranch);\n  };\n\n  const onEditClick = () => {\n    setPageMode(PAGE_MODE.EDIT);\n  };\n\n  /* \n      -------------------------------------------------------\n        Helper Functions:\n      -------------------------------------------------------\n    */\n  const getPageTitle = () => {\n    switch (pageMode) {\n      case PAGE_MODE.CREATE:\n        return \"heading.organizationLevelBranch.create\";\n      case PAGE_MODE.VIEW:\n        return \"heading.organizationLevelBranch.view\";\n      case PAGE_MODE.EDIT:\n        return \"heading.organizationLevelBranch.edit\";\n      default:\n        return \"heading.organizationLevelBranch.create\";\n    }\n  };\n  const onNameValidation = (event: any) => {\n    let search = `name=${event.target.value.toUpperCase()}&`;\n    if (pageMode === PAGE_MODE.EDIT) {\n      search = `name=${event.target.value.toUpperCase()}&uid:nq=${uid}`;\n    }\n    OrgStructureBranchService.getAll(0, 10, `${search}`)\n      .then((res) => {\n        if (res.status === 200) {\n          res.data.results.length > 0 ? setIsNameDuplicated(true) : setIsNameDuplicated(false);\n        }\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n\n  const onCodeValidation = (event: any) => {\n    let search = `code=${event.target.value.toUpperCase()}&`;\n    if (pageMode === PAGE_MODE.EDIT) {\n      search = `code=${event.target.value}&uid:nq=${uid}`;\n    }\n\n    OrgStructureBranchService.getAll(0, 10, `${search}`)\n      .then((res) => {\n        if (res.status === 200) {\n          res.data.results.length > 0 ? setIsCodeDuplicated(true) : setIsCodeDuplicated(false);\n        }\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n\n  const searchAutoCompleteForParentBranch = async (event: any) => {\n    let suggestionsTemplate: any = [];\n    setIsLoading(true);\n    await OrgStructureBranchService.getAll(0, 10, `name:lk=${event.query}&`).then((res) => {\n      if (validateGetAPIResponse(res)) {\n        suggestionsTemplate = [...res.data.results];\n        setIsLoading(false);\n      }\n    });\n    setSuggestionsTemplate(suggestionsTemplate);\n  };\n  const searchAutoCompleteForCity = async (event: any) => {\n    let suggestionsTemplate: any = [];\n    setIsLoading(true);\n    await CityService.getAll(0, 10, `name:lk=${event.query}&`).then((res) => {\n      if (validateGetAPIResponse(res)) {\n        suggestionsTemplate = [...res.data.results];\n        setIsLoading(false);\n      }\n    });\n    setSuggestionsTemplate(suggestionsTemplate);\n  };\n  const searchAutoCompleteForState = async (event: any) => {\n    let suggestionsTemplate: any = [];\n    setIsLoading(true);\n    await CityService.getAll(0, 10, `name:lk=${event.query}&`).then((res) => {\n      if (validateGetAPIResponse(res)) {\n        suggestionsTemplate = [...res.data.results];\n        setIsLoading(false);\n      }\n    });\n    setSuggestionsTemplate(suggestionsTemplate);\n  };\n  const searchAutoCompleteForPinCode = async (event: any) => {\n    let suggestionsTemplate: any = [];\n    setIsLoading(true);\n    await PincodeService.getAll(0, 10, `&pinCode:lk=${event.query}`).then((res) => {\n      if (validateGetAPIResponse(res)) {\n        suggestionsTemplate = [...res.data.results];\n        setIsLoading(false);\n      }\n    });\n    setSuggestionsTemplate(suggestionsTemplate);\n  };\n\n  const searchAutoCompleteForOrganisationReportingLevel = async (event: any) => {\n    let suggestionsTemplate: any = [];\n    setIsLoading(true);\n    await OrgStructureLevelService.getAll(0, 10, `&isActive=true&name:lk=${event.query}`).then(\n      (res) => {\n        if (validateGetAPIResponse(res)) {\n          suggestionsTemplate = [...res.data.results];\n          setIsLoading(false);\n        }\n      }\n    );\n    setSuggestionsTemplate(suggestionsTemplate);\n  };\n\n  const itemTemplateForParentBranch = (item: any) => {\n    if (item.name === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"text-primary-labelColor mt-2\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.name} />\n      </div>\n    );\n  };\n  const itemTemplateForCity = (item: any) => {\n    if (item.name === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"text-primary-labelColor mt-2\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.name} />\n      </div>\n    );\n  };\n  const itemTemplateForState = (item: any) => {\n    if (item.name === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"text-primary-labelColor mt-2\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.name} />\n      </div>\n    );\n  };\n  const itemTemplateForPincode = (item: any) => {\n    if (item.pinCode === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"text-primary-labelColor mt-2\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.pinCode} />\n        {/* <Text  className=\"text-primary-labelColor\" label={item?.city?.name ?? \"\"} /> */}\n      </div>\n    );\n  };\n  const itemTemplateForOrgReportingLevel = (item: any) => {\n    if (item.name === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"text-primary-labelColor mt-2\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.name} />\n      </div>\n    );\n  };\n  const parseDateForDatePicker = (Data: any) => {\n    const applicableFromDate = new Date(Data);\n    const parsedYear = applicableFromDate.getFullYear();\n    const parsedMonth = applicableFromDate.getMonth();\n    const parsedDay = applicableFromDate.getDate();\n    return new Date(parsedYear, parsedMonth, parsedDay);\n  };\n  const [kebabOptionMenu, setKebabOption] = useState([\n    {\n      items: [\n        {\n          label: \"Delete\",\n          className: \"\",\n        },\n      ],\n    },\n  ]);\n  const deleteTableRowRef = useRef<any>(null);\n  const resetValidator = () => {\n    simpleValidator.current = new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    });\n    simpleValidator?.current?.hideMessages();\n  };\n  const onToggleKebabMenu = (rowData: any, ref: any, e: any) => {\n    setKebabOption((prevState) => [\n      {\n        ...prevState[0], // Retain the other properties of the first object\n        items: [\n          {\n            ...prevState[0].items[0], // Retain the other properties of the first item\n            command: () => {\n              ref?.current?.deleteRow(rowData);\n              resetValidator();\n            }, // Add the new key-value pair\n          },\n        ],\n      },\n    ]);\n    deleteTableRowRef?.current?.toggle(e);\n  };\n\n  const renderActions = (rowData: any, props: any) => {\n    return (\n      <div className=\"w-20 flex items-center justify-center ml-2\">\n        <ButtonBox\n          buttonType={BUTTON_TYPE.MENU}\n          onClick={(e: any) => onToggleKebabMenu(rowData, productMappingRef, e)}\n          className=\"!rounded-none bg-transparent !hover:bg-primary-gray-300\"\n        />\n      </div>\n    );\n  };\n\n  /* \n    -------------------------------------------------------\n      Sectional Render Functions: For Sub components / section wise renders\n    -------------------------------------------------------\n  */\n\n  const {\n    name,\n    systemCode,\n    branch,\n    parentBranch,\n    org_reporting_level,\n    dateOfBranchOpening,\n    dateOfBranchClosing,\n    address,\n    pincode,\n    city,\n    state,\n    description,\n    reasons,\n    isActive,\n    latitude,\n    longitude,\n  } = pageObj;\n  return (\n    <AclGuard>\n      <div className=\"flex flex-col gap-3 mt-1\">\n        <div className=\"flex w-full justify-between  items-center\">\n          <div className=\" h-7.5\">\n            <Text\n              label={getPageTitle()}\n              className=\"text-primary-ptext-1000 text-h2 font-Roboto font-bold flex\"\n            />\n          </div>\n          <div className=\"flex mr-5\">\n            {pageMode === PAGE_MODE.CREATE || pageMode === PAGE_MODE.EDIT ? (\n              <>\n                <div className=\"flex\">\n                  <div className=\"mr-5\">\n                    <ButtonBox\n                      className=\"reset-red\"\n                      buttonType={BUTTON_TYPE.CANCEL_OUTLINE}\n                      onClick={onCancelClick}\n                    />\n                  </div>\n                  <div className=\"mr-10\">\n                    <ButtonBox\n                      buttonType={BUTTON_TYPE.SAVE_OUTLINE}\n                      onClickWithLoader={onSaveClick}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <ButtonBox\n                    className=\"approve-primary\"\n                    buttonType={BUTTON_TYPE.SEND_FOR_APPROVAL}\n                    onClickWithLoader={onApproveClick}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"mr-5\">\n                  <ButtonBox buttonType={BUTTON_TYPE.BACK_OUTLINE} onClick={onBackClick} />\n                </div>\n                <div className=\"\">\n                  <ButtonBox\n                    buttonType={BUTTON_TYPE.EDIT_OUTLINE}\n                    className=\"blue-primary\"\n                    onClick={onEditClick}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        <AclGuard override={{ read: [PAGE_MODE.VIEW, PAGE_MODE.REVIEW].includes(pageMode) }}>\n          <div className=\"grid  grid-cols-1 sm:grid-cols-4  gap-3\">\n            <div className=\"col-span-1\">\n              <InputBox\n                label=\"input.organizationLevelBranch.Name\"\n                name=\"name\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                onChange={handleInputChange}\n                value={name}\n                onBlur={(e) => {\n                  onNameValidation(e);\n                  validate(e);\n                }}\n                validation={\n                  isNameDuplicated\n                    ? \"Duplicate Entry Found\"\n                    : simpleValidator?.current?.message(\"name\", name, \"mandatory\")\n                }\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <InputBox\n                label=\"input.organizationLevelBranch.systemCode\"\n                name=\"systemCode\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                onChange={handleInputChange}\n                value={systemCode}\n                onBlur={(e) => {\n                  onCodeValidation(e);\n                  validate(e);\n                }}\n                validation={\n                  isCodeDuplicated\n                    ? \"Duplicate Entry Found\"\n                    : simpleValidator?.current?.message(\n                        \"systemCode\",\n                        systemCode,\n                        \"onlyAlphaNumUnderscoreUpperScore|mandatory\"\n                      )\n                }\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div></div>\n            <div></div>\n            {/* <div className={pageMode !== PAGE_MODE.CREATE ? \"hidden\" : \"\"}></div> */}\n            <div className=\"col-span-1\">\n              <RadioButton\n                label=\"input.organizationLevelBranch.spoke\"\n                name=\"branch\"\n                checked={selectedBranch === BRANCH_TYPE.SPOKE}\n                onChange={() => handleRadioChange(BRANCH_TYPE.SPOKE)}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <RadioButton\n                label=\"input.organizationLevelBranch.branch\"\n                name=\"branch\"\n                checked={selectedBranch === BRANCH_TYPE.BRANCH}\n                onChange={() => handleRadioChange(BRANCH_TYPE.BRANCH)}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <RadioButton\n                label=\"input.organizationLevelBranch.ro\"\n                name=\"branch\"\n                checked={selectedBranch === BRANCH_TYPE.RO}\n                onChange={() => handleRadioChange(BRANCH_TYPE.RO)}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <RadioButton\n                label=\"input.organizationLevelBranch.ho\"\n                name=\"branch\"\n                checked={selectedBranch === BRANCH_TYPE.HO}\n                onChange={() => handleRadioChange(BRANCH_TYPE.HO)}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <AutoComplete\n                label=\"input.organizationLevelBranch.parentBranch\"\n                name=\"parentBranch\"\n                field=\"name\"\n                value={parentBranch}\n                variant={INPUT_STYLE_TYPE.PRIMARY}\n                suggestions={suggestionsTemplate}\n                completeMethod={searchAutoCompleteForParentBranch}\n                onChange={handleFilterChange}\n                itemTemplate={itemTemplateForParentBranch}\n                onBlur={validate}\n                validation={\n                  pageObj.branch === BRANCH_TYPE.SPOKE\n                    ? simpleValidator?.current?.message(\"parentBranch\", parentBranch, \"mandatory\")\n                    : false\n                }\n                disabled={pageMode === PAGE_MODE.VIEW || pageObj.branch !== BRANCH_TYPE.SPOKE}\n                loader={isLoading}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <AutoComplete\n                label=\"input.organizationLevelBranch.org_reporting_level\"\n                name=\"org_reporting_level\"\n                field=\"name\"\n                value={org_reporting_level}\n                variant={INPUT_STYLE_TYPE.PRIMARY}\n                suggestions={suggestionsTemplate}\n                completeMethod={searchAutoCompleteForOrganisationReportingLevel}\n                onChange={handleFilterChange}\n                itemTemplate={itemTemplateForOrgReportingLevel}\n                onBlur={validate}\n                validation={simpleValidator?.current?.message(\n                  \"org_reporting_level\",\n                  org_reporting_level,\n                  \"mandatory\"\n                )}\n                disabled={pageMode === PAGE_MODE.VIEW}\n                loader={isLoading}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <DatePicker\n                label=\"input.organizationLevelBranch.date_of_branch_opening\"\n                name=\"dateOfBranchOpening\"\n                placeholder=\"DD-MMM-YYYY\"\n                onChange={handleInputChange}\n                value={parseDateForDatePicker(dateOfBranchOpening) ?? \"\"}\n                validation={simpleValidator?.current?.message(\n                  \"dateOfBranchOpening\",\n                  dateOfBranchOpening,\n                  \"mandatory\"\n                )}\n                onBlur={validate}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <DatePicker\n                label=\"input.organizationLevelBranch.date_of_branch_closing\"\n                name=\"dateOfBranchClosing\"\n                placeholder=\"DD-MMM-YYYY\"\n                onChange={handleInputChange}\n                value={parseDateForDatePicker(dateOfBranchClosing) ?? \"\"}\n              />\n            </div>\n            <div className=\"col-span-1 sm:col-span-2\">\n              <InputTextArea\n                label=\"input.organizationLevelBranch.address\"\n                name=\"address\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                maxCount={200}\n                onChange={handleInputChange}\n                value={address}\n                onBlur={validate}\n                validation={simpleValidator?.current?.message(\"address\", address, \"mandatory\")}\n              />\n            </div>\n            <div></div>\n            <div></div>\n            <div className=\"col-span-1\">\n              <AutoComplete\n                label=\"input.organizationLevelBranch.pincode\"\n                name=\"pincode\"\n                field=\"pinCode\"\n                value={pincode}\n                variant={INPUT_STYLE_TYPE.PRIMARY}\n                suggestions={suggestionsTemplate}\n                completeMethod={searchAutoCompleteForPinCode}\n                onChange={handleFilterChangeForPinCode}\n                itemTemplate={itemTemplateForPincode}\n                onBlur={validate}\n                validation={simpleValidator?.current?.message(\"pincode\", pincode, \"mandatory\")}\n                disabled={pageMode === PAGE_MODE.VIEW}\n                loader={isLoading}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <AutoComplete\n                label=\"input.organizationLevelBranch.city\"\n                name=\"city\"\n                field=\"name\"\n                value={city}\n                variant={INPUT_STYLE_TYPE.PRIMARY}\n                suggestions={suggestionsTemplate}\n                completeMethod={searchAutoCompleteForCity}\n                onChange={handleFilterChange}\n                itemTemplate={itemTemplateForCity}\n                onBlur={validate}\n                validation={simpleValidator?.current?.message(\"city\", city, \"mandatory\")}\n                disabled={pageMode === PAGE_MODE.VIEW}\n                loader={isLoading}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <AutoComplete\n                label=\"input.organizationLevelBranch.state\"\n                name=\"state\"\n                field=\"name\"\n                value={state}\n                variant={INPUT_STYLE_TYPE.PRIMARY}\n                suggestions={suggestionsTemplate}\n                completeMethod={searchAutoCompleteForState}\n                onChange={handleFilterChange}\n                itemTemplate={itemTemplateForState}\n                // onBlur={validate}\n                // validation={simpleValidator?.current?.message(\"state\", state, \"mandatory\")}\n                disabled\n                loader={isLoading}\n              />\n            </div>\n            <div></div>\n            <div className=\"col-span-1\">\n              <InputBox\n                label=\"input.organizationLevelBranch.latitude\"\n                name=\"latitude\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                onChange={handleInputChange}\n                value={latitude}\n                validation={simpleValidator?.current?.message(\"latitude\", latitude, \"mandatory\")}\n              />\n            </div>\n            <div className=\"col-span-1\">\n              <InputBox\n                label=\"input.organizationLevelBranch.longitude\"\n                name=\"longitude\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                onChange={handleInputChange}\n                value={longitude}\n                validation={simpleValidator?.current?.message(\"longitude\", longitude, \"mandatory\")}\n              />\n            </div>\n            <div></div>\n            <div className=\"col-span-1 sm:col-span-2\">\n              <InputTextArea\n                label=\"input.organizationLevelBranch.description\"\n                name=\"description\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                maxCount={200}\n                onChange={handleInputChange}\n                value={description}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            {pageMode !== PAGE_MODE.VIEW && (\n              <div className=\"col-span-1 sm:col-span-2\">\n                <InputTextArea\n                  label=\"input.organizationLevelBranch.reasons\"\n                  name=\"reasons\"\n                  variant={INPUT_STYLE_TYPE.SECONDARY}\n                  maxCount={200}\n                  onChange={handleInputChange}\n                  value={reasons}\n                  validation={simpleValidator?.current?.message(\"reasons\", reasons, \"mandatory\")}\n                  disabled={pageMode === PAGE_MODE.VIEW}\n                />\n              </div>\n            )}\n          </div>\n\n          <div>\n            <div className=\"mt-3 flex w-full justify-between\">\n              <Text label={\"label.organizationLevelBranch.productMapping\"} className=\"bold\" />\n              <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddLoanRow} />\n            </div>\n            <EditableTableV2\n              standardDataFormatPromise={OrgStructureBranchService.getDataForTableByUid}\n              uniqueKey=\"uid\"\n              className=\"border border-secondary-concrete px-0 overflow-x-auto mt-4 rounded-lg read-only-table !min-h-111 w-full\"\n              ref={productMappingRef}\n              search={`&branch.uid=${uid}`}\n              mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n            >\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n                header=\"Product Type*\"\n                body={renderProduct}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n                header=\"Applicable From*\"\n                body={renderFromDateTime}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n                header=\"Applicable To\"\n                body={renderToDateTime}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n                header={\"Actions\"}\n                body={renderActions}\n              />\n            </EditableTableV2>\n          </div>\n        </AclGuard>\n      </div>\n      <div className=\"\">\n        <ToastCustom\n          position={position}\n          ref={toastMessageRef}\n          toastText={toastMessage}\n          variant={toastMessageVariant}\n          onRemove={() => {\n            if (navigateBack) {\n              props.navigate(linkOrganizationBranch);\n            }\n          }}\n        />\n        <MenuBox\n          className=\"w-20 bg-white  font-Roboto text-xs text-primary-pText-1300 pt-2 rounded-lg mt-0.5 flex justify-center align-center shadow-autoCompletePanel\"\n          model={kebabOptionMenu}\n          ref={deleteTableRowRef}\n        />\n        <ErrorDialog\n          onHide={() => setShowDialogAPIError(false)}\n          visible={showDialogAPIError}\n          errorMessage={errorMessage}\n        />\n      </div>\n    </AclGuard>\n  );\n};\n\nexport default withRouter(OrganizationReportingBranchCreateViewEdit);\n"],"names":["OrganizationReportingBranchCreateViewEdit","props","pageObj","setPageObj","useState","initObj","setInitObj","initialTableObj","isNameDuplicated","setIsNameDuplicated","isCodeDuplicated","setIsCodeDuplicated","uid","setUid","pageMode","setPageMode","PAGE_MODE","position","setPosition","isLoading","setIsLoading","toastMessage","setToastMessage","toastMessageVariant","setToastMessageVariant","TOAST_STYLE_TYPE","navigateBack","setNavigateBack","triggerToast","setTriggerToast","errorMessage","setErrorMessage","showDialogAPIError","setShowDialogAPIError","suggestionsTemplate","setSuggestionsTemplate","renderFirst","setRenderFirst","toastMessageRef","useRef","productMappingRef","forceUpdate","simpleValidator","SimpleReactValidator","getStandardValidator","messageReplace","prev","useEffect","parsed","queryString","getProductList","getCurrentDate","_a","OrgStructureBranchService","res","validateGetAPIResponse","_c","_b","_d","_e","_f","_g","_h","setSelectedBranch","_i","_k","_j","_m","_l","_o","_n","_q","_p","err","validate","validateForm","isValid","STATIC_MASTER_TYPE_TOAST_TEXT","onAddLoanRow","ProductList","setProductList","StaticMasterDataService","renderProduct","rowData","jsx","SimpleDropDown","INPUT_STYLE_TYPE","e","rowDataObj","currentDate","setCurrentDate","SystemDate","formatDate","error","renderFromDateTime","applicableFromDate","parsedYear","parsedMonth","parsedDay","parsedDate","DatePicker","renderToDateTime","getParsedDate","handleInputChange","event","name","value","prevPageObj","handleFilterChange","prevFilterObj","handleFilterChangeForPinCode","isChecked","setIsChecked","selectedBranch","handleRadioChange","selectedValue","prepareToApprove","payloadForApprove","addedRecords","detail","enrichForSave","finalJsonObject","initialJsonObject","OPERATION_TYPE","ENTITY","stringifyObject","prepareForSave","ObjectForSave","prepareForUpdate","ObjectForUpdate","parseDateForDatePicker","onSaveClick","enrichedObjForSave","enrichedObjForUpdate","parseStandardAPIErrorMessage","onCancelClick","linkOrganizationBranch","onApproveClick","enrichedObj","StaticMasterTypeService","onBackClick","onEditClick","getPageTitle","onNameValidation","search","onCodeValidation","searchAutoCompleteForParentBranch","searchAutoCompleteForCity","CityService","searchAutoCompleteForState","searchAutoCompleteForPinCode","PincodeService","searchAutoCompleteForOrganisationReportingLevel","OrgStructureLevelService","itemTemplateForParentBranch","item","jsxs","LoadingIcon","Text","itemTemplateForCity","itemTemplateForState","itemTemplateForPincode","itemTemplateForOrgReportingLevel","Data","kebabOptionMenu","setKebabOption","deleteTableRowRef","resetValidator","onToggleKebabMenu","ref","prevState","renderActions","ButtonBox","BUTTON_TYPE","systemCode","branch","parentBranch","org_reporting_level","dateOfBranchOpening","dateOfBranchClosing","address","pincode","city","state","description","reasons","isActive","latitude","longitude","AclGuard","Fragment","InputBox","RadioButton","BRANCH_TYPE","AutoComplete","InputTextArea","EditableTableV2","Column","ToastCustom","MenuBox","ErrorDialog","OrganizationReportingBranchCreateViewEdit$1","withRouter"],"mappings":"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"}