{"version":3,"file":"PageAddressDedupe-61078beb.js","sources":["../../src/views/transaction/PageDDE/Dedupe/PageAddressDedupe/PageAddressDedupe.tsx"],"sourcesContent":["import EditableTableV2, { Column } from \"components/EditableTableV2\";\nimport ErrorDialog from \"components/ErrorDialog\";\nimport Loader from \"components/Loader\";\nimport ReadOnlyTable from \"components/ReadOnlyTable\";\nimport RichTextEditor from \"components/RichTextEditor\";\nimport SaveComponent from \"components/Save/SaveComponent\";\nimport Section from \"components/Section\";\nimport SimpleDropDown from \"components/SimpleDropDown\";\nimport SimpleTab from \"components/SimpleTab\";\nimport SkeletonCustom from \"components/Skeleton\";\nimport Text from \"components/Text\";\nimport TextButton from \"components/TextButton\";\nimport ToastCustom from \"components/Toast\";\nimport { useTextConverter } from \"hook/CustomHooks\";\nimport { DropdownChangeParams } from \"primereact/dropdown\";\nimport { ToastPositionType } from \"primereact/toast\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport DedupeService from \"services/transaction/DedupeService\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  formatDateWithTime,\n  getStandardValidator,\n  messageReplace,\n  parseStandardAPIErrorMessage,\n  validateGetAPIResponse,\n  validatePostAPIResponse,\n  validatePutAPIResponse,\n} from \"utils/CommonUtil\";\nimport {\n  ADDRESS_TYPE_VALUES,\n  CURRENT_STAGE_STATUS,\n  DEDUPE_CHECK,\n  PAGE_MODE,\n  STATIC_MASTER_TYPE_TOAST_TEXT,\n  TOAST_STYLE_TYPE,\n} from \"utils/Constant\";\n\ninterface IAddressDedupeTabs {\n  tabName: string;\n  key: string;\n}\ninterface IAddressInfo {\n  uid: string;\n  lanId: string;\n  stage: string;\n  applicantUid: string;\n  applicantFirstname: string;\n  applicantMiddlename: string;\n  applicantLastname: string;\n  applicantType: string;\n  addressType: string;\n  propertyType: string;\n  address: string;\n  city: string;\n  pincode: string;\n  state: string;\n  latitude: string | number;\n  longitude: string | number;\n}\ninterface IPageData {\n  loanUid: string;\n  stageUid: string;\n  addressSearch: {\n    addressSearchPageMode: string;\n    addressInLoan: IAddressInfo[];\n  };\n  finalStatus: {\n    uid: string | null;\n    isFinalStatusLoading: boolean;\n    finalStatusPageMode: string;\n    status: string;\n    statusEditorData: string;\n  };\n}\n\nconst initialAddressInfo: IAddressInfo = {\n  uid: \"\",\n  lanId: \"\",\n  stage: \"\",\n  applicantUid: \"\",\n  applicantFirstname: \"\",\n  applicantMiddlename: \"\",\n  applicantLastname: \"\",\n  applicantType: \"\",\n  addressType: \"\",\n  propertyType: \"\",\n  address: \"\",\n  city: \"\",\n  pincode: \"\",\n  state: \"\",\n  latitude: \"\",\n  longitude: \"\",\n};\n\nconst initialPageData = {\n  loanUid: \"\",\n  stageUid: \"\",\n  addressSearch: {\n    addressSearchPageMode: PAGE_MODE.VIEW,\n    addressInLoan: [],\n  },\n  finalStatus: {\n    uid: \"\",\n    isFinalStatusLoading: false,\n    status: \"\",\n    statusEditorData: \"\",\n    finalStatusPageMode: PAGE_MODE.VIEW,\n  },\n};\n\nconst ADDRESS_TYPE_TAB_NAMES = {\n  [`${ADDRESS_TYPE_VALUES.COLLATERAL_PROPERTY}`]: \"Collateral Property\",\n  [`${ADDRESS_TYPE_VALUES.PERMANENT}`]: \"Permanent\",\n  [`${ADDRESS_TYPE_VALUES.RESIDENTIAL}`]: \"Residential\",\n};\n\nconst PREVIOUS_STATUS: { [key: string]: string } = {\n  VALID: \"Valid\",\n  INVALID: \"Invalid\",\n};\n\nconst PageAddressDedupe = () => {\n  // --------------------- states ---------------------- //\n\n  const params: { loanUid?: string; stageUid?: string } = useParams();\n\n  const [isPageLoading, setIsPageLoading] = useState<boolean>(true);\n  const [pageData, setPageData] = useState<IPageData>(initialPageData);\n  const [allLinkedAddressList, setAllLinkedAddressList] = useState<IAddressInfo[]>([]);\n  const [currentAddressInfo, setCurrentAddressInfo] = useState<IAddressInfo>(initialAddressInfo);\n  const [activeIndex, setActiveIndex] = useState<number>(0);\n  const [addressTabsListForDedupe, setAddressTabsListForDedupe] = useState<IAddressDedupeTabs[]>(\n    []\n  );\n\n  // error handling states\n  const [position, setPosition] = useState<ToastPositionType | undefined>(\"bottom-right\"); //NOSONAR\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [toastMessageVariant, setToastMessageVariant] = useState(TOAST_STYLE_TYPE.PRIMARY);\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n\n  // --------------------- ref ---------------------------- //\n  const toastMessageRef = useRef(null);\n  const tabRef = useRef<any>(null);\n  const addressSearchTableRef = useRef<any>(null);\n  const addressSearchMatchTableRef = useRef<any>(null);\n  const statusEditorRef = useRef<any>(null);\n\n  // --------------------- custom hooks ---------------------------- //\n  const textConverter = useTextConverter();\n\n  // --------------------- validator initialization ---------------------- //\n\n  const [, forceUpdate] = useState<boolean>(false); //NOSONAR\n\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev: boolean) => !prev) },\n    })\n  );\n\n  // --------------------- global variables ---------------------- //\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    useEffect: \n    --------------------------------------------------------------------------------------------------\n  */\n\n  useEffect(() => {\n    if (params?.loanUid && params?.stageUid) {\n      setPageData((prev: IPageData) => ({\n        ...prev,\n        loanUid: params.loanUid ?? \"\",\n        stageUid: params.stageUid ?? \"\",\n      }));\n    }\n  }, [params?.stageUid, params?.loanUid]);\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (pageData.loanUid) {\n      getLinkedLoanAddress();\n    }\n  }, [pageData.loanUid]);\n\n  useEffect(() => {\n    if (currentAddressInfo.uid) {\n      getAddressFinalStatus();\n    }\n  }, [currentAddressInfo.uid]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      // @ts-ignore: will be fixed in future\n      toastMessageRef?.current?.showFunction();\n    }\n  }, [toastMessage, toastMessageVariant, triggerToast]);\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    Ref: Exposing essential functions for external control\n    --------------------------------------------------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------------------------------------------------------\n    Service Calls: For Getting Data from service/API\n    -------------------------------------------------------------------------------------------------------\n  */\n\n  const getLinkedLoanAddress = async () => {\n    const search = `loan.uid=${pageData.loanUid}&primaryAddressType=${\n      ADDRESS_TYPE_VALUES.COLLATERAL_PROPERTY\n    }&isActive=${true}`;\n\n    try {\n      const res = await DedupeService.getAddress(search);\n\n      if (validateGetAPIResponse(res)) {\n        const linkedAddressList: IAddressInfo[] = res?.data?.results?.map((record: any) => {\n          return {\n            uid: record?.uid ?? \"\",\n            lanId: record?.loan?.lanId ?? \"\",\n            applicantUid: record?.applicant?.uid ?? \"\",\n            applicantFirstname: record?.applicant?.firstName ?? \"\",\n            applicantMiddlename: record?.applicant?.middleName ?? \"\",\n            applicantLastname: record?.applicant?.lastName ?? \"\",\n            applicantType: record?.applicant?.applicantType ?? \"\",\n            addressType: record?.primaryAddressType ?? \"\",\n            propertyType: record?.propertyType ?? \"\",\n            address: record?.address ?? \"\",\n            city: record?.city?.name ?? \"\",\n            pincode: record?.pincode?.pinCode ?? \"\",\n            state: record?.city?.state?.name ?? \"\",\n            latitude: `${record?.latitude ?? 0}`,\n            longitude: `${record?.longitude ?? 0}`,\n          };\n        });\n\n        const prepareAddressTabsForCurrentLoan = linkedAddressList.map((record) => ({\n          tabName: `${ADDRESS_TYPE_TAB_NAMES[record.addressType] ?? \"\"} - ${\n            record.applicantFirstname\n          }`,\n          key: record.uid,\n        }));\n\n        setPageData((prev: IPageData) => ({\n          ...prev,\n          addressSearch: {\n            ...prev.addressSearch,\n            addressInLoan: linkedAddressList,\n          },\n        }));\n\n        setAddressTabsListForDedupe(prepareAddressTabsForCurrentLoan);\n        setAllLinkedAddressList(linkedAddressList);\n        setCurrentAddressInfo(linkedAddressList[activeIndex]);\n        setIsPageLoading(false);\n      }\n    } catch (err) {\n      console.log(err);\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const getAddressFinalStatus = async () => {\n    const search = `linkedAddressUid=${currentAddressInfo.uid}&linkedLanId=${currentAddressInfo.lanId}&type=Status`;\n\n    setPageData((prev: IPageData) => {\n      return {\n        ...prev,\n        finalStatus: {\n          ...prev.finalStatus,\n          isFinalStatusLoading: true,\n        },\n      };\n    });\n\n    try {\n      const res = await DedupeService.getAddressDedupeStatus(search);\n\n      if (validateGetAPIResponse(res)) {\n        //always one record will come in response in the results array\n        const statusInfo = res.data?.results?.[0];\n        if (statusInfo) {\n          setPageData((prev: IPageData) => {\n            return {\n              ...prev,\n              finalStatus: {\n                ...prev.finalStatus,\n                isFinalStatusLoading: false,\n                uid: statusInfo?.uid ?? \"\",\n                status: statusInfo?.action ?? \"\",\n                statusEditorData: statusInfo?.remark ?? \"\",\n              },\n            };\n          });\n        } else {\n          setPageData((prev: IPageData) => {\n            return {\n              ...prev,\n              finalStatus: {\n                ...prev.finalStatus,\n                uid: null,\n                isFinalStatusLoading: false,\n                status: \"\",\n                statusEditorData: \"\",\n                finalStatusPageMode: PAGE_MODE.VIEW,\n              },\n            };\n          });\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      setPageData((prev: IPageData) => {\n        return {\n          ...prev,\n          finalStatus: {\n            ...prev.finalStatus,\n            isFinalStatusLoading: false,\n          },\n        };\n      });\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  /* \n    --------------------------------------------------------------------------------------------------\n    Validators:\n    --------------------------------------------------------------------------------------------------\n  */\n\n  const validate = (e: any) => {\n    simpleValidator?.current?.showMessageFor(e?.target?.name);\n  };\n\n  const validateForm = () => {\n    let isValid = false;\n\n    isValid = simpleValidator?.current?.allValid();\n    if (isValid) {\n      return isValid;\n    } else {\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n\n  const resetValidator = () => {\n    simpleValidator.current = new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    });\n    simpleValidator?.current?.hideMessages();\n  };\n\n  /*\n    -----------------------------------------------------------------------------------------------\n    Handlers: Event handler for onChange, onBlur etc\n    -----------------------------------------------------------------------------------------------\n  */\n\n  const handleTabChange = (e: any) => {\n    setActiveIndex(e.index);\n    const currentAddressDetails: IAddressInfo[] = allLinkedAddressList.filter(\n      (applicant: IAddressInfo) => applicant.uid === addressTabsListForDedupe[e.index].key\n    );\n    setCurrentAddressInfo(currentAddressDetails[0]);\n  };\n\n  const handleStatusChange = (e: DropdownChangeParams) => {\n    setPageData((prev: IPageData) => ({\n      ...prev,\n      finalStatus: {\n        ...prev.finalStatus,\n        status: e.target.value,\n      },\n    }));\n  };\n\n  /*\n    -----------------------------------------------------------------------------------------------\n    on-Handlers: Event handler for onClick, onToggle etc\n    -----------------------------------------------------------------------------------------------\n  */\n\n  const onSearchForAddressDedupe = async (rowData: IAddressInfo) => {\n    const payload = enrichSearchForAddressDedupe(rowData);\n\n    try {\n      const res = await DedupeService.searchAddressForDedupe(payload);\n      if (validatePostAPIResponse(res)) {\n        addressSearchMatchTableRef.current?.search();\n      }\n    } catch (err) {\n      console.log(err);\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const onSaveAddressSearchMatchResults = async () => {\n    const payload = enrichAddressSearchMatchResults();\n\n    try {\n      const res = await DedupeService.updateDedupeMultiple(payload);\n\n      if (validatePutAPIResponse(res)) {\n        setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n        setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n        setTriggerToast(!triggerToast);\n        setPageData((prev) => ({\n          ...prev,\n          addressSearch: {\n            ...prev.addressSearch,\n            addressSearchPageMode: PAGE_MODE.VIEW,\n          },\n        }));\n        addressSearchMatchTableRef.current?.search();\n        addressSearchMatchTableRef.current?.clearAll();\n      }\n    } catch (err) {\n      console.log(err);\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const onEditAddressSearch = () => {\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        addressSearch: {\n          ...prevState.addressSearch,\n          addressSearchPageMode: PAGE_MODE.EDIT,\n        },\n      };\n    });\n  };\n\n  const onCancelAddressSearch = () => {\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        addressSearch: {\n          ...prevState.addressSearch,\n          addressSearchPageMode: PAGE_MODE.VIEW,\n        },\n      };\n    });\n  };\n\n  const onSaveAddressFinalStatus = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    const payload = enrichAddressFinalStatus();\n\n    try {\n      const res = await DedupeService.updateDedupeFinalStatus(payload);\n\n      if (validatePutAPIResponse(res)) {\n        setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n        setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n        setTriggerToast(!triggerToast);\n        setPageData((prev) => ({\n          ...prev,\n          finalStatus: {\n            ...prev.finalStatus,\n            finalStatusPageMode: PAGE_MODE.VIEW,\n          },\n        }));\n      }\n    } catch (err) {\n      console.log(err);\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const onEditFinalStatus = () => {\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        finalStatus: {\n          ...prevState.finalStatus,\n          finalStatusPageMode: PAGE_MODE.EDIT,\n        },\n      };\n    });\n  };\n\n  const onCancelFinalStatus = () => {\n    getAddressFinalStatus();\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        finalStatus: {\n          ...prevState.finalStatus,\n          finalStatusPageMode: PAGE_MODE.VIEW,\n        },\n      };\n    });\n    resetValidator();\n  };\n\n  /* \n    -------------------------------------------------------------------------------------------------\n    Helper Functions:\n    -------------------------------------------------------------------------------------------------\n  */\n  const init = () => {\n    addressSearchMatchTableRef.current?.search();\n  };\n\n  const enrichSearchForAddressDedupe = (rowData: IAddressInfo) => {\n    const payloadData = {\n      lat: rowData.latitude,\n      long: rowData.longitude,\n      pincode: rowData.pincode,\n      stageUid: pageData.stageUid,\n      addressUid: rowData.uid,\n      lanId: rowData.lanId,\n    };\n\n    return payloadData;\n  };\n\n  const enrichAddressSearchMatchResults = () => {\n    const payloadData = addressSearchMatchTableRef.current\n      ?.getUpdatedRecords()\n      ?.map((updatedRecord: any) => ({\n        uid: updatedRecord.uid,\n        action: updatedRecord.action,\n      }));\n\n    return payloadData;\n  };\n\n  const enrichAddressFinalStatus = () => {\n    const payloadData = {\n      uid: pageData.finalStatus.uid ? pageData.finalStatus.uid : null,\n      isLinkage: false,\n      linkedLanId: currentAddressInfo.lanId,\n      linkedAddressUid: currentAddressInfo.uid,\n      action: pageData.finalStatus.status,\n      remark: statusEditorRef.current?.editor?.getContent(),\n      type: \"Status\",\n    };\n\n    return payloadData;\n  };\n\n  /* \n    ---------------------------------------------------------------------------------------------\n      Sectional Render Functions: For Sub components / section wise renders\n    ---------------------------------------------------------------------------------------------\n  */\n\n  const renderFirstName = (rowData?: any) => {\n    if (rowData?.address) {\n      return <Text className=\"\" label={rowData?.address?.applicant?.firstName ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      return <Text className=\"\" label={rowData?.blackList?.firstName ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.applicantFirstname ?? \"-\"} />;\n    }\n  };\n\n  const renderMiddleName = (rowData?: any) => {\n    if (rowData?.address) {\n      return <Text className=\"\" label={rowData?.address?.applicant?.middleName ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      return <Text className=\"\" label={rowData?.blackList?.firstName ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.applicantMiddlename ?? \"-\"} />;\n    }\n  };\n\n  const renderLastName = (rowData?: any) => {\n    if (rowData?.address) {\n      return <Text className=\"\" label={rowData?.address?.applicant?.lastName ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      return <Text className=\"\" label={rowData?.blackList?.firstName ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.applicantLastname ?? \"-\"} />;\n    }\n  };\n\n  const renderAddressType = (rowData?: any) => {\n    if (rowData?.linkedAddressUid) {\n      return (\n        <Text\n          className=\"\"\n          label={ADDRESS_TYPE_TAB_NAMES[`${rowData?.address?.primaryAddressType}`] ?? \"-\"}\n        />\n      );\n    } else {\n      return <Text className=\"\" label={ADDRESS_TYPE_TAB_NAMES[`${rowData?.addressType}`] ?? \"-\"} />;\n    }\n  };\n\n  const renderAddress = (rowData?: any) => {\n    if (rowData?.linkedAddressUid) {\n      return <Text className=\"\" label={rowData?.address?.address ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      return <Text className=\"\" label={rowData?.blackList?.address ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.address ?? \"-\"} />;\n    }\n  };\n\n  const renderCity = (rowData?: any) => {\n    if (rowData?.linkedAddressUid) {\n      return <Text className=\"\" label={rowData?.address?.city?.name ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      return <Text className=\"\" label={rowData?.blackList?.city ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.city ?? \"-\"} />;\n    }\n  };\n\n  const renderState = (rowData?: any) => {\n    if (rowData?.linkedAddressUid) {\n      return <Text className=\"\" label={rowData?.address?.city?.state?.name ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      return <Text className=\"\" label={rowData?.blackList?.state ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.state ?? \"-\"} />;\n    }\n  };\n\n  const renderPincode = (rowData?: any) => {\n    if (rowData?.linkedAddressUid) {\n      return <Text className=\"\" label={rowData?.address?.pincode?.pinCode ?? \"-\"} />;\n    } else if (rowData?.blackList) {\n      let pincode = rowData?.blackList?.pincode;\n      pincode = pincode?.split(\" \");\n      pincode = pincode?.join(\"\");\n      return <Text className=\"\" label={pincode ?? \"-\"} />;\n    } else {\n      return <Text className=\"\" label={rowData?.pincode ?? \"-\"} />;\n    }\n  };\n\n  const renderAddressSearchAction = (rowData?: any) => {\n    return (\n      <TextButton\n        className={\"text-primary-sapphireBlue-600\"}\n        label={\"text.masterData.types.search\"}\n        onClick={() => onSearchForAddressDedupe(rowData)}\n        disabled={pageData.addressSearch.addressSearchPageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n\n  const renderAddressSearchActionHeader = () => {\n    return (\n      <div className=\"flex justify-center items-center w-full\">\n        <Text label={\"label.dedupe.action\"} className=\"\" />\n      </div>\n    );\n  };\n\n  const renderAddressSearchMatchAction = (rowData?: any) => {\n    return (\n      <SimpleDropDown\n        name={`action`}\n        className=\"!w-32\"\n        options={DEDUPE_CHECK}\n        optionLabel={\"label\"}\n        optionValue={\"value\"}\n        value={rowData.action ?? \"\"}\n        onChange={(e: DropdownChangeParams) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.action = e.target.value;\n          addressSearchMatchTableRef.current?.reportDataChange(rowDataObj);\n        }}\n        disabled={pageData.addressSearch.addressSearchPageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n\n  const renderLoanAppNo = (rowData?: any) => {\n    return <Text className=\"\" label={rowData?.lanId ?? \"-\"} />;\n  };\n\n  const renderAppType = (rowData?: any) => {\n    return <Text className=\"\" label={rowData?.address?.applicant?.applicantType ?? \"-\"} />;\n  };\n\n  const renderMatchingList = (rowData?: any) => {\n    return <Text className=\"\" label={rowData?.matchingList ?? \"-\"} />;\n  };\n\n  const renderFileStatus = (rowData?: any) => {\n    return <Text className=\"\" label={rowData?.address?.loan?.loanStatus ?? \"-\"} />;\n  };\n\n  const renderDateOfSearch = (rowData?: any) => {\n    return <Text className=\"\" label={formatDateWithTime(rowData?.dateOfSearch)} />;\n  };\n\n  const renderPreviousStatus = (rowData?: any) => {\n    return <Text className=\"\" label={PREVIOUS_STATUS[`${rowData?.previousStatus}`] ?? \"-\"} />;\n  };\n\n  const renderAddressSearch = () => {\n    return (\n      <div className=\"flex flex-col justify-center items-start space-y-4\">\n        <div className=\"w-full\">\n          <Text\n            className=\"text-primary-ptext-1000 text-xs\"\n            label={\"label.section.addressSearch.addressDetails\"}\n          />\n        </div>\n\n        <ReadOnlyTable\n          value={[pageData.addressSearch.addressInLoan[activeIndex]]}\n          className=\"selected-existing-doc-read-table !min-h-auto\"\n          ref={addressSearchTableRef}\n          dataKey=\"uid\"\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n            header={textConverter(\"label.section.addressSearch.addressType\")}\n            body={renderAddressType}\n          />\n\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n            header={textConverter(\"label.section.addressSearch.address\")}\n            body={renderAddress}\n          />\n\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n            header={textConverter(\"label.section.addressSearch.city\")}\n            body={renderCity}\n          />\n\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n            header={textConverter(\"label.section.addressSearch.state\")}\n            body={renderState}\n          />\n\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n            header={textConverter(\"label.section.addressSearch.pincode\")}\n            body={renderPincode}\n          />\n\n          <Column\n            className=\"text-primary-ptext-1000 text-center text-xs p-1 pl-6 h-12 custom-header\"\n            header={renderAddressSearchActionHeader()}\n            body={renderAddressSearchAction}\n          />\n        </ReadOnlyTable>\n\n        <div className=\"w-full\">\n          <Text className=\"text-primary-ptext-1000 text-xs\" label={\"label.dedupe.matchResults\"} />\n        </div>\n\n        {currentAddressInfo.uid && currentAddressInfo.lanId ? (\n          <div className=\"w-full\">\n            <EditableTableV2\n              ref={addressSearchMatchTableRef}\n              standardDataFormatPromise={DedupeService.getAddressForDedupe}\n              search={`&linkedAddressUid=${currentAddressInfo.uid}&linkedLanId=${currentAddressInfo.lanId}&type=Address`}\n              paginator\n              uniqueKey=\"uid\"\n              mode={\"UPDATE\"}\n            >\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.loanApplicationNo\")}\n                body={renderLoanAppNo}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.applicantType\")}\n                body={renderAppType}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.firstName\")}\n                body={renderFirstName}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.middleName\")}\n                body={renderMiddleName}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.lastName\")}\n                body={renderLastName}\n              />\n\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.addressType\")}\n                body={renderAddressType}\n              />\n\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.address\")}\n                body={renderAddress}\n                style={{ minWidth: \"200px\" }}\n              />\n\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.city\")}\n                body={renderCity}\n              />\n\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.state\")}\n                body={renderState}\n              />\n\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.pincode\")}\n                body={renderPincode}\n              />\n\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.matchingList\")}\n                body={renderMatchingList}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.fileStatus\")}\n                body={renderFileStatus}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.dateOfSearch\")}\n                body={renderDateOfSearch}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-left text-xs p-1 h-12 pl-6\"\n                header={textConverter(\"label.section.addressSearch.prevStatus\")}\n                body={renderPreviousStatus}\n              />\n              <Column\n                className=\"text-primary-ptext-1000 text-center text-xs p-1 px-6 h-12\"\n                header={textConverter(\"label.dedupe.status\")}\n                body={renderAddressSearchMatchAction}\n              />\n            </EditableTableV2>\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  };\n\n  const renderFinalStatus = () => {\n    const { isFinalStatusLoading, finalStatusPageMode, status, statusEditorData } =\n      pageData.finalStatus;\n\n    return isFinalStatusLoading ? (\n      <SkeletonCustom height=\"19rem\" width=\"100%\" borderRadius=\"8px\" animation=\"wave\" />\n    ) : (\n      <div className=\"flex flex-col justify-center items-start w-full gap-y-3 mt-3\">\n        <div className=\"w-62.5\">\n          <SimpleDropDown\n            label={\"label.section.finalStatus.status*\"}\n            name=\"status\"\n            value={status}\n            onChange={handleStatusChange}\n            options={[...CURRENT_STAGE_STATUS]}\n            optionLabel=\"label\"\n            optionValue=\"value\"\n            onBlur={validate}\n            validation={simpleValidator?.current?.message(`status`, status, \"mandatory\")}\n            disabled={pageData.finalStatus.finalStatusPageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n\n        <RichTextEditor\n          ref={statusEditorRef}\n          initialValue={statusEditorData}\n          disabled={finalStatusPageMode === PAGE_MODE.VIEW}\n        />\n      </div>\n    );\n  };\n\n  const renderContent = (customerDedupe: any) => {\n    return (\n      <div className=\"mt-4\" key={customerDedupe?.key}>\n        <Section>\n          <div className=\"flex flex-col gap-4\">\n            <SaveComponent\n              pageMode={pageData.addressSearch.addressSearchPageMode}\n              title={\"heading.section.addressSearch\"}\n              onCancel={onCancelAddressSearch}\n              onEdit={onEditAddressSearch}\n              onSave={onSaveAddressSearchMatchResults}\n            >\n              {renderAddressSearch()}\n            </SaveComponent>\n\n            <SaveComponent\n              pageMode={pageData.finalStatus.finalStatusPageMode}\n              title={\"heading.section.finalStatus\"}\n              onCancel={onCancelFinalStatus}\n              onEdit={onEditFinalStatus}\n              onSave={onSaveAddressFinalStatus}\n            >\n              {renderFinalStatus()}\n            </SaveComponent>\n          </div>\n        </Section>\n      </div>\n    );\n  };\n\n  /* \n    -----------------------------------------------------------------------------------------\n    render: The Main return()\n    -----------------------------------------------------------------------------------------\n  */\n  if (isPageLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <React.Fragment>\n      <SimpleTab\n        className=\"simple-tab-custom\"\n        showTooltip\n        scrollable\n        optionLabel={[\"tabName\"]}\n        optionKey={[\"key\"]}\n        headerClassName=\"\"\n        ref={tabRef}\n        activeIndex={activeIndex}\n        tabs={addressTabsListForDedupe}\n        onTabChange={handleTabChange}\n        renderContent={renderContent}\n      />\n\n      <ToastCustom\n        position={position}\n        ref={toastMessageRef}\n        toastText={toastMessage}\n        variant={toastMessageVariant}\n      />\n\n      <ErrorDialog\n        onHide={() => {\n          setShowDialogAPIError(false);\n          setErrorMessage(\"\");\n        }}\n        visible={showDialogAPIError}\n        errorMessage={errorMessage}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default PageAddressDedupe;\n"],"names":["initialAddressInfo","initialPageData","PAGE_MODE","ADDRESS_TYPE_TAB_NAMES","ADDRESS_TYPE_VALUES","PREVIOUS_STATUS","PageAddressDedupe","params","useParams","isPageLoading","setIsPageLoading","useState","pageData","setPageData","allLinkedAddressList","setAllLinkedAddressList","currentAddressInfo","setCurrentAddressInfo","activeIndex","setActiveIndex","addressTabsListForDedupe","setAddressTabsListForDedupe","position","setPosition","toastMessage","setToastMessage","toastMessageVariant","setToastMessageVariant","TOAST_STYLE_TYPE","triggerToast","setTriggerToast","errorMessage","setErrorMessage","showDialogAPIError","setShowDialogAPIError","toastMessageRef","useRef","tabRef","addressSearchTableRef","addressSearchMatchTableRef","statusEditorRef","textConverter","useTextConverter","forceUpdate","simpleValidator","SimpleReactValidator","getStandardValidator","messageReplace","prev","useEffect","init","getLinkedLoanAddress","getAddressFinalStatus","_a","search","res","DedupeService","validateGetAPIResponse","linkedAddressList","_b","record","_c","_d","_e","_f","_g","_h","_j","_i","prepareAddressTabsForCurrentLoan","err","parseStandardAPIErrorMessage","statusInfo","validate","validateForm","isValid","resetValidator","handleTabChange","currentAddressDetails","applicant","handleStatusChange","onSearchForAddressDedupe","rowData","payload","enrichSearchForAddressDedupe","validatePostAPIResponse","onSaveAddressSearchMatchResults","enrichAddressSearchMatchResults","validatePutAPIResponse","STATIC_MASTER_TYPE_TOAST_TEXT","onEditAddressSearch","prevState","onCancelAddressSearch","onSaveAddressFinalStatus","enrichAddressFinalStatus","onEditFinalStatus","onCancelFinalStatus","updatedRecord","renderFirstName","jsx","Text","renderMiddleName","renderLastName","renderAddressType","renderAddress","renderCity","renderState","renderPincode","pincode","renderAddressSearchAction","TextButton","renderAddressSearchActionHeader","renderAddressSearchMatchAction","SimpleDropDown","DEDUPE_CHECK","e","rowDataObj","renderLoanAppNo","renderAppType","renderMatchingList","renderFileStatus","renderDateOfSearch","formatDateWithTime","renderPreviousStatus","renderAddressSearch","jsxs","ReadOnlyTable","Column","EditableTableV2","Fragment","renderFinalStatus","isFinalStatusLoading","finalStatusPageMode","status","statusEditorData","SkeletonCustom","CURRENT_STAGE_STATUS","RichTextEditor","renderContent","customerDedupe","Section","SaveComponent","Loader","React","SimpleTab","ToastCustom","ErrorDialog"],"mappings":"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"}