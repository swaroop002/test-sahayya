{"version":3,"file":"PageCollateralProperty-16eef1b4.js","sources":["../../src/services/transaction/DDE/PropertyDetailsService.ts","../../src/views/transaction/PageDDE/Login/PageCollateralProperty/PropertyDetails/PropertyDetails.tsx","../../src/views/transaction/PageDDE/Login/PageCollateralProperty/PageCollateralProperty.tsx"],"sourcesContent":["import BaseApiService from \"../../BaseApiService\";\n\n// ---------------- Default path ------------------ //\nconst DEFAULT_PATH = \"/custom/api/login\";\n\nclass PropertyDetailsService extends BaseApiService {\n  getAll = (loanId: string) => {\n    const endPoint = DEFAULT_PATH + `/collateral/property/${loanId}?isActive=true`;\n    return this.makeGetRequestWithAuth(endPoint);\n  };\n\n  getPropertyDetailsById = (addressUid: string) => {\n    const endPoint = DEFAULT_PATH + `/collateral/property/uid/${addressUid}`;\n    return this.makeGetRequestWithAuth(endPoint);\n  };\n\n  create = (payload: any) => {\n    const endPoint = DEFAULT_PATH + `/dde/collateral/property`;\n    return this.makePostRequestWithAuth(endPoint, payload);\n  };\n\n  update = (payload: any) => {\n    const endPoint = DEFAULT_PATH + `/dde/collateral/property`;\n    return this.makePutRequestWithAuth(endPoint, payload);\n  };\n}\n\nexport default new PropertyDetailsService();\n","import { RouteProps } from \"hoc/withRouter\";\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\n// --------- ---------- //\nimport Address, { IAddressData, IAddressRef } from \"components/Address\";\nimport DocumentUploader, {\n  DOC_UPLOADER_MODE,\n  IDocumentUploaderRef,\n} from \"components/DocumentUploader\";\nimport { IUploadedFile } from \"components/FileUploadCustom\";\nimport Label from \"components/Label\";\nimport RadioButton from \"components/RadioButton\";\nimport SaveComponent from \"components/Save\";\nimport SkeletonCustom from \"components/Skeleton\";\nimport Text from \"components/Text\";\n// ---------- ---------- //\nimport TextData from \"components/TextData/TextData\";\n\n// ---------- ---------- //\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { ISavedDocumentRecords, initialPropertyData, isDefaultAddress } from \"../../Helper\";\n\n// ---------- ---------- //\nimport { getStandardValidator, messageReplace } from \"utils/CommonUtil\";\n\n// ---------- ---------- //\nimport CheckBox from \"components/CheckBox/CheckBox\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  CHECKBOX_STYLE_TYPE,\n  DOCUMENT_CATEGORY,\n  OCR_STAGE_NAMES,\n  PAGE_MODE,\n  SUB_STAGE,\n  VARIANTS,\n} from \"utils/Constant\";\n\nexport interface IPropertyDetailsRef {\n  save: () => IPropertyDetailsData | undefined;\n  remove: () => IPropertyDetailsData | undefined;\n  onSaveSuccess: () => any;\n  onClearData: () => any;\n}\n\ninterface ISectionDocuments extends IUploadedFile {\n  docFor?: string;\n  docTypeUid?: string;\n  isActive?: boolean;\n  uid?: string; //individual uploaded file uid\n}\n\n//TODO : need to update get details interface\nexport interface IPropertyDetailsData {\n  uid?: string;\n  applicant?: {\n    uid: string;\n  };\n  isActive?: boolean;\n  isPropertySelected: boolean;\n  propertyType?: string;\n  address: string;\n  pincode?: any;\n  city?: any;\n  state?: string;\n  latitude?: string;\n  longitude?: string;\n  savedDocuments?: any;\n  unSavedDocuments?: any;\n  isSameAsApplicantResAddress: boolean | null;\n  ignoreSameAsApplicantResAddressChange?: boolean;\n}\n\ninterface IProps extends RouteProps {\n  data: IPropertyDetailsData;\n  residentialAddress: IPropertyDetailsData;\n  isLoading?: boolean;\n  disabled?: boolean;\n  disabledSaveMenu?: boolean;\n  ref?: any;\n  cardNumber?: number;\n  dropDownOptions?: any;\n  docTypeInfo: any;\n  // addressDetails?: {\n  //   residentialAddress?: any;\n  //   permanentAddress?: any;\n  // };\n  onSavePropertyDetails: () => void;\n  onRemovePropertyDetails?: () => void;\n  onDeleteDocs: any;\n  onChangePropertySelection: (updatedData: IPropertyDetailsData) => void;\n  getPropertyDetails: () => Promise<void>;\n}\n\nconst PropertyDetails = forwardRef<IPropertyDetailsRef, IProps>((props, ref) => {\n  const {\n    data,\n    residentialAddress,\n    isLoading,\n    cardNumber,\n    disabled,\n    disabledSaveMenu,\n    onSavePropertyDetails,\n    onRemovePropertyDetails,\n    onChangePropertySelection,\n    getPropertyDetails,\n  } = props;\n\n  const params: { loanUid?: string } = useParams();\n  const firstRender = true;\n  // ----------------- states ---------------------- //\n  const [pageObj, setPageObj] = useState<IPropertyDetailsData>({ ...initialPropertyData });\n  const [pageMode, setPageMode] = useState<string>(PAGE_MODE.VIEW);\n\n  // --------------------------- validator initialization ---------------------- //\n\n  const [, forceUpdate] = useState<boolean>(false);\n\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n  const documentUploaderRef = useRef<IDocumentUploaderRef | null>(null);\n\n  // --------------------------- global variables ---------------------- //\n\n  const menuModel = [\n    {\n      className: \"\",\n      label: \"Remove\",\n      command: () => {\n        onRemovePropertyDetails?.();\n      },\n      disabled: cardNumber === 0,\n    },\n  ];\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    LifeCycle Methods: \n    --------------------------------------------------------------------------------------------------\n  */\n  // useEffect(() => {\n  //   setPageObj((prevObj) => ({\n  //     ...prevObj,\n  //     savedDocuments: data?.savedDocuments,\n  //   }));\n  // }, []);\n\n  useEffect(() => {\n    console.log(\"pageObj\", pageObj);\n  }, [pageObj]);\n\n  useEffect(() => {\n    if (data) {\n      setPageObj((prevObj) => ({\n        ...prevObj,\n        ...data,\n      }));\n    }\n  }, [data]);\n\n  useEffect(() => {\n    onChangePropertySelection({ ...pageObj });\n\n    if (!pageObj.isPropertySelected) {\n      addressRef?.current?.resetValidator();\n      //  Need to call the reset  Uploader function here\n      // addressRef?.current?.clear();\n      updatePageObj({ ...initialPropertyData });\n      documentUploaderRef?.current?.resetDocUpload();\n      documentUploaderRef?.current?.resetValidator();\n    }\n  }, [pageObj.isPropertySelected]);\n\n  useEffect(() => {\n    if (pageObj.isSameAsApplicantResAddress) {\n      updatePageObjToResidentialAddress();\n    }\n  }, [pageObj.isSameAsApplicantResAddress]);\n\n  useEffect(() => {\n    console.log(\"pageObj\", pageObj);\n  }, [pageObj]);\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    Ref: For creating and returning properties\n    --------------------------------------------------------------------------------------------------\n  */\n  const addressRef: any = useRef<IAddressRef | null>();\n\n  useImperativeHandle(ref, () => ({\n    save: onSave,\n    remove: onRemove,\n    onSaveSuccess: () => setPageMode(PAGE_MODE.VIEW),\n    onClearData: () => setPageObj((prevObj) => ({ ...prevObj, ...initialPropertyData })),\n  }));\n\n  /*\n    -------------------------------------------------------------------------------------------------------\n    Service Calls: For Getting Data from service/API\n    -------------------------------------------------------------------------------------------------------\n  */\n\n  /* \n    -------------------------------------------------------------------------------------------------------\n    Validators:\n    -------------------------------------------------------------------------------------------------------\n  */\n\n  const validate = (e: any) => {\n    simpleValidator?.current?.showMessageFor(e?.target?.name);\n  };\n\n  const validateForm = () => {\n    let isValid = false;\n\n    isValid = simpleValidator?.current?.allValid();\n    if (isValid) {\n      return isValid;\n    } else {\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n\n  /*\n    -----------------------------------------------------------------------------------------------\n    Handlers: Event handler for onChange, onBlur etc\n    -----------------------------------------------------------------------------------------------\n  */\n\n  const handleChangeRadioButton = (e: any) => {\n    setPageObj((prevPageObj: any) => {\n      return {\n        ...prevPageObj,\n        [e.target.name]: !pageObj.isPropertySelected,\n      };\n    });\n  };\n\n  const handleCheckboxChange = (e: any) => {\n    setPageObj((prevPageObj: any) => {\n      return {\n        ...prevPageObj,\n        isSameAsApplicantResAddress: pageObj.isSameAsApplicantResAddress ? false : true,\n      };\n    });\n  };\n\n  const onAddressChange = async (currentAddress: IAddressData) => {\n    if (pageObj.isSameAsApplicantResAddress) {\n      const defaultAddress: IAddressData = {\n        address: pageObj?.address,\n        city: { name: pageObj?.city?.name, uid: pageObj?.city?.uid },\n        state: pageObj?.state ?? \"\",\n        latitude: pageObj?.latitude ?? \"\",\n        longitude: pageObj?.longitude ?? \"\",\n        pincode: pageObj?.pincode,\n        propertyType: pageObj?.propertyType,\n      };\n      const isAddressSameAsDefault = isDefaultAddress(defaultAddress, currentAddress);\n      if (!isAddressSameAsDefault) {\n        setPageObj((prevPageObj) => ({\n          ...prevPageObj,\n          isSameAsApplicantResAddress: false,\n          ignoreSameAsApplicantResAddressChange: true,\n        }));\n      }\n    }\n  };\n\n  /*\n    -----------------------------------------------------------------------------------------------\n    on-Handlers: Event handler for onClick, onToggle etc\n    -----------------------------------------------------------------------------------------------\n  */\n\n  const onRemove = () => {\n    let unSavedDocuments;\n    if (pageObj?.uid) {\n       unSavedDocuments = documentUploaderRef?.current?.getUploadedData();\n      if (pageObj?.isPropertySelected && !unSavedDocuments?.documentUid) {\n        return;\n      }\n    }\n\n    return { ...pageObj, unSavedDocuments: unSavedDocuments, isActive: false };\n  };\n\n  // const onRemoveDirect = () => {\n  //   const unSavedDocuments = documentUploaderRef?.current?.getUploadedData();\n  //   if(pageObj?.isPropertySelected && !unSavedDocuments?.documentUid){\n  //     return;\n  //   }\n  //   return { ...pageObj,unSavedDocuments:unSavedDocuments, isActive: false };\n  // };\n\n  const onSave = () => {\n    const addressData = addressRef?.current?.save();\n    const unSavedDocuments = documentUploaderRef?.current?.getUploadedData();\n\n    if (!validateForm() || !addressData || (pageObj?.isPropertySelected && !unSavedDocuments)) {\n      return;\n    }\n\n    return {\n      ...pageObj,\n      ...addressData,\n      unSavedDocuments: pageObj?.isPropertySelected ? unSavedDocuments : [],\n      uid: pageObj?.uid,\n    };\n  };\n\n  const onCancel = () => {\n    if (simpleValidator) {\n      simpleValidator.current.visibleFields = [];\n    }\n    simpleValidator?.current?.hideMessages();\n    addressRef?.current?.resetValidator();\n    getPropertyDetails?.();\n\n    setPageMode(PAGE_MODE.VIEW);\n  };\n\n  const onEdit = () => setPageMode(PAGE_MODE.EDIT);\n\n  /* \n    -------------------------------------------------------------------------------------------------\n    Helper Functions:\n    -------------------------------------------------------------------------------------------------\n  */\n\n  const updatePageObjToResidentialAddress = () => {\n    if (residentialAddress.address) {\n      setPageObj((prevPageObj) => ({\n        ...prevPageObj,\n        ...residentialAddress,\n        uid: prevPageObj.uid, // to consider property id\n        ignoreSameAsApplicantResAddressChange: false,\n        savedDocuments: prevPageObj.savedDocuments,\n        propertyType: prevPageObj.propertyType,\n      }));\n    }\n  };\n\n  const updatePageObj = (data: IPropertyDetailsData | undefined) => {\n    if (data) {\n      const {\n        address,\n        city,\n        unSavedDocuments,\n        latitude,\n        longitude,\n        pincode,\n        propertyType,\n        state,\n        isSameAsApplicantResAddress,\n        savedDocuments,\n      } = data;\n\n      setPageObj((prevObj) => ({\n        ...prevObj,\n        address: address,\n        city: city,\n        unSavedDocuments: unSavedDocuments ?? [],\n        pincode: pincode,\n        propertyType: propertyType,\n        state: state,\n        latitude: latitude,\n        longitude: longitude,\n        isSameAsApplicantResAddress: isSameAsApplicantResAddress ? true : false,\n        savedDocuments: savedDocuments,\n      }));\n    }\n  };\n\n  const getAddressPageMode = () => {\n    if (pageMode === PAGE_MODE.VIEW) {\n      return pageMode;\n    }\n    if (pageObj.isPropertySelected) {\n      return PAGE_MODE.EDIT;\n    }\n    return PAGE_MODE.VIEW;\n  };\n\n  const isFieldDisabled = () => {\n    if (pageMode === PAGE_MODE.VIEW) {\n      return true;\n    }\n    if (pageMode === PAGE_MODE.EDIT && !pageObj.isPropertySelected) {\n      return true;\n    }\n    return false;\n  };\n\n  /* \n    ------------------------------------------------------------------------------------------------\n    Sectional Render Functions: For Sub components / section wise renders\n    ------------------------------------------------------------------------------------------------\n  */\n\n  const addressData = useMemo(() => {\n    const {\n      address,\n      pincode,\n      city,\n      state,\n      latitude,\n      longitude,\n      ignoreSameAsApplicantResAddressChange,\n      propertyType,\n      isPropertySelected,\n    } = pageObj;\n    const addressData = addressRef?.current?.getCurrentValues();\n    const propertyTypeUpdatedValue = propertyType\n      ? propertyType\n      : isPropertySelected\n      ? addressData?.propertyType\n      : null;\n    console.log(\"propertyTypeUpdatedValue\", propertyTypeUpdatedValue);\n\n    if (ignoreSameAsApplicantResAddressChange) {\n      return null;\n    }\n    return {\n      address,\n      pincode,\n      city,\n      state,\n      latitude,\n      longitude,\n      propertyType: propertyTypeUpdatedValue,\n    };\n  }, [\n    pageObj?.address,\n    pageObj?.pincode,\n    pageObj?.city,\n    pageObj?.state,\n    pageObj?.latitude,\n    pageObj?.longitude,\n    pageObj?.propertyType,\n    pageObj?.isSameAsApplicantResAddress,\n    pageObj?.ignoreSameAsApplicantResAddressChange,\n    pageObj?.isPropertySelected,\n  ]);\n\n  const renderAddressSection = () => {\n    // data to pre populate address fields\n    return (\n      <>\n    \n        <Address\n          pageMode={getAddressPageMode()}\n          ref={addressRef}\n          data={addressData}\n          variant={VARIANTS.TERTIARY}\n          skipValidation={!pageObj?.isPropertySelected}\n          onAddressChange={onAddressChange}\n          isLatLong\n        ></Address>\n\n        <div className=\"flex flex-col space-y-4\">\n          <TextData\n            label={\"label.dde.propertyDocuments\"}\n            value=\"Attach Documents (PDF, JPG, JPEG or PNG)\"\n            titleClass=\"text-primary-gray-700 text-sm font-bold mb-1\"\n          />\n          <div className=\"flex gap-5\">\n            <DocumentUploader\n              ref={documentUploaderRef}\n              mandatoryDocUpload={pageObj?.isPropertySelected ? true : false}\n              savedDocument={\n                pageObj?.isPropertySelected && pageObj?.savedDocuments?.[0]\n                  ? pageObj?.savedDocuments?.[0]\n                  : {}\n              }\n              mode={\n                pageMode === PAGE_MODE.VIEW || !pageObj?.isPropertySelected\n                  ? DOC_UPLOADER_MODE.VIEW\n                  : DOC_UPLOADER_MODE.EDIT\n              }\n              queryParamForDocList={DOCUMENT_CATEGORY.DOCUMENT_CATEGORY_COLLATERAL_PROPERTY}\n              ocrStageName={OCR_STAGE_NAMES.LOGIN}\n              ocrSubstageName={SUB_STAGE.DDE}\n              ocrPayloadData={{\n                loanUid: params.loanUid ?? \"\",\n                applicant: {\n                  uid: data.applicant?.uid ?? \"\",\n                },\n              }}\n            />\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const renderContent = () => {\n    const { isPropertySelected } = pageObj;\n    return (\n      <>\n        <Text\n          label={\"label.dde.basicDetails\"}\n          className=\"text-primary-gray-700 text-sm font-bold mb-1\"\n        />\n        <Text className=\"text-xs text-primary-ptext-1000\" label={\"label.dde.propertySelected\"} />\n        <div className=\"grid grid-cols-1 sm:grid-cols-2  md:grid-cols-3 lg:grid-cols-4 gap-x-4 gap-y-5 \">\n          <div className=\"flex\">\n            <div className=\"mr-6\">\n              <div className=\"\">\n                <RadioButton\n                  name=\"isPropertySelected\"\n                  hideErrorRow\n                  hideLabel\n                  className=\"flex items-center\"\n                  onChange={handleChangeRadioButton}\n                  value={isPropertySelected === true}\n                  checked={isPropertySelected === true}\n                  disabled={pageMode === PAGE_MODE.VIEW || cardNumber !== 1}\n                />\n              </div>\n              <div className=\"\">\n                <Label label={\"label.dde.yes\"} className=\"ml-2\" />\n              </div>\n            </div>\n            <div>\n              <div className=\"\">\n                <RadioButton\n                  name=\"isPropertySelected\"\n                  hideLabel\n                  hideErrorRow\n                  className=\"flex items-center\"\n                  onChange={handleChangeRadioButton}\n                  value={isPropertySelected === false}\n                  checked={isPropertySelected === false}\n                  disabled={pageMode === PAGE_MODE.VIEW || cardNumber !== 1}\n                />\n              </div>\n\n              <div className=\"\">\n                <Label label={\"label.dde.no\"} className=\"ml-2\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex\">\n          <div className=\"mr-5\">\n            <Text\n              className=\"text-primary-gray-700 text-sm font-bold mb-1\"\n              label={\"label.dde.propertyAddress\"}\n            />\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-6 h-6 mr-1.5\">\n              <CheckBox\n                variant={CHECKBOX_STYLE_TYPE.PRIMARY}\n                value={pageObj.isSameAsApplicantResAddress}\n                checked={pageObj.isSameAsApplicantResAddress}\n                onChange={handleCheckboxChange}\n                hideLabel\n                disabled={isFieldDisabled()}\n              />\n            </div>\n            <div>\n              <Text\n                className=\"text-primary-labelColor text-xs  \"\n                label={\"label.dde.permanentAddressCheckboxMessage\"}\n              />\n            </div>\n          </div>\n        </div>\n\n        {renderAddressSection()}\n      </>\n    );\n  };\n\n  /* \n    -----------------------------------------------------------------------------------------\n    render: The Main return()\n    -----------------------------------------------------------------------------------------\n  */\n\n  return (\n    <React.Fragment>\n      <div className=\"\">\n        {isLoading ? (\n          <SkeletonCustom height=\"19.375rem\" width=\"100%\" borderRadius=\"8px\" animation=\"wave\" />\n        ) : (\n          <SaveComponent\n            disabled={disabled}\n            disabledMenu={disabledSaveMenu}\n            title={\"label.dde.propertyDetails\"}\n            titleArgs={{ count: cardNumber }}\n            pageMode={pageMode}\n            onCancel={onCancel}\n            onEdit={onEdit}\n            onSave={onSavePropertyDetails}\n            kebabModel={menuModel}\n          >\n            {renderContent()}\n          </SaveComponent>\n        )}\n      </div>\n    </React.Fragment>\n  );\n});\n\nPropertyDetails.defaultProps = {\n  disabled: false,\n};\n\nexport default PropertyDetails;\n","import ButtonBox from \"components/ButtonBox/ButtonBox\";\nimport ErrorDialog from \"components/ErrorDialog\";\nimport LazyLoader from \"components/LazyLoader/LazyLoader\";\nimport Section from \"components/Section/Section\";\nimport SkeletonCustom from \"components/Skeleton/Skeleton\";\nimport ToastCustom from \"components/Toast\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ApplicantService from \"services/ApplicantService\";\nimport PropertyDetailsService from \"services/transaction/DDE/PropertyDetailsService\";\nimport Residential from \"services/transaction/QDE/Residential\";\nimport {\n  parseStandardAPIErrorMessage,\n  validateGetAPIResponse,\n  validatePutAPIResponse,\n} from \"utils/CommonUtil\";\nimport {\n  APPLICANT_TYPE,\n  BUTTON_TYPE,\n  STATIC_MASTER_TYPE_TOAST_TEXT,\n  TOAST_STYLE_TYPE,\n} from \"utils/Constant\";\nimport { enrichPropertyDetailsObj, initialPropertyData, updatePropertyObj } from \"../Helper\";\nimport PropertyDetails, {\n  IPropertyDetailsData,\n  IPropertyDetailsRef,\n} from \"./PropertyDetails/PropertyDetails\";\n\ninterface IPageData {\n  property: {\n    isPropertyListLoading: boolean;\n    propertyList: IPropertyDetailsData[];\n  };\n}\n\nconst PageCollateralProperty = () => {\n  const params = useParams();\n  /*\n    -------------------------------------------------------\n      State\n    -------------------------------------------------------\n  */\n  const [loanId, setLoanId] = useState(params.loanUid ?? \"\");\n  const [applicantUid, setApplicantUid] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [residentialAddress, setResidentialAddress] = useState<IPropertyDetailsData>({\n    ...initialPropertyData,\n  });\n  const [disableAddNew, setDisableAddNew] = useState(false);\n  const [pageData, setPageData] = useState<IPageData>({\n    property: {\n      isPropertyListLoading: true,\n      propertyList: [{ ...initialPropertyData }], // TODO: need to add initial state\n    },\n  });\n  const [docTypeList, setDocTypeList] = useState<any[]>([]);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [toastMessageVariant, setToastMessageVariant] = useState(TOAST_STYLE_TYPE.PRIMARY);\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n\n  // Ref\n  const propertyRef = useRef<IPropertyDetailsRef[]>([]);\n  const toastMessageRef = useRef<any>(null);\n\n  /*\n    -------------------------------------------------------\n      useEffect\n    -------------------------------------------------------\n  */\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      toastMessageRef?.current?.showFunction();\n      setToastMessage(\"\");\n    }\n  }, [toastMessage, toastMessageVariant, triggerToast]);\n\n  useEffect(() => {\n    if (applicantUid && loanId) {\n      getResidentialAddress();\n    }\n  }, [applicantUid, loanId]);\n\n  useEffect(() => {\n    console.log(\"residential address \", residentialAddress);\n  }, [residentialAddress]);\n\n  /*\n    -------------------------------------------------------\n      Service Calls\n    -------------------------------------------------------\n  */\n  const init = async () => {\n    getApplicantId();\n  };\n\n  const getApplicantId = async () => {\n    try {\n      const res = await ApplicantService.getApplicantInfo(0, 20, APPLICANT_TYPE.PRIMARY, loanId);\n      if (validateGetAPIResponse(res) && !!res.data?.totalRecords) {\n        setApplicantUid(res.data?.results?.[0]?.uid);\n      }\n    } catch (err) {\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const getPropertyList = async () => {\n    try {\n      const res = await PropertyDetailsService.getAll(loanId);\n      let savedPropertyInfo: any = [];\n      savedPropertyInfo = res?.data?.map((property: any) => {\n        return updatePropertyObj(property);\n      });\n      if (res.data.length > 0) {\n        const disableAddNewButton = savedPropertyInfo?.some(\n          (property: any) => property?.isPropertySelected === false\n        );\n        setDisableAddNew(disableAddNewButton);\n      }\n      setPageData((prevObj) => {\n        return {\n          ...prevObj,\n          property: {\n            ...prevObj.property,\n            isPropertyListLoading: false,\n            propertyList: res.data.length > 0 ? savedPropertyInfo : [{ ...initialPropertyData }],\n          },\n        };\n      });\n    } catch (err) {\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const getResidentialAddress = async () => {\n    if (loanId && applicantUid) {\n      try {\n        const res = await Residential.getAddressForDde(loanId, applicantUid);\n        setResidentialAddress(\n          updatePropertyObj(\n            {\n              ...res?.data,\n              isSameAsApplicantResAddress: true,\n              isPropertySelected: true,\n            },\n            true\n          )\n        );\n      } catch (error) {\n        console.log(error);\n        setErrorMessage(parseStandardAPIErrorMessage(error));\n      }\n    }\n  };\n\n  const getDefaultAddress = async (indexOfProperty: number) => {\n    setPageData((prevObj) => {\n      const updatedPropertyList = structuredClone(prevObj.property.propertyList);\n      if (typeof residentialAddress === \"object\") {\n        updatedPropertyList[indexOfProperty] = { ...residentialAddress };\n      }\n      return {\n        ...prevObj,\n        property: {\n          ...prevObj.property,\n          isPropertyListLoading: false,\n          propertyList: updatedPropertyList,\n        },\n      };\n    });\n  };\n\n  const getPropertyDetails = async (indexOfProperty: number, uid: string) => {\n    try {\n      if (uid) {\n        // propertyRef.current[indexOfProperty].onClearData();\n        const res = await PropertyDetailsService.getPropertyDetailsById(uid);\n        const savedDetails = updatePropertyObj(res?.data);\n        setPageData((prevObj) => {\n          const updatedPropertyList = structuredClone(prevObj.property.propertyList);\n          if (typeof residentialAddress === \"object\") {\n            updatedPropertyList[indexOfProperty] = { ...savedDetails };\n          }\n          return {\n            ...prevObj,\n            property: {\n              ...prevObj.property,\n              isPropertyListLoading: false,\n              propertyList: updatedPropertyList,\n            },\n          };\n        });\n      } else {\n        propertyRef.current[indexOfProperty].onClearData();\n      }\n    } catch (error) {\n      console.log(error);\n      setErrorMessage(parseStandardAPIErrorMessage(error));\n    }\n  };\n\n  /* \n  -------------------------------------------------------\n    Handlers\n  -------------------------------------------------------\n  */\n\n  /* \n    -------------------------------------------------------\n    Validators\n    -------------------------------------------------------\n  */\n\n  /*\n    -------------------------------------------------------\n    Button Click Handlers\n    -------------------------------------------------------\n  */\n\n  const onSave = async (index: number) => {\n    const data: IPropertyDetailsData | undefined = propertyRef.current?.[index]?.save();\n    if (data) {\n      const payload = enrichPropertyDetailsObj(data, loanId, applicantUid, APPLICANT_TYPE.PRIMARY);\n\n      if (!data?.isPropertySelected) {\n       await  onUpdateToNoSelectedPropertyForOtherCards(data);\n      }\n      if (payload) {\n        try {\n          let saveApi = PropertyDetailsService.create;\n          if (payload?.uid) {\n            saveApi = PropertyDetailsService.update;\n          }\n          const res = await saveApi(payload);\n          setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n          setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n          setTriggerToast(!triggerToast);\n          if (data?.isPropertySelected) {\n            getPropertyDetails(index, res?.data?.uid);\n          } \n          else{\n            if(pageData?.property?.propertyList?.filter((record)=>record.uid)?.length >1){\n            getPropertyList();\n            }\n            else {\n              getPropertyDetails(index, res?.data?.uid);\n            }\n          }\n          propertyRef.current?.[index]?.onSaveSuccess();\n        } catch (err) {\n          setErrorMessage(parseStandardAPIErrorMessage(err));\n        }\n      }\n    }\n  };\n\n  const onUpdateToNoSelectedPropertyForOtherCards = async (data: IPropertyDetailsData) => {\n    if (data) {\n      const allCardsExceptCurrentOne: IPropertyDetailsData[] | undefined =\n        pageData.property.propertyList.filter((record) => record.uid !== data?.uid);\n      if (allCardsExceptCurrentOne) {\n        \n        for (const record of allCardsExceptCurrentOne) {\n          const payload = enrichForDeleteAllOtherCards(record);\n          try {\n            if (payload) {\n              await PropertyDetailsService.update(payload);\n            }\n          } catch (err) {\n            setErrorMessage(parseStandardAPIErrorMessage(err));\n          }\n        }\n      }\n    }\n  };\n\n  const onDeleteOtherDetailDocs = async (updatedData: any) => {\n    const preparedPayload = enrichPropertyDetailsObj(\n      updatedData,\n      loanId,\n      applicantUid,\n      APPLICANT_TYPE.PRIMARY\n    );\n    if (preparedPayload) {\n      try {\n        const res = await PropertyDetailsService.update(preparedPayload);\n        if (validatePutAPIResponse(res)) {\n          getPropertyList();\n        }\n      } catch (err) {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      }\n    }\n  };\n\n  const onRemove = async (index: number) => {\n    const data: IPropertyDetailsData | undefined = propertyRef?.current?.[index]?.remove();\n\n    if (data) {\n      const payload = enrichPropertyDetailsObj(data, loanId, applicantUid, APPLICANT_TYPE.PRIMARY);\n\n      if (data.uid) {\n        try {\n          const res: any = await PropertyDetailsService.update(payload);\n          if (validatePutAPIResponse(res)) {\n            getPropertyList();\n            setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setTriggerToast(!triggerToast);\n          }\n        } catch (error) {\n          setErrorMessage(parseStandardAPIErrorMessage(error));\n        }\n      } else {\n        const newPropertyList = pageData.property.propertyList.filter(\n          (_, idx: number) => idx !== index\n        );\n        setPageData((prevState: IPageData) => {\n          return {\n            ...prevState,\n            property: {\n              ...prevState.property,\n              propertyList: [...newPropertyList],\n            },\n          };\n        });\n      }\n    }\n  };\n\n  const onAddMore = () => {\n    const newPropertyListItem = { ...initialPropertyData };\n    setPageData((prev: any) => {\n      return {\n        ...prev,\n        property: {\n          ...prev.property,\n          propertyList: [...prev.property.propertyList, newPropertyListItem],\n        },\n      };\n    });\n  };\n\n  const onChangePropertySelection = (updatedData: IPropertyDetailsData) => {\n    const list = [...pageData.property.propertyList];\n    if (updatedData) {\n      const updatedList: IPropertyDetailsData[] = [];\n      if (updatedData?.uid) {\n        for (const property of list) {\n          if (property.uid === updatedData?.uid) {\n            updatedList.push({ ...updatedData });\n          } else {\n            updatedList.push({ ...property });\n          }\n        }\n      } else {\n        updatedList.push({ ...updatedData });\n      }\n      const disableAddNewButton = updatedList?.some(\n        (property) => property.isPropertySelected === false\n      );\n      setDisableAddNew(disableAddNewButton);\n    }\n  };\n  /* \n -------------------------------------------------------\n   Helper Functions\n -------------------------------------------------------\n  */\n\n  const onLazyLoadPropertyList = () => {\n    const functionsToCall = [];\n    // functionsToCall.push(initialEmploymentInfoDropdownOptionsAPICall);\n    // functionsToCall.push(getDocTypeDetails);\n    if (applicantUid) {\n      functionsToCall.push(getPropertyList);\n    }\n\n    functionsToCall.forEach((func) => func());\n  };\n\n  const enrichForDeleteAllOtherCards = (data: IPropertyDetailsData) => {\n    return {\n      uid: data?.uid,\n      isActive: false,\n      loan: {\n        uid: loanId,\n      },\n      applicant: {\n        uid: applicantUid,\n      },\n      isPropertySelected:false\n    };\n  };\n  /* \n    -------------------------------------------------------\n      Sectional Render Functions: For Sub components / section wise renders\n    -------------------------------------------------------\n  */\n\n  const renderPropertyDetails = (): React.ReactNode => {\n    const { propertyList, isPropertyListLoading } = pageData.property;\n\n    return (\n      <div className=\"flex flex-col gap-4 \">\n        {propertyList?.map((property: any, index: number) => (\n          <PropertyDetails\n            key={property?.uid}\n            ref={(refValue) => {\n              propertyRef.current[index] = refValue as IPropertyDetailsRef;\n            }}\n            cardNumber={index + 1}\n            data={property}\n            residentialAddress={residentialAddress}\n            docTypeInfo={docTypeList}\n            isLoading={isPropertyListLoading}\n            onSavePropertyDetails={() => onSave(index)}\n            onRemovePropertyDetails={() => onRemove(index)}\n            disabledSaveMenu={propertyList.length === 1}\n            onDeleteDocs={onDeleteOtherDetailDocs}\n            onChangePropertySelection={onChangePropertySelection}\n            getPropertyDetails={() => getPropertyDetails(index, property?.uid)}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  /*\n    -------------------------------------------------------\n    Main Rendering\n    -------------------------------------------------------\n  */\n\n  return (\n    <div>\n      <Section\n        title=\"heading.dde.propertyDetails\"\n        \n        // alertText={\"At least one employment detail is mandatory\"}\n      >\n        {!applicantUid ? (\n          <SkeletonCustom height=\"19.375rem\" width=\"100%\" borderRadius=\"8px\" animation=\"wave\" />\n        ) : (\n          <LazyLoader onLazyLoad={onLazyLoadPropertyList}>\n            {renderPropertyDetails()}\n            <div className=\"p-5 w-full rounded-xl bg-slate-100 mt-5\">\n              <ButtonBox\n                buttonType={BUTTON_TYPE.ICON_TEXT_ROW}\n                customLabel={\"label.dde.addProperty\"}\n                onClick={onAddMore}\n                disabled={disableAddNew}\n              />\n            </div>\n          </LazyLoader>\n        )}\n      </Section>\n      <ToastCustom\n        position={\"bottom-right\"}\n        ref={toastMessageRef}\n        toastText={toastMessage}\n        variant={toastMessageVariant}\n      />\n      <ErrorDialog\n        onHide={() => {\n          setShowDialogAPIError(false);\n          setErrorMessage(\"\");\n        }}\n        visible={showDialogAPIError}\n        errorMessage={errorMessage}\n      />\n    </div>\n  );\n};\n\nexport default PageCollateralProperty;\n"],"names":["DEFAULT_PATH","PropertyDetailsService","BaseApiService","__publicField","loanId","endPoint","addressUid","payload","PropertyDetailsService$1","PropertyDetails","forwardRef","props","ref","data","residentialAddress","isLoading","cardNumber","disabled","disabledSaveMenu","onSavePropertyDetails","onRemovePropertyDetails","onChangePropertySelection","getPropertyDetails","params","useParams","pageObj","setPageObj","useState","initialPropertyData","pageMode","setPageMode","PAGE_MODE","forceUpdate","simpleValidator","useRef","SimpleReactValidator","getStandardValidator","messageReplace","prev","documentUploaderRef","menuModel","useEffect","prevObj","_a","addressRef","updatePageObj","_b","_c","updatePageObjToResidentialAddress","useImperativeHandle","onSave","onRemove","validateForm","isValid","handleChangeRadioButton","e","prevPageObj","handleCheckboxChange","onAddressChange","currentAddress","defaultAddress","isDefaultAddress","unSavedDocuments","addressData","onCancel","onEdit","address","city","latitude","longitude","pincode","propertyType","state","isSameAsApplicantResAddress","savedDocuments","getAddressPageMode","isFieldDisabled","useMemo","ignoreSameAsApplicantResAddressChange","isPropertySelected","propertyTypeUpdatedValue","renderAddressSection","jsxs","Fragment","jsx","Address","VARIANTS","TextData","DocumentUploader","DOC_UPLOADER_MODE","DOCUMENT_CATEGORY","OCR_STAGE_NAMES","SUB_STAGE","renderContent","Text","RadioButton","Label","CheckBox","CHECKBOX_STYLE_TYPE","React","SkeletonCustom","SaveComponent","PageCollateralProperty","setLoanId","applicantUid","setApplicantUid","errorMessage","setErrorMessage","setResidentialAddress","disableAddNew","setDisableAddNew","pageData","setPageData","docTypeList","setDocTypeList","toastMessage","setToastMessage","toastMessageVariant","setToastMessageVariant","TOAST_STYLE_TYPE","triggerToast","setTriggerToast","showDialogAPIError","setShowDialogAPIError","propertyRef","toastMessageRef","init","getResidentialAddress","getApplicantId","res","ApplicantService","APPLICANT_TYPE","validateGetAPIResponse","_d","err","parseStandardAPIErrorMessage","getPropertyList","savedPropertyInfo","property","updatePropertyObj","disableAddNewButton","Residential","error","indexOfProperty","uid","savedDetails","updatedPropertyList","index","enrichPropertyDetailsObj","onUpdateToNoSelectedPropertyForOtherCards","saveApi","STATIC_MASTER_TYPE_TOAST_TEXT","_f","_e","record","_g","_i","_h","allCardsExceptCurrentOne","enrichForDeleteAllOtherCards","onDeleteOtherDetailDocs","updatedData","preparedPayload","validatePutAPIResponse","newPropertyList","_","idx","prevState","onAddMore","newPropertyListItem","list","updatedList","onLazyLoadPropertyList","functionsToCall","func","renderPropertyDetails","propertyList","isPropertyListLoading","refValue","Section","LazyLoader","ButtonBox","BUTTON_TYPE","ToastCustom","ErrorDialog"],"mappings":"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"}