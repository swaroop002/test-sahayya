{"version":3,"file":"PageCorporateGuarantors-752394d1.js","sources":["../../src/views/transaction/PageDDE/Login/PageCorporateGuarantors/PageCorporateGuarantors.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ShortUniqueId from \"short-unique-id\";\n\n// --------- ---------- //\nimport ButtonBox from \"components/ButtonBox\";\nimport Loader from \"components/Loader\";\nimport SaveComponent from \"components/Save\";\nimport SimpleTab from \"components/SimpleTab\";\nimport SkeletonCustom from \"components/Skeleton\";\nimport Text from \"components/Text\";\nimport TextData from \"components/TextData\";\nimport ToastCustom from \"components/Toast\";\nimport { ToastPositionType } from \"primereact/toast\";\n\n// --------- ---------- //\nimport Address, { IAddressRef } from \"components/Address\";\nimport ErrorDialog from \"components/ErrorDialog\";\nimport Section from \"components/Section\";\nimport WarningDialog from \"components/WarningDialog\";\n\n// --------- ---------- //\nimport ApplicantService from \"services/ApplicantService\";\nimport StaticMasterDataService from \"services/masterdata/StaticMaster/StaticMasterDataService\";\nimport AddressService from \"services/transaction/DDE/AddressService\";\nimport BasicInformation from \"services/transaction/QDE/BasicInformation\";\n\n// --------- ---------- //\nimport { ISectionDropdownOption } from \"interface/common\";\n\n// --------- ---------- //\nimport {\n  checkDataHasValue,\n  parseStandardAPIErrorMessage,\n  validateGetAPIResponse,\n  validatePostAPIResponse,\n  validatePutAPIResponse,\n} from \"utils/CommonUtil\";\n\n// --------- ---------- //\nimport {\n  enrichOrgRegisteredAddress,\n  enrichOrganisationBasicInfo,\n  updateAddressData,\n  updateOrganisationBasicInfo,\n} from \"../Helper\";\n\n// --------- ---------- //\nimport {\n  APPLICANT_TYPE,\n  BUTTON_TYPE,\n  DOCUMENT_CATEGORY,\n  OCR_STAGE_NAMES,\n  PAGE_MODE,\n  PAGE_TYPE,\n  STATIC_MASTER_TYPE_TOAST_TEXT,\n  SUB_STAGE,\n  TOAST_STYLE_TYPE,\n  VARIANTS,\n} from \"utils/Constant\";\n\n// --------- ---------- //\nimport DocumentUploader, {\n  IDocumentUploaderRef,\n} from \"components/DocumentUploader/DocumentUploader\";\nimport OrganisationDetails, {\n  IOrganisationDetailsData,\n  IOrganisationDetailsRef,\n  initialOrgBasicInfoData,\n} from \"../PageCorporateCoApplicants/OrganisationDetails\";\n\n// --------------------------------- page interface ---------------------------------------------- //\n\ninterface IPageData {\n  organisationDetails: {\n    isOrganisationDetailsLoading: boolean;\n    organisationDetailsData: IOrganisationDetailsData;\n  };\n  addressInfo: {\n    isAddressLoading: boolean;\n    address: any;\n    addressInfoPageMode: string;\n    isSameAsRegGSTAddress: boolean;\n  };\n  // kycDocuments: {\n  //   isKycLoading: boolean;\n  //   kycDocList: IKycDocumentCardListInfo[];\n  //   uniqueKycCardTracker: string[];\n  //   populateOcr: IPopulateOcr;\n  //   aadharVerificationStatus: IAadharVerification;\n  //   savedDocuments: string[]; // saved documents name to check for PAN or Form60 mandatory validation\n  // };\n}\n\nconst initialPageData: IPageData = {\n  organisationDetails: {\n    isOrganisationDetailsLoading: false,\n    organisationDetailsData: { ...initialOrgBasicInfoData },\n  },\n  addressInfo: {\n    isAddressLoading: false,\n    address: {},\n    addressInfoPageMode: PAGE_MODE.VIEW,\n    isSameAsRegGSTAddress: false,\n  },\n  // kycDocuments: {\n  //   isKycLoading: false,\n  //   kycDocList: [initialKycTemplateListData],\n  //   uniqueKycCardTracker: [],\n  //   populateOcr: { uid: \"\", success: false, failed: false },\n  //   aadharVerificationStatus: {\n  //     verified: false,\n  //     failedToVerify: false,\n  //   },\n  //   savedDocuments: [],\n  // },\n};\n\n// ----------------------------------------- Functional component ------------------------------------- //\n\nconst PageCorporateGuarantors = () => {\n  const params = useParams();\n  const loanId = params.loanUid ?? \"\";\n  const uniqueKey = new ShortUniqueId({ length: 5 });\n\n  // ----------------- states ---------------------- //\n  // main page functionality states\n\n  const [isPageCorporateGuarantorLoading, setIsPageCorporateGuarantorLoading] =\n    useState<boolean>(true);\n\n  const [currentTabDetails, setCurrentTabDetails] = useState<any>({\n    corporateGuarantor: { name: \"\", key: \"\" },\n    index: null,\n  });\n\n  const [applicantId, setApplicantId] = useState<string>(\"\");\n  const [activeIndex, setActiveIndex] = useState<number>(0);\n  const [selectedTabIndex, setSelectedTabIndex] = useState<number>(0);\n  const [isSameActiveIndex, setIsSameActiveIndex] = useState<boolean>(false);\n  const [corporateGuarantors, setCorporateGuarantors] = useState<any>([\n    { firstName: \"New Tab\", key: uniqueKey() },\n  ]);\n  const [navigateBack, setNavigateBack] = useState(false); //NOSONAR\n  const [tabAddedFlag, setTabAddedFlag] = useState<boolean>(false);\n\n  const [dropdownOptions, setDropdownOptions] = useState<ISectionDropdownOption>({\n    SEGMENT_OPTION: [],\n    BUSINESS_CONSTITUTION_OPTION: [],\n    OWNERSHIP_OPTION: [],\n    NO_EMPLOYEE_OPTION: [],\n  });\n\n  // states for the rendering contents  ( use this instead of creating different states for each )\n  const [pageData, setPageData] = useState<IPageData>({ ...initialPageData });\n\n  const [initiateAPICallForSection, setInitiateAPICallForSection] = useState<any>({\n    orgBasicInfoAPICall: false,\n  });\n\n  // const [kycCardCount, setKycCardCount] = useState(1);\n\n  // error handling states\n  const [position, setPosition] = useState<ToastPositionType | undefined>(\"bottom-right\"); //NOSONAR\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [toastMessageVariant, setToastMessageVariant] = useState(TOAST_STYLE_TYPE.PRIMARY);\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isRemoveTabWarningVisible, setIsRemoveTabWarningVisible] = useState<boolean>(false);\n  const [isSwitchTabWarningVisible, setIsSwitchTabWarningVisible] = useState<boolean>(false);\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n\n  // --------------------- ref ---------------------------- //\n  const tabRef = useRef<any>(null);\n  const toastMessageRef = useRef(null);\n\n  const organisationDetailsRef = useRef<IOrganisationDetailsRef>(null);\n  const addressRef = useRef<IAddressRef | null>(null);\n  const addressDocUploaderRef = useRef<IDocumentUploaderRef | null>(null);\n\n  // --------------------------- global variables ---------------------- //\n\n  const menuModel = (corporateGuarantor: any, index: number) => [\n    {\n      className: \"\",\n      label: \"Remove Corporate Guarantor\",\n      command: () => {\n        setCurrentTabDetails({ corporateGuarantor: corporateGuarantor, index: index });\n        setIsRemoveTabWarningVisible(true);\n      },\n    },\n  ];\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    LifeCycle Methods: \n    --------------------------------------------------------------------------------------------------\n  */\n\n  useEffect(() => {\n    // initial empty dependency useEffect\n    // Do not add any dependency for this\n\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (corporateGuarantors[activeIndex]?.uid) {\n      resetPageDataWithUID();\n      getOrgBasicInfo();\n    }\n  }, [activeIndex, isSameActiveIndex]);\n\n  useEffect(() => {\n    if (\n      pageData?.organisationDetails?.organisationDetailsData?.uid &&\n      corporateGuarantors[activeIndex]?.uid\n    ) {\n      getOrgRegisteredAddress();\n    }\n  }, [pageData?.organisationDetails?.organisationDetailsData]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      // @ts-ignore: will be fixed in future\n      toastMessageRef?.current?.showFunction();\n    }\n  }, [toastMessage, toastMessageVariant, triggerToast]);\n\n  useEffect(() => {\n    if (corporateGuarantors[activeIndex]?.uid && !isPageCorporateGuarantorLoading) {\n      getOrgBasicInfo();\n    }\n  }, [isPageCorporateGuarantorLoading, initiateAPICallForSection.orgBasicInfoAPICall]);\n\n  useEffect(() => {\n    handleTabChange({ index: corporateGuarantors.length - 1 });\n  }, [tabAddedFlag]);\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    Ref: For creating and returning properties\n    --------------------------------------------------------------------------------------------------\n  */\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    Service Calls: For Getting Data from service/API\n    --------------------------------------------------------------------------------------------------\n  */\n\n  const getApplicantId = async () => {\n    try {\n      const res = await ApplicantService.getApplicantInfo(0, 20, APPLICANT_TYPE.PRIMARY, loanId);\n      if (validateGetAPIResponse(res) && !!res.data?.totalRecords) {\n        setApplicantId(res.data?.results?.[0]?.uid);\n        return res.data?.results?.[0]?.uid ?? \"\";\n      }\n    } catch (err) {\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const getCorporateGuarantorList = async (initiateAPICallFor?: string, callbackFunction?: any) => {\n    try {\n      const res = await ApplicantService.getApplicantInfo(\n        0,\n        20,\n        APPLICANT_TYPE.CORPORATE_GUARANTOR,\n        loanId\n      );\n      if (validateGetAPIResponse(res) && !!res.data?.totalRecords) {\n        const results: any[] = res.data?.results?.map((item: any, index: number) => {\n          if (!item?.firstName && !item.lastName) {\n            return { ...item, firstName: `Cor-Gaur... ${index + 1}` };\n          }\n\n          return { ...item };\n        });\n\n        setCorporateGuarantors(results);\n        setIsPageCorporateGuarantorLoading(false);\n\n        if (initiateAPICallFor === \"ORG_BASIC_INFO\") {\n          setInitiateAPICallForSection((prevState: any) => {\n            return { ...prevState, orgBasicInfoAPICall: !prevState.orgBasicInfoAPICall };\n          });\n        }\n\n        if (callbackFunction) {\n          callbackFunction(results);\n        }\n      } else {\n        updateEmptyCorporateGuarantors();\n        setIsPageCorporateGuarantorLoading(false);\n      }\n    } catch (err) {\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const getOrgBasicInfo = async (isIgnoreLoader?: boolean) => {\n    const activeCorporateGuarantorObj = corporateGuarantors[activeIndex];\n\n    if (!isIgnoreLoader) {\n      setPageData((prev: IPageData) => ({\n        ...prev,\n        organisationDetails: {\n          ...prev.organisationDetails,\n          isOrganisationDetailsLoading: true,\n        },\n      }));\n    }\n\n    try {\n      const res = await BasicInformation.getCorporateBasicInfo(activeCorporateGuarantorObj?.uid);\n      if (validateGetAPIResponse(res)) {\n        setPageData((prev: IPageData) => ({\n          ...prev,\n          organisationDetails: {\n            ...prev.organisationDetails,\n            organisationDetailsData: updateOrganisationBasicInfo(res?.data),\n            isOrganisationDetailsLoading: false,\n          },\n        }));\n      } else {\n        setPageData((prev: IPageData) => ({\n          ...prev,\n          organisationDetails: {\n            ...prev.organisationDetails,\n            isOrganisationDetailsLoading: false,\n          },\n        }));\n      }\n    } catch (err) {\n      setErrorMessage(parseStandardAPIErrorMessage(err));\n    }\n  };\n\n  const getOrgRegisteredAddress = async (isIgnoreLoader?: boolean) => {\n    const activeCorporateGuarantorObj = corporateGuarantors[activeIndex];\n\n    if (!isIgnoreLoader) {\n      setPageData((prev: IPageData) => ({\n        ...prev,\n        addressInfo: {\n          ...prev.addressInfo,\n          isAddressLoading: true,\n        },\n      }));\n    }\n\n    if (loanId && activeCorporateGuarantorObj?.uid) {\n      try {\n        const res = await AddressService.getOrgRegisteredAddress(\n          loanId,\n          activeCorporateGuarantorObj?.uid\n        );\n        if (validateGetAPIResponse(res)) {\n          setPageData((prev: IPageData) => ({\n            ...prev,\n            addressInfo: {\n              ...prev.addressInfo,\n              isAddressLoading: false,\n              address: updateAddressData(res.data),\n              isSameAsRegGSTAddress: res?.data?.isSameAsRegisteredGstAddress ?? false,\n            },\n          }));\n        } else {\n          setPageData((prev: IPageData) => ({\n            ...prev,\n            addressInfo: {\n              ...prev.addressInfo,\n              isAddressLoading: false,\n            },\n          }));\n        }\n      } catch (error) {\n        setErrorMessage(parseStandardAPIErrorMessage(error));\n      }\n    }\n  };\n\n  const getSegmentOptions = async () => {\n    const start = 0;\n    const limit = 200;\n    await StaticMasterDataService.getAll(\n      start,\n      limit,\n      `staticMasterType.code=CORPORATE_SEGMENT`\n    ).then((res: any) => {\n      if (validateGetAPIResponse(res)) {\n        setDropdownOptions((prevState: any) => {\n          return {\n            ...prevState,\n            SEGMENT_OPTION: [...(res.data.results ?? [])],\n          };\n        });\n      } else {\n        console.log(\"error\");\n      }\n    });\n  };\n\n  const getBusinessConstitutionOptions = async () => {\n    await StaticMasterDataService.getAll(\n      0,\n      10,\n      `staticMasterType.code=BUSINESS_CONSTITUTION`\n    ).then((res: any) => {\n      if (validateGetAPIResponse(res)) {\n        setDropdownOptions((prevState: any) => {\n          return {\n            ...prevState,\n            BUSINESS_CONSTITUTION_OPTION: [...(res.data.results ?? [])],\n          };\n        });\n      } else {\n        console.log(\"error\");\n      }\n    });\n  };\n\n  const getOwnerShipOptions = async () => {\n    await StaticMasterDataService.getAll(\n      0,\n      10,\n      `staticMasterType.code=OWNERSHIP_OF_BUSINESS_PREMISES`\n    ).then((res: any) => {\n      if (validateGetAPIResponse(res)) {\n        setDropdownOptions((prevState: any) => {\n          return {\n            ...prevState,\n            OWNERSHIP_OPTION: [...(res.data.results ?? [])],\n          };\n        });\n      } else {\n        console.log(\"error\");\n      }\n    });\n  };\n\n  const getNoOfEmp = async () => {\n    await StaticMasterDataService.getAll(\n      0,\n      10,\n      `staticMasterType.code=NO_OF_EMPLOYEES`\n    ).then((res: any) => {\n      if (validateGetAPIResponse(res)) {\n        setDropdownOptions((prevState: any) => {\n          return {\n            ...prevState,\n            NO_EMPLOYEE_OPTION: [...(res.data.results ?? [])],\n          };\n        });\n      } else {\n        console.log(\"error\");\n      }\n    });\n  };\n\n  // const getAllSavedKycDocuments = async (\n  //   corporateGuarantorId: string,\n  //   isIgnoreLoader?: boolean\n  // ) => {\n  //   if (!isIgnoreLoader) {\n  //     setPageData((prev: IPageData) => ({\n  //       ...prev,\n  //       kycDocuments: {\n  //         ...prev.kycDocuments,\n  //         isKycLoading: true,\n  //       },\n  //     }));\n  //   }\n\n  //   try {\n  //     const res = await KYCService.getKycDocument(loanId, corporateGuarantorId);\n  //     if (validateGetAPIResponse(res)) {\n  //       const { data: savedItems } = res;\n  //       const kycDocuments: IKycDocumentCardListInfo[] = [];\n  //       const savedDocsName: string[] = [];\n\n  //       //get the section information for each saved doc\n  //       const getAllSectionsInfo = (sections: any[]) => {\n  //         const sectionsInfo = sections.map((section) => {\n  //           return {\n  //             sectionUid: section.uid ?? \"\",\n  //             fileName: section.fileName ?? \"\",\n  //             fileType: section.fileType ?? \"\",\n  //             sectionType: section.smDocSectionType ?? \"\",\n  //             url: section.url,\n  //           };\n  //         });\n  //         return sectionsInfo;\n  //       };\n\n  //       //iterating through each saved record to prepare template list object\n  //       for (const savedItem in savedItems) {\n  //         kycDocuments.push({\n  //           listId: savedItem,\n  //           uid: savedItem,\n  //           docName: savedItems[savedItem]?.[0].kyc?.docType?.code ?? \"\",\n  //           docNo: savedItems[savedItem]?.[0].kyc?.docNo ?? \"\",\n  //           maskedDocNo: savedItems[savedItem]?.[0].kyc?.maskedDocNo ?? \"\",\n  //           dob: savedItems[savedItem]?.[0].kyc?.dob ?? \"\",\n  //           docSections: getAllSectionsInfo(savedItems[savedItem]),\n  //           isVerified: savedItems[savedItem]?.[0].kyc?.isVerified ?? false,\n  //         });\n\n  //         savedDocsName.push(savedItems[savedItem]?.[0].kyc?.docType?.code ?? \"\");\n  //       }\n\n  //       if (kycDocuments.length) {\n  //         setPageData((prev: IPageData) => {\n  //           return {\n  //             ...prev,\n  //             kycDocuments: {\n  //               ...prev.kycDocuments,\n  //               kycDocList: [...kycDocuments],\n  //               uniqueKycCardTracker: [...savedDocsName],\n  //               isKycLoading: false,\n  //             },\n  //           };\n  //         });\n  //       } else {\n  //         setPageData((prev: IPageData) => {\n  //           return {\n  //             ...prev,\n  //             kycDocuments: {\n  //               ...prev.kycDocuments,\n  //               isKycLoading: false,\n  //             },\n  //           };\n  //         });\n  //       }\n  //     }\n  //   } catch (err) {\n  //     setPageData((prev: IPageData) => {\n  //       return {\n  //         ...prev,\n  //         kycDocuments: {\n  //           ...prev.kycDocuments,\n  //           isKycLoading: false,\n  //         },\n  //       };\n  //     });\n  //     setErrorMessage(parseStandardAPIErrorMessage(err));\n  //   }\n  // };\n\n  // const getSavedKycDocuments = async (coApplicantId: string) => {\n  //   try {\n  //     const res = await KYCService.getKycDocument(loanId, coApplicantId);\n  //     if (validateGetAPIResponse(res)) {\n  //       const { data } = res;\n  //       return data;\n  //     }\n  //   } catch (err) {\n  //     setErrorMessage(parseStandardAPIErrorMessage(err));\n  //   }\n  // };\n\n  // const getSectionsByDocumentUid = async (uid: string, coApplicantId: string) => {\n  //   const savedDocuments = await getSavedKycDocuments(coApplicantId);\n  //   const sections = savedDocuments[uid];\n  //   return sections;\n  // };\n\n  /*\n    --------------------------------------------------------------------------------------------------\n    Handlers: Event handler for onChange, onBlur etc\n    --------------------------------------------------------------------------------------------------\n  */\n\n  const handleTabChange = (e: any) => {\n    // extra interface is added\n    type ExtendedOrganisationDetailsData = IOrganisationDetailsData & {\n      loanDocumentsProof?: Record<string, any>;\n    };\n\n    let orgBasicInfoData: ExtendedOrganisationDetailsData | undefined =\n      organisationDetailsRef?.current?.getData();\n\n    // Delete the specified keys from the object\n    if (orgBasicInfoData) {\n      orgBasicInfoData = {\n        ...orgBasicInfoData,\n        isActive: undefined,\n        uid: undefined,\n        loanDocuments: [],\n        loanDocumentsProof: {},\n      };\n    }\n\n    if (\n      e.index !== activeIndex &&\n      !corporateGuarantors?.[activeIndex]?.uid &&\n      checkDataHasValue(orgBasicInfoData)\n    ) {\n      setIsSwitchTabWarningVisible(true);\n      setSelectedTabIndex(e.index);\n    } else if (e.index !== activeIndex) {\n      resetPageData();\n      setActiveIndex(e.index);\n    }\n  };\n\n  const handleNavigateTab = () => {\n    resetPageData();\n    setActiveIndex(selectedTabIndex);\n    setIsSwitchTabWarningVisible(false);\n  };\n\n  // const handleAadharVerificationStatus = () => {\n  //   setPageData((prevState: IPageData) => {\n  //     return {\n  //       ...prevState,\n  //       kycDocuments: {\n  //         ...prevState.kycDocuments,\n  //         aadharVerificationStatus: {\n  //           verified: false,\n  //           failedToVerify: false,\n  //         },\n  //       },\n  //     };\n  //   });\n  // };\n\n  /*\n    -----------------------------------------------------------------------------------------------\n    on-Handlers: Event handler for onClick, onToggle etc\n    -----------------------------------------------------------------------------------------------\n  */\n\n  const onSaveOrganisationDetails = async () => {\n    const data: IOrganisationDetailsData | undefined = organisationDetailsRef?.current?.save();\n\n    if (data) {\n      const payload = enrichOrganisationBasicInfo(\n        data,\n        loanId,\n        applicantId,\n        APPLICANT_TYPE.CORPORATE_GUARANTOR\n      );\n\n      if (data.uid) {\n        try {\n          const res: any = await BasicInformation.updateCorporateBasicInfo(payload);\n          if (validatePutAPIResponse(res)) {\n            setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setTriggerToast(!triggerToast);\n            organisationDetailsRef?.current?.onSaveSuccess();\n\n            getCorporateGuarantorList(\"ORG_BASIC_INFO\", (itemList: any) => {\n              if (itemList.length - 1 < activeIndex) {\n                setActiveIndex(itemList?.length - 1);\n              }\n            });\n          }\n        } catch (error) {\n          setErrorMessage(parseStandardAPIErrorMessage(error));\n        }\n      } else {\n        try {\n          const res: any = await BasicInformation.createCorporateBasicInfo(payload);\n          if (validatePostAPIResponse(res)) {\n            setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setTriggerToast(!triggerToast);\n\n            getCorporateGuarantorList(\"ORG_BASIC_INFO\", (itemList: any) => {\n              if (itemList.length - 1 < activeIndex) {\n                setActiveIndex(itemList?.length - 1);\n              }\n            });\n          }\n        } catch (error) {\n          console.log(error);\n          setErrorMessage(parseStandardAPIErrorMessage(error));\n        }\n      }\n    }\n  };\n\n  const onEditAddressInfo = () => {\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        addressInfo: {\n          ...prevState.addressInfo,\n          addressInfoPageMode: PAGE_MODE.CREATE,\n        },\n      };\n    });\n  };\n\n  const onCancelAddressInfo = () => {\n    addressRef?.current?.resetValidator();\n    addressDocUploaderRef?.current?.resetValidator();\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        addressInfo: {\n          ...prevState.addressInfo,\n          addressInfoPageMode: PAGE_MODE.VIEW,\n        },\n      };\n    });\n  };\n\n  const onSaveAddress = async (corporateGuarantorId: string) => {\n    const data = addressRef?.current?.save();\n    const uploadedDocsInfo = addressDocUploaderRef?.current?.getUploadedData();\n\n    if (!data || !uploadedDocsInfo) {\n      return Promise.resolve(true);\n    }\n\n    if (data && uploadedDocsInfo) {\n      const payload = enrichOrgRegisteredAddress(\n        {\n          ...data,\n          uid: pageData.addressInfo?.address?.uid,\n          isSameAsRegGSTAddress: pageData.addressInfo?.isSameAsRegGSTAddress,\n          addressDocumentsInfo: uploadedDocsInfo ?? {},\n        },\n        loanId,\n        corporateGuarantorId,\n        APPLICANT_TYPE.CORPORATE_GUARANTOR\n      );\n      if (pageData.addressInfo?.address?.uid) {\n        return onUpdateOrgRegisteredAddress(payload);\n      } else {\n        return onCreateOrgRegisteredAddress(payload);\n      }\n    }\n  };\n\n  const onUpdateOrgRegisteredAddress = async (payload: any) => {\n    return AddressService.updateOrgRegisteredAddress(payload)\n      .then((res) => {\n        if (validatePutAPIResponse(res)) {\n          getOrgRegisteredAddress();\n          setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n          setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n          setTriggerToast(!triggerToast);\n          setNavigateBack(true);\n          setPageData((previous) => ({\n            ...previous,\n            addressInfo: { ...previous.addressInfo, addressInfoPageMode: PAGE_MODE.VIEW },\n          }));\n        }\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n\n  const onCreateOrgRegisteredAddress = async (payload: any) => {\n    return AddressService.createOrgRegisteredAddress(payload)\n      .then((res) => {\n        if (validatePostAPIResponse(res)) {\n          getOrgRegisteredAddress();\n          setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n          setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n          setTriggerToast(!triggerToast);\n          setNavigateBack(true);\n          setPageData((previous) => ({\n            ...previous,\n            addressInfo: { ...previous.addressInfo, addressInfoPageMode: PAGE_MODE.VIEW },\n          }));\n        }\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n\n  const onAddMoreTabs = () => {\n    setCorporateGuarantors((prevState: any[]) => [\n      ...prevState,\n      {\n        firstName: `New Tab`,\n        key: uniqueKey(),\n      },\n    ]);\n\n    setTabAddedFlag((prevState: boolean) => !prevState);\n  };\n\n  const onDeleteTab = async (corporateGuarantor: any, index: any) => {\n    if (!corporateGuarantor?.uid) {\n      if (corporateGuarantors.length === 1) {\n        updateEmptyCorporateGuarantors();\n        setIsRemoveTabWarningVisible(false);\n        resetPageData();\n        return;\n      }\n\n      removeDeletedCorporateGuarantor(index);\n      setIsRemoveTabWarningVisible(false);\n    } else {\n      try {\n        const res = await ApplicantService.deleteApplicantInfo(corporateGuarantor?.uid);\n        if (validatePutAPIResponse(res)) {\n          setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n          setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n          setTriggerToast(!triggerToast);\n\n          if (corporateGuarantors.length === 1) {\n            updateEmptyCorporateGuarantors();\n            setIsRemoveTabWarningVisible(false);\n            resetPageData();\n            return;\n          }\n\n          removeDeletedCorporateGuarantor(index);\n          setIsRemoveTabWarningVisible(false);\n        }\n      } catch (error) {\n        setErrorMessage(parseStandardAPIErrorMessage(error));\n        setIsRemoveTabWarningVisible(false);\n      }\n    }\n  };\n\n  // const onLazyLoadKycDocuments = (corporateGuarantorId: string) => {\n  //   if (corporateGuarantorId) {\n  //     getAllSavedKycDocuments(corporateGuarantorId);\n  //   }\n  // };\n\n  //add a kyc document in list\n  // const onAddDocument = () => {\n  //   const newDocumentList = {\n  //     listId: `kyc-card-${kycCardCount + 1}`,\n  //     uid: \"\",\n  //     docName: \"\",\n  //     docNo: \"\",\n  //     maskedDocNo: \"\",\n  //     dob: \"\",\n  //     docSections: [],\n  //     isVerified: false,\n  //   };\n  //   setKycCardCount((prevCount) => prevCount + 1);\n  //   setPageData((prev: IPageData) => {\n  //     return {\n  //       ...prev,\n  //       kycDocuments: {\n  //         ...prev.kycDocuments,\n  //         kycDocList: [...prev.kycDocuments.kycDocList, newDocumentList],\n  //         populateOcr: {\n  //           uid: \"\",\n  //           success: false,\n  //           failed: false,\n  //         },\n  //       },\n  //     };\n  //   });\n  // };\n\n  //update the unique kyc card name tracker list\n  // const updateUniqueTrackerList = (list: string[]) => {\n  //   setPageData((prev: IPageData) => {\n  //     return {\n  //       ...prev,\n  //       kycDocuments: {\n  //         ...prev.kycDocuments,\n  //         uniqueKycCardTracker: [...list],\n  //       },\n  //     };\n  //   });\n  // };\n\n  //delete kyc doc card in list\n  // const deleteKycDocInList = (itemIndex?: number) => {\n  //   const {\n  //     kycDocuments: { kycDocList },\n  //   } = pageData;\n  //   const newKycDocList = kycDocList.filter((_, index) => index !== itemIndex);\n  //   setPageData((prev: IPageData) => {\n  //     return {\n  //       ...prev,\n  //       kycDocuments: {\n  //         ...prev.kycDocuments,\n  //         kycDocList: [...newKycDocList],\n  //       },\n  //     };\n  //   });\n  // };\n\n  // const onSaveKycDocument = async (\n  //   documentInfo: IKycDocuments,\n  //   corporateGuarantorId: string,\n  //   itemIndex: number\n  // ) => {\n  //   const {\n  //     kycDocuments: { kycDocList },\n  //   } = pageData;\n\n  //   //update request\n  //   if (documentInfo.uid) {\n  //     const payload = enrichUpdateKycDocument(\n  //       loanId,\n  //       corporateGuarantorId,\n  //       documentInfo,\n  //       await getSectionsByDocumentUid(documentInfo?.uid, corporateGuarantorId),\n  //       APPLICANT_TYPE.CORPORATE_GUARANTOR\n  //     );\n  //     try {\n  //       const res = await KYCService.updateKycDocument(payload, SUB_STAGE.DDE);\n  //       if (validatePutAPIResponse(res)) {\n  //         const { data } = res;\n  //         const parsedOcrMeta = data.meta ? JSON.parse(data.meta) : null;\n  //         const getMaskedUrlForSection = (sectionType: string) => {\n  //           if (sectionType === DOCUMENT_SECTION.DOCUMENT_SECTIONS_FRONT_PAGE)\n  //             return parsedOcrMeta?.ocrResponse?.frontMaskedImageUrl ?? \"\";\n  //           else if (sectionType === DOCUMENT_SECTION.DOCUMENT_SECTIONS_BACK_PAGE)\n  //             return parsedOcrMeta?.ocrResponse?.backMaskedImageUrl ?? \"\";\n  //           return \"\";\n  //         };\n\n  //         //get the section information from response\n  //         const prepareMaskedDocSections = (sections: any[]) => {\n  //           if (data.docType?.code === DOCUMENT_TYPE.AADHAR_CARD) {\n  //             const sectionsInfo = sections.map((section) => {\n  //               return {\n  //                 sectionUid: section.uid ?? \"\",\n  //                 fileName: section.fileName ?? \"\",\n  //                 fileType: section.fileType ?? \"\",\n  //                 sectionType: section.smDocSectionType ?? \"\",\n  //                 url: parsedOcrMeta\n  //                   ? getMaskedUrlForSection(section.smDocSectionType)\n  //                   : section.url,\n  //               };\n  //             });\n  //             return sectionsInfo;\n  //           }\n  //           return sections;\n  //         };\n\n  //         const updatedList = kycDocList.map((item) => {\n  //           if (item.uid === data.uid) {\n  //             return {\n  //               ...item,\n  //               docName: data.docType?.code ?? \"\",\n  //               docNo: data.docNo,\n  //               maskedDocNo: data.maskedDocNo ?? \"\",\n  //               docSections: prepareMaskedDocSections(data.kycDocuments),\n  //               dob: data.dob ?? \"\",\n  //             };\n  //           }\n  //           return item;\n  //         });\n\n  //         setPageData((prev) => {\n  //           return {\n  //             ...prev,\n  //             kycDocuments: {\n  //               ...prev.kycDocuments,\n  //               kycDocList: [...updatedList],\n  //             },\n  //           };\n  //         });\n\n  //         setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n  //         setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n  //         setTriggerToast(!triggerToast);\n  //       }\n  //     } catch (err) {\n  //       setErrorMessage(parseStandardAPIErrorMessage(err));\n  //     }\n  //   }\n\n  //   // create request\n  //   else {\n  //     const payload = enrichSaveKycDocument(\n  //       loanId,\n  //       corporateGuarantorId,\n  //       documentInfo,\n  //       APPLICANT_TYPE.CORPORATE_GUARANTOR\n  //     );\n  //     try {\n  //       const res = await KYCService.saveKycDocument(payload, SUB_STAGE.DDE);\n  //       if (validatePostAPIResponse(res)) {\n  //         const { data } = res;\n  //         const parsedOcrMeta = data.meta ? JSON.parse(data.meta) : null;\n  //         const getMaskedUrlForSection = (sectionType: string) => {\n  //           if (sectionType === DOCUMENT_SECTION.DOCUMENT_SECTIONS_FRONT_PAGE)\n  //             return parsedOcrMeta?.ocrResponse?.frontMaskedImageUrl ?? \"\";\n  //           else if (sectionType === DOCUMENT_SECTION.DOCUMENT_SECTIONS_BACK_PAGE)\n  //             return parsedOcrMeta?.ocrResponse?.backMaskedImageUrl ?? \"\";\n  //           return \"\";\n  //         };\n\n  //         //get the section information from response\n  //         const prepareMaskedDocSections = (sections: any[]) => {\n  //           if (data.docType?.code === DOCUMENT_TYPE.AADHAR_CARD) {\n  //             const sectionsInfo = sections.map((section) => {\n  //               return {\n  //                 sectionUid: section.uid ?? \"\",\n  //                 fileName: section.fileName ?? \"\",\n  //                 fileType: section.fileType ?? \"\",\n  //                 sectionType: section.smDocSectionType ?? \"\",\n  //                 url: parsedOcrMeta\n  //                   ? getMaskedUrlForSection(section.smDocSectionType)\n  //                   : section.url,\n  //               };\n  //             });\n  //             return sectionsInfo;\n  //           }\n  //           return sections;\n  //         };\n\n  //         const updatedList = kycDocList.map((item, idx) => {\n  //           if (idx === itemIndex) {\n  //             return {\n  //               ...item,\n  //               uid: data.uid ?? \"\",\n  //               docName: data.docType?.code ?? \"\",\n  //               docNo: data.docNo ?? \"\",\n  //               maskedDocNo: data.maskedDocNo ?? \"\",\n  //               docSections: prepareMaskedDocSections(data.kycDocuments),\n  //               dob: data.dob ?? \"\",\n  //             };\n  //           }\n  //           return item;\n  //         });\n\n  //         setPageData((prev) => {\n  //           return {\n  //             ...prev,\n  //             kycDocuments: {\n  //               ...prev.kycDocuments,\n  //               kycDocList: [...updatedList],\n  //               savedDocuments: [...prev.kycDocuments.savedDocuments, data.docType?.code],\n  //               uniqueKycCardTracker: prepareNewKycCardTracker(),\n  //             },\n  //           };\n  //         });\n\n  //         setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n  //         setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n  //         setTriggerToast(!triggerToast);\n  //       }\n  //     } catch (err) {\n  //       setErrorMessage(parseStandardAPIErrorMessage(err));\n  //     }\n  //   }\n  // };\n\n  // const onRemoveKycDocument = async (\n  //   documentInfo: IKycDocuments,\n  //   corporateGuarantorId: string,\n  //   itemIndex?: number\n  // ) => {\n  //   if (documentInfo.uid) {\n  //     const payload = enrichUpdateKycDocument(\n  //       loanId,\n  //       corporateGuarantorId,\n  //       documentInfo,\n  //       await getSectionsByDocumentUid(documentInfo?.uid, corporateGuarantorId),\n  //       APPLICANT_TYPE.CORPORATE_GUARANTOR\n  //     );\n\n  //     try {\n  //       const res = await KYCService.updateKycDocument(payload, SUB_STAGE.DDE);\n  //       if (validatePutAPIResponse(res)) {\n  //         if (itemIndex !== undefined) {\n  //           deleteKycDocInList(itemIndex);\n  //         }\n  //         setToastMessageVariant(TOAST_STYLE_TYPE.QUATERNARY);\n  //         setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.REMOVED);\n  //         setTriggerToast(!triggerToast);\n  //       }\n  //     } catch (err) {\n  //       setErrorMessage(parseStandardAPIErrorMessage(err));\n  //     }\n  //   }\n  // };\n\n  // const onPopulateWithOcr = async (\n  //   documentInfo: IKycDocuments,\n  //   corporateGuarantorId: string,\n  //   itemIndex: number\n  // ) => {\n  //   const {\n  //     kycDocuments: { kycDocList, populateOcr },\n  //   } = pageData;\n  //   const payload = enrichPopulateDocWithOcr(\n  //     loanId,\n  //     corporateGuarantorId,\n  //     populateOcr.uid,\n  //     documentInfo,\n  //     APPLICANT_TYPE.CORPORATE_GUARANTOR\n  //   );\n  //   try {\n  //     const res = await KYCService.populateKycDocument(payload, SUB_STAGE.DDE);\n  //     if (validatePostAPIResponse(res)) {\n  //       const { data } = res;\n\n  //       const updatedList = kycDocList.map((item, idx) => {\n  //         if (idx === itemIndex) {\n  //           return {\n  //             ...item,\n  //             uid: data.uid,\n  //             docName: data.docType?.code ?? \"\",\n  //             docNo: data.docNo ?? \"\",\n  //             dob: data.dob ?? \"\",\n  //           };\n  //         }\n  //         return item;\n  //       });\n\n  //       setPageData((prev) => {\n  //         return {\n  //           ...prev,\n  //           kycDocuments: {\n  //             ...prev.kycDocuments,\n  //             kycDocList: [...updatedList],\n  //             uniqueKycCardTracker: prepareNewKycCardTracker(),\n  //             populateOcr: {\n  //               ...prev.kycDocuments.populateOcr,\n  //               uid: data.uid ?? \"\",\n  //               success: true,\n  //               failed: false,\n  //             },\n  //           },\n  //         };\n  //       });\n  //     }\n  //   } catch (err) {\n  //     setPageData((prev) => {\n  //       return {\n  //         ...prev,\n  //         kycDocuments: {\n  //           ...prev.kycDocuments,\n  //           populateOcr: {\n  //             ...prev.kycDocuments.populateOcr,\n  //             success: false,\n  //             failed: true,\n  //           },\n  //         },\n  //       };\n  //     });\n  //     setErrorMessage(parseStandardAPIErrorMessage(err));\n  //   }\n  // };\n\n  // const onVerifyAadhar = async (\n  //   documentInfo: IKycDocuments,\n  //   aadharOtpInfo: IAadharOTP,\n  //   corporateGuarantorId: string,\n  //   itemIndex: number,\n  //   uid: string\n  // ) => {\n  //   const payload = enrichAadharValidation(\n  //     loanId,\n  //     corporateGuarantorId,\n  //     documentInfo,\n  //     aadharOtpInfo,\n  //     APPLICANT_TYPE.CORPORATE_GUARANTOR,\n  //     uid\n  //   );\n\n  //   const {\n  //     kycDocuments: { kycDocList },\n  //   } = pageData;\n\n  //   try {\n  //     const res = await KYCService.validateAadhar(payload, SUB_STAGE.DDE);\n  //     if (validatePostAPIResponse(res)) {\n  //       const { data } = res;\n  //       const updatedList = kycDocList.map((item, idx) => {\n  //         if (idx === itemIndex) {\n  //           return {\n  //             ...item,\n  //             uid: data.uid ?? \"\",\n  //             docName: data.docType?.code ?? \"\",\n  //             docNo: data.docNo ?? \"\",\n  //             maskedDocNo: data.maskedDocNo ?? \"\",\n  //             dob: data.dob ?? \"\",\n  //           };\n  //         }\n  //         return item;\n  //       });\n\n  //       setPageData((prev) => {\n  //         return {\n  //           ...prev,\n  //           kycDocuments: {\n  //             ...prev.kycDocuments,\n  //             kycDocList: [...updatedList],\n  //             uniqueKycCardTracker: prepareNewKycCardTracker(),\n  //             aadharVerificationStatus: {\n  //               ...prev.kycDocuments.aadharVerificationStatus,\n  //               verified: true,\n  //             },\n  //           },\n  //         };\n  //       });\n  //     }\n  //   } catch (err) {\n  //     setPageData((prev) => {\n  //       return {\n  //         ...prev,\n  //         kycDocuments: {\n  //           ...prev.kycDocuments,\n  //           aadharVerificationStatus: {\n  //             ...prev.kycDocuments.aadharVerificationStatus,\n  //             failedToVerify: true,\n  //           },\n  //         },\n  //       };\n  //     });\n  //     setErrorMessage(parseStandardAPIErrorMessage(err));\n  //   }\n  // };\n\n  /* \n    -------------------------------------------------------------------------------------------------\n    Helper Functions:\n    -------------------------------------------------------------------------------------------------\n  */\n\n  const init = () => {\n    getApplicantId();\n    getCorporateGuarantorList();\n    dropdownAPICallForOrgBasicInfo();\n  };\n\n  const removeDeletedCorporateGuarantor = (index: number) => {\n    const updatedCorporateGuarantors = [...corporateGuarantors];\n    if (index >= 0 && index < corporateGuarantors.length) {\n      // Check if the findIndexOfCorporateGuarantor is valid\n\n      updatedCorporateGuarantors.splice(index, 1); // Remove 1 element at the specified index\n      setCorporateGuarantors(updatedCorporateGuarantors);\n\n      if (index + 1 === corporateGuarantors.length - 1 && activeIndex === index + 1) {\n        //\n      } else if (\n        (index === corporateGuarantors.length - 1 && activeIndex === index) ||\n        (index !== corporateGuarantors.length - 1 &&\n          activeIndex === corporateGuarantors.length - 1) ||\n        index < activeIndex\n      ) {\n        setTimeout(() => {\n          setActiveIndex(activeIndex - 1);\n        }, 5);\n      } else if (index === activeIndex) {\n        resetPageData();\n        setIsSameActiveIndex((prevState: boolean) => !prevState);\n      }\n    }\n  };\n\n  const updateEmptyCorporateGuarantors = () => {\n    setCorporateGuarantors([\n      {\n        firstName: \"New Tab\",\n        key: uniqueKey(),\n      },\n    ]);\n  };\n\n  const dropdownAPICallForOrgBasicInfo = () => {\n    getSegmentOptions();\n    getBusinessConstitutionOptions();\n    getOwnerShipOptions();\n    getNoOfEmp();\n  };\n\n  const resetPageData = () => {\n    setPageData({ ...initialPageData });\n  };\n\n  const resetPageDataWithUID = () => {\n    setPageData((prevState: IPageData) => {\n      return {\n        ...prevState,\n        addressInfo: {\n          ...prevState.addressInfo,\n          isAddressLoading: true,\n        },\n      };\n    });\n  };\n\n  // const prepareNewKycCardTracker = () => {\n  //   const {\n  //     kycDocuments: { uniqueKycCardTracker },\n  //   } = pageData;\n  //   const docNameArr = [...uniqueKycCardTracker];\n  //   //remove the last doc name in the array to avoid docName duplication\n  //   docNameArr.splice(docNameArr.length - 1, 1);\n  //   return [...docNameArr];\n  // };\n\n  const getOCRRelatedData = (corporateGuarantorId: string) => {\n    return {\n      ocrStageName: OCR_STAGE_NAMES.LOGIN,\n      ocrSubstageName: SUB_STAGE.DDE,\n      ocrPayloadData: {\n        loanUid: loanId,\n        applicant: {\n          uid: corporateGuarantorId,\n        },\n      },\n    };\n  };\n\n  /* \n    ------------------------------------------------------------------------------------------------\n    Sectional Render Functions: For Sub components / section wise renders\n    ------------------------------------------------------------------------------------------------\n  */\n\n  const renderOrganisationDetails = (corporateGuarantor: any) => {\n    const { isOrganisationDetailsLoading, organisationDetailsData } = pageData.organisationDetails;\n\n    return (\n      <OrganisationDetails\n        data={organisationDetailsData}\n        dropDownOptions={dropdownOptions}\n        ref={organisationDetailsRef}\n        isLoading={isOrganisationDetailsLoading}\n        pageType={PAGE_TYPE.CORPORATE_GUARANTOR}\n        documentCategory={DOCUMENT_CATEGORY.DOCUMENT_CATEGORY_BUSINESS_PROOF}\n        ocrRelatedData={getOCRRelatedData(corporateGuarantor?.uid)}\n        onSaveOrganisationDetails={onSaveOrganisationDetails}\n      />\n    );\n  };\n\n  const renderAddress = (corporateGuarantor: any) => {\n    const { isAddressLoading, addressInfoPageMode, address } = pageData.addressInfo;\n\n    return isAddressLoading ? (\n      <SkeletonCustom height=\"19.375rem\" width=\"100%\" borderRadius=\"8px\" animation=\"wave\" />\n    ) : (\n      <SaveComponent\n        disabled={!corporateGuarantor?.uid}\n        title={\"subHeading.dde.red.address.organisation\"}\n        pageMode={addressInfoPageMode}\n        onEdit={onEditAddressInfo}\n        onSave={() => onSaveAddress(corporateGuarantor?.uid)}\n        onCancel={onCancelAddressInfo}\n      >\n        <Address\n          ref={addressRef}\n          variant={VARIANTS.SECONDARY}\n          pageMode={addressInfoPageMode}\n          data={address}\n        >\n          <TextData\n            label={\"label.text.address.proof\"}\n            value=\"Attach Documents (PDF, JPG, JPEG or PNG)\"\n            titleClass=\"text-primary-sideBarBgColor text-sm font-bold mb-1\"\n          />\n          <DocumentUploader\n            ref={addressDocUploaderRef}\n            mode={addressInfoPageMode}\n            savedDocument={address.loanDocuments?.[0] ? address.loanDocuments[0] : {}}\n            queryParamForDocList={DOCUMENT_CATEGORY.DOCUMENT_CATEGORY_ADDRESS_PROOF}\n            ocrStageName={OCR_STAGE_NAMES.LOGIN}\n            ocrSubstageName={SUB_STAGE.DDE}\n            ocrPayloadData={{\n              loanUid: loanId,\n              applicant: {\n                uid: corporateGuarantor?.uid,\n              },\n            }}\n          />\n        </Address>\n      </SaveComponent>\n    );\n  };\n\n  // const renderKycDocuments = (corporateGuarantor: any) => {\n  //   const {\n  //     isKycLoading,\n  //     kycDocList,\n  //     uniqueKycCardTracker,\n  //     populateOcr,\n  //     aadharVerificationStatus,\n  //   } = pageData.kycDocuments;\n  //   return (\n  //     <div className=\"grid grid-cols-2 gap-5\">\n  //       {kycDocList.map((list, index) => {\n  //         return (\n  //           <div key={`document-${list.listId}`}>\n  //             {\n  //               <KYCV3\n  //                 mode={!corporateGuarantor?.uid ? \"READ\" : \"EDIT\"}\n  //                 isLoading={isKycLoading}\n  //                 uid={list.uid}\n  //                 documentListIndex={index}\n  //                 docName={list.docName}\n  //                 docNo={list.docNo}\n  //                 dateOfBirth={list.dob}\n  //                 docSections={list.docSections}\n  //                 maskedDocNo={list.maskedDocNo}\n  //                 isVerified={list.isVerified}\n  //                 removeDocumentInList={deleteKycDocInList}\n  //                 cardNameList={uniqueKycCardTracker}\n  //                 handlerCardNameList={updateUniqueTrackerList}\n  //                 ocrStatus={populateOcr}\n  //                 onSave={(documentInfo: IKycDocuments, itemIndex: number) =>\n  //                   onSaveKycDocument(documentInfo, corporateGuarantor?.uid, itemIndex)\n  //                 }\n  //                 onRemove={(documentInfo: IKycDocuments, itemIndex?: number) => {\n  //                   onRemoveKycDocument(documentInfo, corporateGuarantor?.uid, itemIndex);\n  //                 }}\n  //                 onPopulate={(documentInfo: IKycDocuments, itemIndex: number) =>\n  //                   onPopulateWithOcr(documentInfo, corporateGuarantor?.uid, itemIndex)\n  //                 }\n  //                 onVerifyAadhar={(\n  //                   documentInfo: IKycDocuments,\n  //                   aadharOtpInfo: IAadharOTP,\n  //                   itemIndex: number,\n  //                   uid: string\n  //                 ) =>\n  //                   onVerifyAadhar(\n  //                     documentInfo,\n  //                     aadharOtpInfo,\n  //                     corporateGuarantor?.uid,\n  //                     itemIndex,\n  //                     uid\n  //                   )\n  //                 }\n  //                 aadharVerificationStatus={aadharVerificationStatus}\n  //                 handlerAadharVerificationStatus={handleAadharVerificationStatus}\n  //                 placeOfUpload={PLACE_OF_UPLOAD_KYC.LOGIN_CORPORATE_GUARANTORS}\n  //               />\n  //             }\n  //           </div>\n  //         );\n  //       })}\n  //     </div>\n  //   );\n  // };\n\n  const renderContent = (corporateGuarantor: any, index: any) => {\n    return (\n      <div className=\"flex flex-col gap-4\" key={corporateGuarantor?.key}>\n        <Section title=\"heading.dde.organisation.details\">\n          <>\n            {renderOrganisationDetails(corporateGuarantor)}\n\n            {renderAddress(corporateGuarantor)}\n          </>\n        </Section>\n\n        {/* <Section title={\"heading.dde.organisation.documents\"}>\n          {!corporateGuarantor?.uid ? (\n            <React.Fragment>{renderKycDocuments(corporateGuarantor)}</React.Fragment>\n          ) : (\n            <LazyLoader onLazyLoad={() => onLazyLoadKycDocuments(corporateGuarantor?.uid)}>\n              {renderKycDocuments(corporateGuarantor)}\n              <div className=\"p-5 w-full rounded-xl bg-slate-100 mt-5\">\n                <ButtonBox\n                  buttonType={BUTTON_TYPE.ICON_TEXT_ROW}\n                  customLabel={\"Add Another Document\"}\n                  onClick={onAddDocument}\n                />\n              </div>\n            </LazyLoader>\n          )}\n        </Section> */}\n      </div>\n    );\n  };\n\n  const renderCorporateGuarantorsTotal = () => {\n    return (\n      <Text\n        className=\"\"\n        label={`( ${\n          corporateGuarantors.length > 1\n            ? `${corporateGuarantors.length} Members`\n            : `${corporateGuarantors.length} Member`\n        } )`}\n      />\n    );\n  };\n\n  /* \n    --------------------------------------------------------------------------------------------------\n    render: The Main return()\n    --------------------------------------------------------------------------------------------------\n  */\n  if (isPageCorporateGuarantorLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"scrollable-tab dynamic-tab relative deleteable-header\">\n        <SimpleTab\n          showTooltip\n          enableTabMenu\n          scrollable\n          tabHeaderMenuModel={(corporateGuarantor: any, index: number) =>\n            menuModel(corporateGuarantor, index)\n          }\n          optionLabel={[\"firstName\", \"middleName\", \"lastName\"]}\n          optionKey={[\"uid\", \"key\"]}\n          headerClassName=\"dynamic-header\"\n          ref={tabRef}\n          activeIndex={activeIndex}\n          tabs={corporateGuarantors}\n          onTabChange={handleTabChange}\n          renderContent={renderContent}\n        />\n\n        <div className=\"absolute top-0 right-0 text-[#A3A3A3] text-xs flex justify-evenly items-center w-[15%] space-x-4 pb-2.5 border-b\">\n          {renderCorporateGuarantorsTotal()}\n\n          <div className=\"\">\n            <ButtonBox buttonType={BUTTON_TYPE.ICON_BUTTON_ADD} onClick={onAddMoreTabs} />\n          </div>\n        </div>\n      </div>\n\n      <ToastCustom\n        position={position}\n        ref={toastMessageRef}\n        toastText={toastMessage}\n        variant={toastMessageVariant}\n      />\n\n      <ErrorDialog\n        onHide={() => {\n          setShowDialogAPIError(false);\n          setErrorMessage(\"\");\n        }}\n        visible={showDialogAPIError}\n        errorMessage={errorMessage}\n      />\n\n      <WarningDialog\n        visible={isRemoveTabWarningVisible}\n        className=\"w-76 !px-14\"\n        title={\"Remove Corporate Guarantor ?\"}\n        warningMessage={`Corporate Guarantor ${currentTabDetails?.corporateGuarantor?.firstName} will be removed`}\n        onCancel={() => setIsRemoveTabWarningVisible(false)}\n        onConfirm={() => {\n          onDeleteTab(currentTabDetails?.corporateGuarantor, currentTabDetails?.index);\n        }}\n        onHide={() => {\n          //\n        }}\n      />\n\n      <WarningDialog\n        visible={isSwitchTabWarningVisible}\n        className=\"w-76 !px-14\"\n        title={\"Discard added data ?\"}\n        warningMessage={`Your data will be lost if not saved before navigating to a different tab`}\n        onCancel={() => setIsSwitchTabWarningVisible(false)}\n        onConfirm={handleNavigateTab}\n        onHide={() => {\n          //\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default PageCorporateGuarantors;\n"],"names":["initialPageData","initialOrgBasicInfoData","PAGE_MODE","PageCorporateGuarantors","loanId","useParams","uniqueKey","ShortUniqueId","isPageCorporateGuarantorLoading","setIsPageCorporateGuarantorLoading","useState","currentTabDetails","setCurrentTabDetails","applicantId","setApplicantId","activeIndex","setActiveIndex","selectedTabIndex","setSelectedTabIndex","isSameActiveIndex","setIsSameActiveIndex","corporateGuarantors","setCorporateGuarantors","navigateBack","setNavigateBack","tabAddedFlag","setTabAddedFlag","dropdownOptions","setDropdownOptions","pageData","setPageData","initiateAPICallForSection","setInitiateAPICallForSection","position","setPosition","toastMessage","setToastMessage","toastMessageVariant","setToastMessageVariant","TOAST_STYLE_TYPE","triggerToast","setTriggerToast","errorMessage","setErrorMessage","isRemoveTabWarningVisible","setIsRemoveTabWarningVisible","isSwitchTabWarningVisible","setIsSwitchTabWarningVisible","showDialogAPIError","setShowDialogAPIError","tabRef","useRef","toastMessageRef","organisationDetailsRef","addressRef","addressDocUploaderRef","menuModel","corporateGuarantor","index","useEffect","init","_a","resetPageDataWithUID","getOrgBasicInfo","_b","_c","getOrgRegisteredAddress","handleTabChange","getApplicantId","res","ApplicantService","APPLICANT_TYPE","validateGetAPIResponse","_d","_g","_f","_e","err","parseStandardAPIErrorMessage","getCorporateGuarantorList","initiateAPICallFor","callbackFunction","results","item","prevState","updateEmptyCorporateGuarantors","isIgnoreLoader","activeCorporateGuarantorObj","prev","BasicInformation","updateOrganisationBasicInfo","AddressService","updateAddressData","error","getSegmentOptions","StaticMasterDataService","getBusinessConstitutionOptions","getOwnerShipOptions","getNoOfEmp","orgBasicInfoData","checkDataHasValue","resetPageData","handleNavigateTab","onSaveOrganisationDetails","data","payload","enrichOrganisationBasicInfo","validatePutAPIResponse","STATIC_MASTER_TYPE_TOAST_TEXT","itemList","validatePostAPIResponse","onEditAddressInfo","onCancelAddressInfo","onSaveAddress","corporateGuarantorId","uploadedDocsInfo","enrichOrgRegisteredAddress","onUpdateOrgRegisteredAddress","onCreateOrgRegisteredAddress","previous","onAddMoreTabs","onDeleteTab","removeDeletedCorporateGuarantor","dropdownAPICallForOrgBasicInfo","updatedCorporateGuarantors","getOCRRelatedData","OCR_STAGE_NAMES","SUB_STAGE","renderOrganisationDetails","isOrganisationDetailsLoading","organisationDetailsData","jsx","OrganisationDetails","PAGE_TYPE","DOCUMENT_CATEGORY","renderAddress","isAddressLoading","addressInfoPageMode","address","SkeletonCustom","SaveComponent","jsxs","Address","VARIANTS","TextData","DocumentUploader","renderContent","Section","Fragment","renderCorporateGuarantorsTotal","Text","Loader","React","SimpleTab","ButtonBox","BUTTON_TYPE","ToastCustom","ErrorDialog","WarningDialog"],"mappings":"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"}