{"version":3,"file":"PageDeviationCategoryCM-9915b075.js","sources":["../../src/views/masterData/productConfiguration/productConfigurationDeviationCategory/PageDeviationCategoryCM/PageDeviationCategoryCM.tsx"],"sourcesContent":["/**\n * Author : Waseem\n * Created on : 28 June, 2023\n **/\n\n/*\n  -------------------------------------------------------\n   Imports:\n  -------------------------------------------------------\n*/\nimport ButtonBox from \"components/ButtonBox\";\nimport DatePicker from \"components/DatePicker/DatePicker\";\nimport EditableTable from \"components/EditableTable/EditableTable\";\nimport InputBox from \"components/InputBox\";\nimport InputTextArea from \"components/InputTextArea\";\nimport PageTitle from \"components/PageTitle/PageTitle\";\nimport SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport Text from \"components/Text/Text\";\nimport ToastCustom from \"components/Toast/Toast\";\nimport { RouteProps, withRouter } from \"hoc/withRouter\";\nimport { Column } from \"primereact/column\";\nimport queryString from \"query-string\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { linkProductConfiguration, linkProductConfigurationDeviationCategory } from \"routes\";\nimport Department from \"services/masterdata/OrgStruct/Department/Department\";\nimport ProductDeviationCategoryService from \"services/masterdata/ProdcutDeviationCategory/ProdcutDeviationCategory\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  convertDateToISO,\n  getStandardValidator,\n  messageReplace,\n  parseStandardAPIErrorMessage,\n  validateGetAPIResponse,\n} from \"utils/CommonUtil\";\nimport {\n  BUTTON_TYPE,\n  DROPDOWN_STYLE_TYPE,\n  INPUT_STYLE_TYPE,\n  PAGE_MODE,\n  STATIC_MASTER_TYPE_TOAST_TEXT,\n  TOAST_STYLE_TYPE,\n} from \"utils/Constant\";\n\n/*\n  -------------------------------------------------------\n  PROPS:\n  -------------------------------------------------------\n*/\n\nconst PageDeviationCategoryCM = (props: RouteProps) => {\n  /*\n    -------------------------------------------------------\n      States\n    -------------------------------------------------------\n  */\n  const [pageObj, setPageObj] = useState({\n    displayName: \"\",\n    encrypted: \"\",\n    description: \"\",\n    reasons: \"\",\n    isActive: \"\",\n  });\n  const [pageMode, setPageMode] = useState(PAGE_MODE.CREATE);\n  const initialObj = {\n    department: \"\",\n    applicableFrom: \"\",\n    applicableTo: \"\",\n    isAdded: true,\n  };\n  const isFirstRender = useRef(true);\n  const dataTableRef = useRef(null);\n  const [department, setDepartment] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const toastMessageRef = useRef(null);\n  const [isNameDuplicated, setIsNameDuplicated] = useState(false);\n  const [, forceUpdate] = useState<undefined | boolean>(undefined);\n  const [uid, setUid] = useState<string | undefined>(undefined);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [navigateBack, setNavigateBack] = useState(false);\n  const [toastMessageVariant, setToastMessageVariant] = useState(TOAST_STYLE_TYPE.PRIMARY);\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [deviationCategoryRecordsUpdated, setDeviationCategoryRecordsUpdated] = useState([]);\n  const [deviationCategoryRecordsAdded, setDeviationCategoryRecordsAdded] = useState([]);\n  const [dataTable, setDataTable] = useState({\n    limit: 10,\n    loading: false,\n    totalRecords: 0,\n    start: 0,\n    search: \"\",\n    runCustomQuery: false,\n    records: [],\n  });\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n\n  /*\n    -------------------------------------------------------\n      Hooks: useEffect\n    -------------------------------------------------------\n  */\n  useEffect(() => {\n    const parsed: {\n      mode?: string;\n      uid?: string;\n    } = queryString.parse(props.location.search);\n\n    if (parsed?.mode && parsed?.mode !== undefined) {\n      setPageMode(parsed.mode);\n    }\n    if (parsed?.uid && parsed?.uid !== undefined) {\n      setUid(parsed.uid);\n      ProductDeviationCategoryService.getDeviationCategoryInfo(parsed.uid)\n        .then((res: any) => {\n          if (validateGetAPIResponse(res)) {\n            if (res.data.length !== 0) {\n              setPageObj({\n                ...pageObj,\n                displayName: res?.data?.name ?? \"\",\n                reasons: res?.data?.reason ?? \"\",\n                description: res?.data?.description ?? \"\",\n              });\n            }\n          }\n        })\n        .catch((err) => {\n          setErrorMessage(parseStandardAPIErrorMessage(err));\n        });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (pageMode === PAGE_MODE.CREATE) {\n      // @ts-ignore :i ill do it later\n      dataTableRef?.current?.addRecords(initialObj);\n    } else {\n      // @ts-ignore :i ill do it later\n      dataTableRef?.current?.search();\n    }\n  }, [pageMode]);\n\n  useEffect(() => {\n    Department.getAll().then((res) => {\n      if (res.status === 200) {\n        setDepartment(res.data.results);\n      }\n    });\n  }, []);\n\n  /*\n    -------------------------------------------------------\n      Handlers: Event handler for onChange, onBlur etc\n    -------------------------------------------------------\n  */\n\n  const handleInputChange = (event: any) => {\n    const { name, value } = event.target;\n    setPageObj((prevPageObj) => ({\n      ...prevPageObj,\n      [name]: value,\n    }));\n  };\n\n  const renderRowClassName = (rowData: any) => {\n    if (rowData?.isInactive) {\n      return \" !bg-primary-red-200\";\n    } else if (rowData?.isAdded) {\n      return \" !bg-primary-plum-200\";\n    } else if (rowData?.isUpdated) {\n      return \" !bg-semantic-yellow-200\";\n    }\n  };\n\n  /* \n    -----------------------------------------------------------------------------------------------------------------------\n    Validators:\n    -----------------------------------------------------------------------------------------------------------------------\n  */\n\n  const validate = (e: any) => {\n    simpleValidator?.current?.showMessageFor(e?.target?.name);\n  };\n\n  const validateForm = async () => {\n    let isValid = false;\n    isValid = simpleValidator?.current?.allValid() && !isNameDuplicated;\n    if (isValid) {\n      return isValid;\n    } else {\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n\n  /* \n      -------------------------------------------------------\n        ButtonClick Functions:\n      -------------------------------------------------------\n    */\n  const prepareToSave = () => {\n    //@ts-ignore :i ill do it later\n    const recordsArray = [...deviationCategoryRecordsAdded, ...deviationCategoryRecordsUpdated];\n    const enrichForSave: any = {\n      name: pageObj.displayName,\n      reason: pageObj.reasons,\n      description: pageObj.description,\n      //@ts-ignore :i ill do it later\n      approvalFunctions: recordsArray.map((val: any) => {\n        return {\n          uid: val.uid,\n          department: {\n            uid: val.department.uid ? val.department.uid : val.department,\n          },\n          applicableFrom: convertDateToISO(val.applicableFrom),\n          applicableTo: convertDateToISO(val.applicableTo),\n        };\n      }),\n    };\n    if (pageMode === PAGE_MODE.EDIT) {\n      enrichForSave.uid = uid;\n    }\n    return enrichForSave;\n  };\n\n  // const prepareToApprove = () => {\n  //   let enrichForSave;\n  //   if (pageMode === PAGE_MODE.CREATE) {\n  //     let finalJsonObject = {\n  //       name: pageObj.displayName,\n  //       code: pageObj.systemCode,\n  //       reason: pageObj.reasons,\n  //       description: pageObj.description,\n  //     };\n  //     enrichForSave = {\n  //       name: pageObj.displayName,\n  //       operationType: OPERATION_TYPE.UPDATE,\n  //       entity: ENTITY.STATIC_MASTER_DATA,\n  //       initialStateJson: \"\",\n  //       finalStateJson: stringifyObject(finalJsonObject),\n  //       reqPayload: stringifyObject(finalJsonObject),\n  //       reasonForChange: pageObj.reasons,\n  //     };\n  //   } else {\n  //     let initialJsonObject = {\n  //       name: initialObj?.name,\n  //       code: initialObj.code,\n  //       reason: initialObj.reason,\n  //       description: initialObj.description,\n  //       createdAt: initialObj.createdAt,\n  //       createdBy: initialObj.createdBy,\n  //       id: initialObj.id,\n  //       isActive: initialObj.isActive,\n  //       requestId: initialObj.requestId,\n  //       uid: initialObj.uid,\n  //       updatedAt: initialObj.updatedAt,\n  //       updatedBy: initialObj.updatedBy,\n  //     };\n  //     let finalJsonObject = {\n  //       ...initialJsonObject,\n  //       name: pageObj.displayName,\n  //       code: pageObj.systemCode,\n  //       reason: pageObj.reasons,\n  //       description: pageObj.description,\n  //     };\n  //     enrichForSave = {\n  //       name: pageObj.displayName,\n  //       operationType: OPERATION_TYPE.UPDATE,\n  //       entity: ENTITY.STATIC_MASTER_DATA,\n  //       initialStateJson: stringifyObject(initialJsonObject),\n  //       finalStateJson: stringifyObject(finalJsonObject),\n  //       reqPayload: stringifyObject(finalJsonObject),\n  //       reasonForChange: pageObj.reasons,\n  //     };\n  //   }\n  //   return enrichForSave;\n  // };\n\n  const handleTableChange = () => {\n    // @ts-ignore :i ill do it later\n    const records = dataTableRef?.current?.getAddedRecords();\n    setDeviationCategoryRecordsAdded(records);\n    if (pageMode === PAGE_MODE.EDIT) {\n      // @ts-ignore :i ill do it later\n      const recordsUpdated = dataTableRef?.current?.getUpdatedRecords();\n      setDeviationCategoryRecordsUpdated(recordsUpdated);\n    }\n  };\n  const onSaveClick = async () => {\n    setErrorMessage(\"\");\n    let isValid = false;\n    isValid = await validateForm();\n    if (isValid) {\n      const enrichedObj = prepareToSave();\n      if (pageMode === PAGE_MODE.CREATE) {\n        return ProductDeviationCategoryService.save(enrichedObj)\n          .then((res: any) => {\n            if (res.status === 200) {\n              setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n              setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SAVED);\n              setTriggerToast(!triggerToast);\n              setNavigateBack(true);\n            }\n          })\n          .catch((err: any) => {\n            console.log(err.response.data);\n            setErrorMessage(parseStandardAPIErrorMessage(err));\n          });\n      } else {\n        return ProductDeviationCategoryService.update(uid, enrichedObj)\n          .then((res) => {\n            console.log(res);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      }\n    } else {\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n\n  const onCancelClick = () => {\n    props.navigate(linkProductConfigurationDeviationCategory);\n  };\n\n  const onApproveClick = () => {\n    console.log(\"this is onApproveClick\");\n  };\n\n  const onBackClick = () => {\n    props.navigate(linkProductConfigurationDeviationCategory);\n  };\n\n  const onEditClick = () => {\n    setPageMode(PAGE_MODE.EDIT);\n  };\n\n  const onAddRow = () => {\n    //@ts-ignore :i ill do it later\n    dataTableRef?.current?.addRecords(initialObj);\n  };\n\n  /* \n    -------------------------------------------------------\n      Helper Functions:\n    -------------------------------------------------------\n  */\n\n  const getPageTitle = () => {\n    switch (pageMode) {\n      case PAGE_MODE.CREATE:\n        return \"heading.productConfiguration.deviation.category.create\";\n      case PAGE_MODE.VIEW:\n        return \"heading.productConfiguration.deviation.category.view\";\n      case PAGE_MODE.EDIT:\n        return \"heading.productConfiguration.deviation.category.edit\";\n      default:\n        return \"heading.productConfiguration.deviation.category.create\";\n    }\n  };\n\n  const onEditorValueChange = (props: any, value: any, field: any) => {\n    // @ts-ignore :i ill do it later\n    dataTableRef?.current?.updateRecords(props, value, field);\n    setTimeout(() => {\n      handleTableChange();\n    }, 2);\n  };\n\n  const onNameValidation = (event: any) => {\n    ProductDeviationCategoryService.getAll(0, 10, `name=${event.target.value}`)\n      .then((res) => {\n        if (res.status === 200) {\n          res.data.results.length > 0 ? setIsNameDuplicated(true) : setIsNameDuplicated(false);\n        }\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n\n  const renderDepartment = (rowData: any, props: any) => {\n    return (\n      <SimpleDropDown\n        variant={DROPDOWN_STYLE_TYPE.SECONDARY}\n        options={department}\n        optionLabel=\"name\"\n        optionValue=\"uid\"\n        onBlur={validate}\n        validation={simpleValidator?.current?.message(\n          `deviationTable-Bank-${props.rowIndex}`,\n          rowData.department,\n          \"mandatory\"\n        )}\n        name={`deviationTable-Bank-${props.rowIndex}`}\n        onChange={(e) => {\n          onEditorValueChange(props, e.target.value, \"department\");\n        }}\n        value={rowData.department?.uid ? rowData.department?.uid : rowData.department}\n      />\n    );\n  };\n\n  const renderFromDate = (rowData: any, props: any) => {\n    return (\n      <DatePicker\n        value={new Date(rowData.applicableFrom)}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        placeholder=\"DD-MMM-YYYY\"\n        onChange={(e) => {\n          onEditorValueChange(props, e.target.value, \"applicableFrom\");\n        }}\n        onBlur={validate}\n        name={`deviationTable-applicableFrom-${props.rowIndex}`}\n        validation={simpleValidator?.current?.message(\n          `deviationTable-applicableFrom-${props.rowIndex}`,\n          rowData.applicableFrom,\n          \"mandatory\"\n        )}\n      />\n    );\n  };\n\n  const renderToDate = (rowData: any, props: any) => {\n    return (\n      <DatePicker\n        value={new Date(rowData.applicableTo)}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        placeholder=\"DD-MMM-YYYY\"\n        onChange={(e) => {\n          onEditorValueChange(props, e.target.value, \"applicableTo\");\n        }}\n        onBlur={validate}\n        name={`deviationTable-applicableTo-${props.rowIndex}`}\n        validation={simpleValidator?.current?.message(\n          `deviationTable-applicableTo-${props.rowIndex}`,\n          rowData.applicableTo,\n          \"mandatory\"\n        )}\n      />\n    );\n  };\n\n  /* \n    -------------------------------------------------------\n      Sectional Render Functions: For Sub components / section wise renders\n    -------------------------------------------------------\n  */\n  const { displayName, description, reasons } = pageObj;\n  return (\n    <div className=\"h-full border mx-6\">\n      <div className=\"flex w-full justify-between pt-6 items-center\">\n        <div className=\" h-7.5\">\n          <PageTitle title={getPageTitle()} />\n        </div>\n        <div className=\"flex mr-5\">\n          {pageMode === PAGE_MODE.CREATE || pageMode === PAGE_MODE.EDIT ? (\n            <>\n              <div className=\"mr-5\">\n                <ButtonBox buttonType={BUTTON_TYPE.CANCEL_OUTLINE} onClick={onCancelClick} />\n              </div>\n              <div className=\"mr-10\">\n                <ButtonBox buttonType={BUTTON_TYPE.SAVE_OUTLINE} onClick={onSaveClick} />\n              </div>\n              <div>\n                <ButtonBox\n                  className=\"approve-primary\"\n                  buttonType={BUTTON_TYPE.SEND_FOR_APPROVAL}\n                  onClick={onApproveClick}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"mr-5\">\n                <ButtonBox buttonType={BUTTON_TYPE.BACK_OUTLINE} onClick={onBackClick} />\n              </div>\n              <div className=\"\">\n                <ButtonBox\n                  buttonType={BUTTON_TYPE.EDIT_OUTLINE}\n                  className=\"blue-primary\"\n                  onClick={onEditClick}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"grid grid-cols-4 gap-3 mt-3\">\n        <div className=\"col-span-1\">\n          <InputBox\n            label=\"input.productConfiguration.deviation.category.name\"\n            name=\"displayName\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            onChange={handleInputChange}\n            onBlur={(e) => {\n              onNameValidation(e);\n              validate(e);\n            }}\n            value={displayName}\n            disabled={pageMode === PAGE_MODE.VIEW}\n            validation={\n              isNameDuplicated\n                ? \"Duplicate Entry Found\"\n                : simpleValidator?.current?.message(\"displayName\", displayName, \"mandatory\")\n            }\n          />\n        </div>\n      </div>\n      <div className=\"grid grid-cols-4 gap-3\">\n        <div className=\"col-span-2\">\n          <InputTextArea\n            label=\"input.productConfiguration.deviation.category.description\"\n            name=\"description\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            maxCount={200}\n            onChange={handleInputChange}\n            value={description}\n            onBlur={validate}\n            disabled={pageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n        <div className=\"col-span-2\">\n          <InputTextArea\n            label=\"input.productConfiguration.deviation.category.reasons\"\n            name=\"reasons\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            maxCount={200}\n            onChange={handleInputChange}\n            value={reasons}\n            onBlur={validate}\n            validation={simpleValidator?.current?.message(\"reasons\", reasons, \"mandatory\")}\n            disabled={pageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n      </div>\n      <div className=\"mt-3 flex w-full justify-between\">\n        <Text\n          label=\"text.productConfiguration.approval\"\n          className=\"text-primary-ptext-1000 text-base font-Roboto font-bold flex\"\n        />\n        <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddRow} />\n      </div>\n      <div className=\"\">\n        <EditableTable\n          standardDataFormatPromise={ProductDeviationCategoryService.getAllDeviationCategory}\n          className=\"border border-secondary-concrete px-0 overflow-x-auto mt-4 rounded-lg read-only-table !min-h-111 w-full\"\n          dataKey=\"id\"\n          search={pageMode == PAGE_MODE.EDIT && `deviationCategory.uid=${uid}&`}\n          hidePaginator={pageMode == PAGE_MODE.CREATE}\n          ref={dataTableRef}\n          pageMode={pageMode}\n          updatedRecords={deviationCategoryRecordsUpdated}\n          addedRecords={deviationCategoryRecordsAdded}\n          showStatusBar={pageMode === PAGE_MODE.EDIT}\n          rowClassName={pageMode == PAGE_MODE.EDIT && renderRowClassName}\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n            header=\"Department\"\n            body={renderDepartment}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n            header=\"Applicable From *\"\n            body={renderFromDate}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n            header=\"Application to *\"\n            body={renderToDate}\n          />\n        </EditableTable>\n      </div>\n      <div className=\"\">\n        <ToastCustom\n          position=\"bottom-right\"\n          ref={toastMessageRef}\n          toastText={toastMessage}\n          variant={toastMessageVariant}\n          onRemove={() => {\n            if (navigateBack) {\n              props.navigate(linkProductConfiguration);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(PageDeviationCategoryCM);\n"],"names":["PageDeviationCategoryCM","props","pageObj","setPageObj","useState","pageMode","setPageMode","PAGE_MODE","initialObj","useRef","dataTableRef","department","setDepartment","errorMessage","setErrorMessage","toastMessageRef","isNameDuplicated","setIsNameDuplicated","forceUpdate","uid","setUid","toastMessage","setToastMessage","navigateBack","setNavigateBack","toastMessageVariant","setToastMessageVariant","TOAST_STYLE_TYPE","triggerToast","setTriggerToast","deviationCategoryRecordsUpdated","setDeviationCategoryRecordsUpdated","deviationCategoryRecordsAdded","setDeviationCategoryRecordsAdded","simpleValidator","SimpleReactValidator","getStandardValidator","messageReplace","prev","useEffect","parsed","queryString","ProductDeviationCategoryService","res","validateGetAPIResponse","_a","_b","_c","err","parseStandardAPIErrorMessage","Department","handleInputChange","event","name","value","prevPageObj","renderRowClassName","rowData","validate","validateForm","isValid","prepareToSave","recordsArray","enrichForSave","val","convertDateToISO","handleTableChange","records","recordsUpdated","onSaveClick","enrichedObj","STATIC_MASTER_TYPE_TOAST_TEXT","onCancelClick","linkProductConfigurationDeviationCategory","onApproveClick","onBackClick","onEditClick","onAddRow","getPageTitle","onEditorValueChange","field","onNameValidation","renderDepartment","jsx","SimpleDropDown","DROPDOWN_STYLE_TYPE","e","renderFromDate","DatePicker","INPUT_STYLE_TYPE","renderToDate","displayName","description","reasons","jsxs","PageTitle","Fragment","ButtonBox","BUTTON_TYPE","InputBox","InputTextArea","Text","EditableTable","Column","ToastCustom","linkProductConfiguration","PageDeviationCategoryCM$1","withRouter"],"mappings":"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"}