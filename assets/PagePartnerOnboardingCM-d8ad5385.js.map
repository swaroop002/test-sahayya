{"version":3,"file":"PagePartnerOnboardingCM-d8ad5385.js","sources":["../../src/views/masterData/PartnerManagement/PagePartnerOnboardingCreateViewEdit/PagePartnerOnboardingCM.tsx"],"sourcesContent":["import LoadingIcon from \"assets/img/common/Loading.svg\";\nimport AclGuard from \"components/AclGuard/AclGuard\";\nimport AutoComplete from \"components/AutoComplete/AutoComplete\";\nimport ButtonBox from \"components/ButtonBox\";\nimport DatePicker from \"components/DatePicker/DatePicker\";\nimport EditableTableV2, { Column } from \"components/EditableTableV2/EditableTableV2\";\nimport ErrorDialog from \"components/ErrorDialog/ErrorDialog\";\nimport FileUploaderAndView from \"components/FileUploaderAndView/FileUploaderAndView\";\nimport IconButton, { BUTTON_TYPES } from \"components/IconButton/IconButton\";\nimport InputBox from \"components/InputBox\";\nimport InputTextArea from \"components/InputTextArea\";\nimport MenuBox from \"components/MenuBox/MenuBox\";\nimport PageTitle from \"components/PageTitle/PageTitle\";\nimport RadioButton from \"components/RadioButton/RadioButton\";\nimport SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport Text from \"components/Text/Text\";\nimport ToastCustom from \"components/Toast/Toast\";\nimport { withRouter } from \"hoc/withRouter\";\nimport queryString from \"query-string\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { linkPartnerOnboarding } from \"routes\";\nimport FileUploadService from \"services/FileUploadService\";\nimport BankMasterDataService from \"services/masterdata/Banks/BankMasterDataService\";\n// import BankMasterDataService from \"services/masterdata/Banks/BankMasterDataService\";\nimport CityService from \"services/masterdata/Location/City\";\nimport StateService from \"services/masterdata/Location/State\";\nimport OrgStructureBranchService from \"services/masterdata/OrgStruct/Branch/Branch\";\nimport OrgStructureLevelService from \"services/masterdata/OrgStruct/Level/Level\";\nimport PartnerMasterDataService from \"services/masterdata/Partners/PartnerMasterDataService\";\nimport StaticMasterDataService from \"services/masterdata/StaticMaster/StaticMasterDataService\";\nimport StaticMasterTypeService from \"services/masterdata/StaticMaster/StaticMasterTypeService\";\nimport SystemDate from \"services/masterdata/SystemDate\";\nimport BankAccountDetailsService from \"services/transaction/DDE/BankAccountDetailsService\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  convertDateToISO,\n  formatDate,\n  getStandardValidator,\n  messageReplace,\n  parseStandardAPIErrorMessage,\n  parsedDateFromAPIValue,\n  stringifyObject,\n  validateGetAPIResponse,\n} from \"utils/CommonUtil\";\nimport {\n  AUTOCOMPLETE_MESSAGES,\n  BUTTON_TYPE,\n  DROPDOWN_STYLE_TYPE,\n  ENTITY,\n  INPUT_STYLE_TYPE,\n  OPERATION_TYPE,\n  PAGE_MODE,\n  REPORTING_TYPES,\n  STATIC_MASTER_TYPE_TOAST_TEXT,\n  TOAST_STYLE_TYPE,\n} from \"utils/Constant\";\nimport { generateCreateAtDate, getParsedDate } from \"utils/Util\";\n\n// const DataEntryTypeTable = (props: any) => {\n\n//   const { sendDataToPage, initialData } = props;\n//   debugger\n//   const [checkboxValues, setCheckboxValues] = useState(initialData);\n//   const handleCheckboxChange = (event: any) => {\n//     const { name, checked } = event.target;\n//     setCheckboxValues({\n//       ...checkboxValues,\n//       [name]: checked,\n//     });\n//   };\n//   useEffect(() => {\n//     sendDataToPage(checkboxValues);\n//   }, [checkboxValues]);\n\n//   return (\n//     <div className=\"zerothTable\">\n//       <div className=\"flex \">\n//       <CheckBox\n//           name=\"inSystemForm\"\n//           hideLabel\n//           checked={checkboxValues.inSystemForm}\n//           onChange={handleCheckboxChange}\n//         />\n//         <Text className=\"ml-[20px]\" label={\"label.partnerOnboarding.inSystemForm\"} />\n//       </div>\n//       <div className=\"flex \">\n//       <CheckBox\n//           name=\"UploadFile\"\n//           hideLabel\n//           checked={checkboxValues.UploadFile}\n//           onChange={handleCheckboxChange}\n//         />\n//         <Text className=\"ml-[20px]\" label={\"label.partnerOnboarding.uploadFile\"} />\n//       </div>\n//     </div>\n//   );\n// };\n\nconst PagePartnerOnboardingCreateViewEdit = (props: any) => {\n  const [uid, setUid] = useState<any>(\"\");\n\n  const [timeOutLocal, setTimeOutLocal] = useState<any>(undefined);\n\n  // const [dataEntryData, setDataEntryData] = useState<any>({});\n  const [pageMode, setPageMode] = useState<any>(PAGE_MODE.CREATE);\n  const [, forceUpdate] = useState<undefined | boolean>(undefined); //NOSONAR\n  const [dataEntryData, setDataEntryData] = useState({\n    inSystemForm: false,\n    UploadFile: false,\n  });\n  const partnerAgreementDetailRef = useRef<any>(null);\n  const [currentDate, setCurrentDate] = useState<any>(\"\");\n  const partnerContactDetailRef = useRef<any>(null);\n  const [ContactTypeList, setContactTypeList] = useState<any>([]);\n  const [reportingList, setReportingList] = useState<any>([]);\n  const keyPersonRef = useRef<any>(null);\n  const referenceRef = useRef<any>(null);\n  const bankDetailRef = useRef<any>(null);\n  const dataTableAttachmentsTypeRef = useRef<any>(null);\n  const [attachmentTypeRecordsAdded, setAttachmentTypeRecordsAdded] = useState([]);\n  const [showDialogAPIError, setShowDialogAPIError] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const dataTableRefForRateCard = useRef<any>(null);\n  const bankOrExpanelmentRef = useRef<any>(null);\n  const [userList, setUserList] = useState<any>([]);\n  const [stateList, setStateList] = useState<any>([]);\n  const [bankFinancierForExpanalmentList, setBankFinancierForEnalmentList] = useState<any>([]);\n  const [ifscCodeList, setIfscCodeList] = useState<any>([]);\n  const [reportingToList, setReportingToList] = useState<any>([]);\n  const [isDataEntryTypeDisable, setIsDataEntryTypeIsDisable] = useState(true);\n  const gstDetailsRef = useRef<any>(null);\n  const organisationReportingLevelRef = useRef<any>(null);\n  const initialObj: any = {\n    name: \"\",\n    PartnerType: \"\",\n    ChannelType: \"\",\n    businessConstitution: \"\",\n    address: \"\",\n    city: \"\",\n    companyProfile: \"\",\n    RCUComments: \"\",\n    description: \"\",\n    reason: \"\",\n  };\n\n  const [pageObj, setPageObj] = useState<any>(initialObj);\n  const [initialPageObj, setInitPageObj] = useState({\n    name: \"\",\n    PartnerType: \"\",\n    ChannelType: \"\",\n    businessConstitution: \"\",\n    address: \"\",\n    city: \"\",\n    companyProfile: \"\",\n    RCUComments: \"\",\n    description: \"\",\n    reason: \"\",\n    isInSystemForm: false,\n    isUploadFile: false,\n  });\n  const [partnerList, setPartnerList] = useState<any>([]);\n  const [channelList, setChannelList] = useState<any>([]);\n  const [businessConstitutionList, setBusinessConstitutionList] = useState<any>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [suggestionsTemplate, setSuggestionsTemplate] = useState([]);\n  const [firstTimeRendering, setFirstTimeRendering] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [toastMessageVariant, setToastMessageVariant] = useState(TOAST_STYLE_TYPE.PRIMARY);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [triggerToast, setTriggerToast] = useState(false);\n  const [navigateBack, setNavigateBack] = useState(false);\n  const [position, setPosition] = useState<any>(\"bottom-right\");\n  const toastMessageRef = useRef(null);\n  const simpleValidator = useRef(\n    new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    })\n  );\n\n  // INITIAL OBJECTS FOR TABLE ROWS\n  const initialObjForEmpalamentRowDataObj = {\n    bank: {\n      uid: \"\",\n    },\n    professionalMembership: \"\",\n    attachment: {},\n  };\n  const initialObjForPartnerAgreementDetail = {\n    date: \"\",\n    startDate: \"\",\n    expiryDate: \"\",\n  };\n  const initialObjForPartnerContactDetails = {\n    type: {\n      uid: \"\",\n    },\n    info: \"\",\n  };\n  const initialObjForKeyPerson = {\n    name: \"\",\n    educationalQualification: \"\",\n    totalWorkExp: \"\",\n    expLegalRole: \"\",\n    enrollmentNumber: \"\",\n    registrationNumber: \"\",\n    pan: \"\",\n    aadhar: \"\",\n    attachment: {},\n  };\n  const initialObjForReference = {\n    name: \"\",\n    designation: \"\",\n    bank: {\n      uid: \"\",\n    },\n    address: \"\",\n    mobile: \"\",\n    briefProfile: \"\",\n  };\n  const initialAttachmentForRateCard = {\n    name: \"\",\n    createdAt: \"\",\n    isUploaded: false,\n    isAdded: true,\n    url: \"\",\n  };\n  const initialObjForTableBankDetails = {\n    bank: {\n      uid: \"\",\n    },\n    accountHolder: \"\",\n    accountNumber: \"\",\n    ifsc: {\n      uid: \"\",\n    },\n    attachment: {},\n  };\n  const initialObjForGstDetails = {\n    gstNumber: \"\",\n    gstState: {\n      uid: \"\",\n    },\n    attachment: {},\n  };\n  const initialObjForOrganisationReporting = {\n    reporting: {\n      uid: \"\",\n    },\n    branch: {\n      uid: \"\",\n    },\n    orgRepLevel: {\n      uid: \"\",\n    },\n    selectedReportingType: \"\",\n    applicableFrom: \"\",\n    applicableTo: \"\",\n    isActive: true,\n  };\n\n  /*\n    ----------- HOOKS -----------\n  */\n  useEffect(() => {\n    const parsed: {\n      mode?: string;\n      uid?: string;\n    } = queryString.parse(props.location?.search);\n    setUid(parsed.uid);\n\n    if (parsed?.mode && parsed?.mode !== undefined) {\n      setPageMode(parsed.mode);\n      if (parsed.mode === PAGE_MODE.CREATE && firstTimeRendering) {\n        // bankOrExpanelmentRef.current?.addRow(initialObjForEmpalamentRowDataObj);\n        // partnerAgreementDetailRef?.current?.addRow(initialObjForPartnerAgreementDetail);\n        // partnerContactDetailRef?.current?.addRow(initialObjForPartnerContactDetails);\n        // keyPersonRef?.current?.addRow(initialObjForKeyPerson);\n        // referenceRef?.current?.addRow(initialObjForReference);\n        // bankDetailRef?.current?.addRow(initialObjForTableBankDetails);\n        // gstDetailsRef?.current?.addRow(initialObjForGstDetails);\n        organisationReportingLevelRef?.current?.addRow(initialObjForOrganisationReporting);\n        setFirstTimeRendering(false);\n      }\n    }\n\n    getAbbList();\n    getReportingList();\n    getCurrentDate();\n    getPartnerList();\n    getChannelList();\n    getBusinessConstitutionList();\n  }, []);\n\n  useEffect(() => {\n    if (uid) {\n      getInitialData();\n    }\n  }, [uid]);\n  useEffect(() => {\n    if (errorMessage) {\n      setShowDialogAPIError(true);\n    }\n  }, [errorMessage]);\n  const getInitialData = () => {\n    PartnerMasterDataService.getHeadersData(uid)\n\n      .then((res: any) => {\n        setPageObj({\n          ...pageObj,\n          name: res.data?.name,\n          PartnerType: res.data?.type.uid,\n          ChannelType: res.data?.channelType?.uid,\n          businessConstitution: res.data?.businessConstitution?.uid,\n          address: res.data?.address,\n          city: res.data?.city,\n          companyProfile: res.data?.companyProfile,\n          RCUComments: res.data?.rcuComments,\n          reason: res.data?.reason,\n          description: res?.data?.description,\n          orgRepLevels: [],\n        });\n\n        setCheckboxValues({\n          inSystemForm: res.data?.isInSystemForm ?? false,\n          UploadFile: res.data?.isUploadFile ?? false,\n        });\n\n        setInitPageObj({\n          name: res.data?.name,\n          PartnerType: res.data?.type.uid,\n          ChannelType: res.data?.channelType?.uid,\n          businessConstitution: res.data?.businessConstitution?.uid,\n          address: res.data?.address,\n          city: res.data?.city,\n          companyProfile: res.data?.companyProfile,\n          RCUComments: res.data?.rcuComments,\n          reason: res.data?.reason,\n          description: res?.data?.description,\n          isInSystemForm: checkboxValues.inSystemForm,\n          isUploadFile: checkboxValues.UploadFile,\n        });\n\n        // alert(res.data.product.name);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  /*\n    ----------- Initial API Call -----------\n  */\n  const getPartnerList = () => {\n    StaticMasterDataService.getAll(0, 10, \"isActive=true&staticMasterType.code=PARTNER_TYPE\")\n      .then((res: any) => {\n        setPartnerList([...res.data.results] ?? []);\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n  const getChannelList = () => {\n    StaticMasterDataService.getAll(0, 10, \"isActive=true&staticMasterType.code=CHANNEL_TYPE\")\n      .then((res: any) => {\n        setChannelList([...res.data.results] ?? []);\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n  const getBusinessConstitutionList = () => {\n    StaticMasterDataService.getAll(\n      0,\n      10,\n      \"isActive=true&staticMasterType.code=PARTNER_BUSINESS_CONSTITUTION\"\n    )\n      .then((res: any) => {\n        setBusinessConstitutionList([...res.data.results] ?? []);\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n  const getUserList = (event: any, start?: any, totalRecords?: any) => {\n    const startValue = start ?? 0;\n    const limit = 500;\n    const searchParam = `isActive=true&name:lk=${event.query}&`;\n    totalRecords = totalRecords ?? 100;\n\n    if (totalRecords >= startValue) {\n      CityService.getAll(startValue, limit, searchParam).then((res) => {\n        const results = res.data?.results?.length > 0 ? [...res.data.results] : [];\n\n        if (results.length === 0) {\n          setUserList([{ name: AUTOCOMPLETE_MESSAGES.NO_Banks }]);\n        } else {\n          setUserList([...results]);\n        }\n      });\n    }\n  };\n  const getStateList = (event: any, start?: any, totalRecords?: any) => {\n    const startValue = start ?? 0;\n    const limit = 500;\n    const searchParam = `isActive=true&name:lk=${event.query}&`;\n    totalRecords = totalRecords ?? 100;\n\n    if (totalRecords >= startValue) {\n      StateService.getAll(startValue, limit, searchParam).then((res) => {\n        const results = res.data?.results?.length > 0 ? [...res.data.results] : [];\n\n        if (results.length === 0) {\n          setStateList([{ name: AUTOCOMPLETE_MESSAGES.NO_State }]);\n        } else {\n          setStateList([...results]);\n        }\n      });\n    }\n  };\n  const getAbbList = () => {\n    StaticMasterDataService.getAll(0, 200, \"isActive=true&staticMasterType.code=CONTACT_TYPE\")\n      .then((res: any) => {\n        setContactTypeList([...res.data.results] ?? []);\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n  const getReportingList = () => {\n    StaticMasterDataService.getAll(0, 10, \"isActive=true&staticMasterType.code=REPORT\")\n      .then((res: any) => {\n        setReportingList([...res.data.results] ?? []);\n      })\n      .catch((err) => {\n        console.log(\"err\");\n      });\n  };\n\n  /*\n    ----------- Handler -----------\n  */\n  const handleInputChange = (event: any) => {\n    const { name, value } = event.target;\n    if (name == \"PartnerType\") {\n      setCheckboxValues({\n        inSystemForm: false,\n        UploadFile: false,\n      });\n    }\n\n    setPageObj((prevPageObj: any) => {\n      const updatedObj = {\n        ...prevPageObj,\n        [name]: value,\n      };\n      return updatedObj;\n    });\n  };\n\n  /*\n    ----------- Button click -----------\n  */\n  const onCancelClick = () => {\n    props.navigate(linkPartnerOnboarding);\n  };\n  const onBackClick = () => {\n    props.navigate(linkPartnerOnboarding);\n  };\n\n  const prepareToApprove = () => {\n    const addedRecordsForOrganisationLevelReporting = [\n      ...(organisationReportingLevelRef.current?.getAddedRecords() ?? []),\n      ...(organisationReportingLevelRef.current?.getDeletedRecords() ?? []),\n      ...(organisationReportingLevelRef.current?.getUpdatedRecords() ?? []),\n    ];\n    addedRecordsForOrganisationLevelReporting.forEach((obj: any) => {\n      if (obj.reporting && typeof obj.reporting === \"string\") {\n        obj.reporting = { uid: obj.reporting };\n      }\n      obj.applicableFrom = convertDateToISO(obj.applicableFrom);\n      obj.applicableTo = convertDateToISO(obj.applicableTo);\n    });\n\n    const enrichForCreateApproval = {\n      uid: uid,\n      type: {\n        uid: pageObj.PartnerType,\n      },\n      channelType: {\n        uid: pageObj.ChannelType,\n      },\n      name: pageObj.name,\n      businessConstitution: {\n        uid: pageObj.businessConstitution,\n      },\n      address: pageObj.address,\n      city: {\n        uid: pageObj?.city?.uid,\n      },\n      companyProfile: pageObj.companyProfile,\n      rcuComments: pageObj.RCUComments,\n      reason: pageObj.reason,\n      isInSystemForm: checkboxValues.inSystemForm,\n      isUploadFile: checkboxValues.UploadFile,\n      description: pageObj.description,\n      empanelments: [],\n      agreements: [],\n      contacts: [],\n      keyPersons: [],\n      references: [],\n      bankDetails: [],\n      rateCards: [],\n      taxDetails: [],\n      orgRepLevels: addedRecordsForOrganisationLevelReporting,\n    };\n\n    let enrichForSave;\n    const finalJsonObject = enrichForCreateApproval;\n    const initialJsonObject = initialPageObj;\n\n    if (pageMode === PAGE_MODE.CREATE) {\n      enrichForSave = {\n        name: pageObj.name,\n        operationType: OPERATION_TYPE.CREATE,\n        entity: ENTITY.PARTNER,\n        initialStateJson: \"\",\n        finalStateJson: stringifyObject(finalJsonObject),\n        reqPayload: stringifyObject(finalJsonObject),\n        reasonForChange: pageObj.reason,\n      };\n    } else {\n      enrichForSave = {\n        name: pageObj.name,\n        uid: uid,\n        operationType: OPERATION_TYPE.UPDATE,\n        entity: ENTITY.PARTNER,\n        initialStateJson: stringifyObject(initialJsonObject),\n        finalStateJson: stringifyObject(finalJsonObject),\n        reqPayload: stringifyObject(finalJsonObject),\n        reasonForChange: pageObj.reason,\n      };\n    }\n    return enrichForSave;\n  };\n\n  const onApproveClick = async () => {\n    setErrorMessage(\"\");\n    let isValid = false;\n    isValid = await validateForm();\n    if (!isValid) {\n      return;\n    }\n    const enrichedObj = prepareToApprove();\n    return StaticMasterTypeService.approve(enrichedObj)\n      .then((res) => {\n        setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n        setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.SENT_FOR_APPROVAL);\n        setTriggerToast(!triggerToast);\n        setNavigateBack(true);\n      })\n      .catch((err) => {\n        setErrorMessage(parseStandardAPIErrorMessage(err));\n      });\n  };\n  const onEditClick = () => {\n    setPageMode(PAGE_MODE.EDIT);\n  };\n\n  useEffect(() => {\n    if (toastMessageRef?.current && toastMessage !== \"\") {\n      // @ts-ignore: will fix later\n      toastMessageRef?.current?.showFunction();\n    }\n  }, [toastMessage, toastMessageVariant, triggerToast]);\n  const prepareForSave = () => {\n    // console.log(pageObj);\n    // const empanelmentRecords = [...(bankOrExpanelmentRef.current?.getAddedRecords() ?? [])];\n    // // console.log(empalamentData);\n    // const partnerAgreementDetails = [\n    //   ...(partnerAgreementDetailRef.current?.getAddedRecords() ?? []),\n    // ];\n    // const addedRecordsForContactDetail = [\n    //   ...(partnerContactDetailRef.current?.getAddedRecords() ?? []),\n    // ];\n    // const addedRecordsForKeyPerson = [...(keyPersonRef.current?.getAddedRecords() ?? [])];\n    // const addedRecordsForReference = [...(referenceRef.current?.getAddedRecords() ?? [])];\n    // const addedRecordsForBankDetails = [...(bankDetailRef.current?.getAddedRecords() ?? [])];\n    // const addedRecordsForRateCard = [...(dataTableRefForRateCard.current?.getAddedRecords() ?? [])];\n    // console.log(addedRecordsForRateCard);\n\n    // const addedRecordsForTaxDetails = [...(gstDetailsRef.current?.getAddedRecords() ?? [])];\n    const addedRecordsForOrganisationLevelReporting = [\n      ...(organisationReportingLevelRef.current?.getAddedRecords() ?? []),\n      ...(organisationReportingLevelRef.current?.getDeletedRecords() ?? []),\n      ...(organisationReportingLevelRef.current?.getUpdatedRecords() ?? []),\n    ];\n    console.log(addedRecordsForOrganisationLevelReporting);\n\n    //  addedRecordsForOrganisationLevelReporting.forEach((obj: any) => {\n    //     // if (obj.reporting && typeof obj.reporting === \"string\") {\n    //     //   obj.reporting = { uid: obj.reporting };\n    //     // }\n    //     obj.applicableFrom = convertDateToISO(obj.applicableFrom);\n    //     obj.applicableTo = convertDateToISO(obj.applicableTo) ?? null;\n    //   });\n\n    // const addedRecordsForBankDetails = [...(bankDetailRef.current?.getAddedRecords() ?? [])];\n    // console.log(addedRecordsForOrganisationLevelReporting);\n    // console.log(dataTableRefForRateCard.current?.attachment);\n    // console.log(dataTableRefForRateCard?.current?.getAddedRecords());\n\n    const objectForSave: any = {\n      uid: uid,\n      type: {\n        uid: pageObj.PartnerType,\n      },\n      channelType: {\n        uid: pageObj.ChannelType,\n      },\n      name: pageObj.name,\n      businessConstitution: {\n        uid: pageObj.businessConstitution,\n      },\n      address: pageObj.address,\n      city: {\n        uid: pageObj?.city?.uid,\n      },\n      isInSystemForm: checkboxValues.inSystemForm,\n      isUploadFile: checkboxValues.UploadFile,\n      companyProfile: pageObj.companyProfile,\n      rcuComments: pageObj.RCUComments,\n      reason: pageObj.reason,\n      description: pageObj.description,\n      empanelments: [],\n\n      agreements: [],\n      contacts: [],\n      keyPersons: [],\n      references: [],\n      bankDetails: [],\n      rateCards: [],\n      taxDetails: [],\n    };\n    if (!pageObj.ChannelType) {\n      objectForSave.channelType = null;\n    }\n\n    // const transformedDataForEnpanelment = empanelmentRecords.map((item) => ({\n    //   bank: {\n    //     uid: item.bank.uid,\n    //   },\n    //   professionalMembership: item.professionalMembership,\n    //   attachments: item.attachment\n    //     ? [\n    //         {\n    //           attachment: {\n    //             name: item.attachment.fileName,\n    //             url: item.attachment.url, //url check the transaction by divyanshu\n    //             thumbUrl: item.attachment.thumbUrl ?? \"\", //may be\n    //             size: `${item.attachment.size}`,\n    //             isPublic: !item.attachment.isPrivate, //opposiite\n    //             type: `${item.attachment.contentType}`, // i need to check if i can see it is either one of them audio video or something else remove this\n    //             contentType: `${item.attachment.contentType}`,\n    //           },\n    //         },\n    //       ]\n    //     : [],\n    // }));\n\n    // const transformedDataForKeyPerson = addedRecordsForKeyPerson.map((item) => ({\n    //   name: item.name,\n    //   educationalQualification: item.educationalQualification,\n    //   totalWorkExp: item.totalWorkExp,\n    //   expLegalRole: item.expLegalRole,\n    //   enrollmentNumber: item.enrollmentNumber,\n    //   registrationNumber: item.registrationNumber,\n    //   pan: item.pan,\n    //   aadhar: item.aadhar,\n    //   attachments: item.attachment\n    //     ? [\n    //         {\n    //           attachment: {\n    //             name: item.attachment.fileName,\n    //             url: item.attachment.url, //url check the transaction by divyanshu\n    //             thumbUrl: item.attachment.thumbUrl, //may be\n    //             size: `${item.attachment.size}`,\n    //             isPublic: !item.attachment.isPrivate, //opposiite\n    //             type: `${item.attachment.contentType}`, // i need to check if i can see it is either one of them audio video or something else remove this\n    //             contentType: `${item.attachment.contentType}`,\n    //           },\n    //         },\n    //       ]\n    //     : [],\n    // }));\n    // const transformedDataForBankDetails = addedRecordsForBankDetails.map((item) => ({\n    //   bank: {\n    //     uid: item.bank.uid,\n    //   },\n    //   accountHolder: item.accountHolder,\n    //   accountNumber: item.accountNumber,\n    //   ifsc: {\n    //     uid: item.ifsc.uid,\n    //   },\n    //   attachments: item.attachment\n    //     ? [\n    //         {\n    //           attachment: {\n    //             name: item.attachment.fileName,\n    //             url: item.attachment.url, //url check the transaction by divyanshu\n    //             thumbUrl: item.attachment.thumbUrl, //may be\n    //             size: `${item.attachment.size}`,\n    //             isPublic: !item.attachment.isPrivate, //opposiite\n    //             type: `${item.attachment.contentType}`, // i need to check if i can see it is either one of them audio video or something else remove this\n    //             contentType: `${item.attachment.contentType}`,\n    //           },\n    //         },\n    //       ]\n    //     : [],\n    // }));\n    // const transformedDataForGstDetails = addedRecordsForTaxDetails.map((item) => ({\n    //   gstNumber: item.gstNumber,\n    //   gstState: {\n    //     uid: item.gstState.uid,\n    //   },\n    //   attachments: item.attachment\n    //     ? [\n    //         {\n    //           attachment: {\n    //             name: item.attachment.fileName,\n    //             url: item.attachment.url, //url check the transaction by divyanshu\n    //             thumbUrl: item.attachment.thumbUrl, //may be\n    //             size: `${item.attachment.size}`,\n    //             isPublic: !item.attachment.isPrivate, //opposiite\n    //             type: `${item.attachment.contentType}`, // i need to check if i can see it is either one of them audio video or something else remove this\n    //             contentType: `${item.attachment.contentType}`,\n    //           },\n    //         },\n    //       ]\n    //     : [],\n    // }));\n\n    // objectForSave.empanelments = transformedDataForEnpanelment;\n    // // validated\n    // objectForSave.agreements = partnerAgreementDetails;\n    // // validated\n    // objectForSave.contacts = addedRecordsForContactDetail;\n    // // validated\n    // objectForSave.keyPersons = transformedDataForKeyPerson;\n    // // validated\n    // objectForSave.references = addedRecordsForReference;\n    // // validated\n    // objectForSave.bankDetails = transformedDataForBankDetails;\n    // // validated\n    // objectForSave.taxDetails = transformedDataForGstDetails;\n    // // validated\n    objectForSave.orgRepLevels = addedRecordsForOrganisationLevelReporting;\n    return objectForSave;\n  };\n\n  const validateForm = async () => {\n    let isValid = false;\n\n    isValid = simpleValidator?.current?.allValid() ?? false;\n\n    if (isValid) {\n      return isValid;\n    } else {\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n      return false;\n    }\n  };\n  const onSaveClick = async () => {\n    setErrorMessage(\"\");\n    let isValid = false;\n\n    isValid = await validateForm();\n\n    if (!isValid) {\n      setPosition(\"top-right\");\n      setToastMessageVariant(TOAST_STYLE_TYPE.QUATERNARY);\n      setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.ERROR);\n      setTriggerToast(!triggerToast);\n      return;\n    }\n\n    if (simpleValidator?.current?.allValid()) {\n      const enrichedObj = prepareForSave();\n      if (pageMode === PAGE_MODE.CREATE) {\n        return PartnerMasterDataService.save(enrichedObj)\n          .then((res) => {\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setToastMessage(\"Saved Successfully\");\n            setTriggerToast(!triggerToast);\n            setNavigateBack(true);\n          })\n          .catch((err) => {\n            setErrorMessage(parseStandardAPIErrorMessage(err));\n            setNavigateBack(false);\n          });\n      } else {\n        return PartnerMasterDataService.update(enrichedObj, uid)\n          .then((res) => {\n            setToastMessageVariant(TOAST_STYLE_TYPE.PRIMARY);\n            setToastMessage(\"Saved Successfully\");\n            setTriggerToast(!triggerToast);\n            setNavigateBack(true);\n          })\n          .catch((err) => {\n            setErrorMessage(parseStandardAPIErrorMessage(err));\n            setNavigateBack(false);\n          });\n      }\n    } else {\n      setPosition(\"top-right\");\n      setToastMessageVariant(TOAST_STYLE_TYPE.QUATERNARY);\n      setToastMessage(STATIC_MASTER_TYPE_TOAST_TEXT.ERROR);\n      setTriggerToast(!triggerToast);\n      forceUpdate((prev) => !prev);\n      simpleValidator?.current?.showMessages();\n      forceUpdate((prev) => !prev);\n    }\n  };\n  const onAddRow = () => {\n    bankOrExpanelmentRef?.current?.addRow(\n      JSON.parse(JSON.stringify(initialObjForEmpalamentRowDataObj))\n    );\n  };\n  const onAddRowForPartnerAgreementDetails = () => {\n    partnerAgreementDetailRef?.current?.addRow(initialObjForPartnerAgreementDetail);\n  };\n  const onAddPartnerContactDetail = () => {\n    partnerContactDetailRef?.current?.addRow(initialObjForPartnerContactDetails);\n  };\n  const onAddRowForKeyPerson = () => {\n    keyPersonRef?.current?.addRow(initialObjForKeyPerson);\n  };\n  const onAddRowForReference = () => {\n    referenceRef?.current?.addRow(initialObjForReference);\n  };\n  const onAddBankDetails = () => {\n    bankDetailRef?.current?.addRow(initialObjForTableBankDetails);\n  };\n  const onAddGstDetails = () => {\n    gstDetailsRef?.current?.addRow(initialObjForGstDetails);\n  };\n  const onAddOrganisationLevelReport = () => {\n    organisationReportingLevelRef?.current?.addRow(initialObjForOrganisationReporting);\n  };\n  /*\n    ----------- Validators -----------\n  */\n  const validateField = (e: any) => {\n    simpleValidator?.current?.showMessageFor(e?.target?.name);\n  };\n  const validate = (e: any) => {\n    simpleValidator?.current?.showMessageFor(e?.target?.name);\n  };\n  const searchAutoCompleteCity = async (event: any) => {\n    let suggestionsTemplate: any = [];\n    setIsLoading(true);\n    await CityService.getAll(0, 10, `isActive=true&name:lk=${event.query}&`).then((res) => {\n      if (validateGetAPIResponse(res)) {\n        suggestionsTemplate = [...res.data.results];\n        setIsLoading(false);\n      }\n    });\n    setSuggestionsTemplate(suggestionsTemplate);\n  };\n  const itemTemplateForCity = (item: any) => {\n    if (item.name === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"mt-2 text-primary-labelColor\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.name} />\n        <Text className=\"font-medium text-primary-labelColor\" label={item.state.name} />\n      </div>\n    );\n  };\n  const handleImageResponseCommonForAll = (ref: any, attachmentInfo: any, rowData: any) => {\n    const rowDataObj = { ...rowData };\n    rowDataObj.attachment = attachmentInfo;\n    ref.current?.reportDataChange(rowDataObj);\n  };\n  // const handleImageResponseForEnalament = (attachmentInfo: any, rowData: any) => {\n  //   const rowDataObj = { ...rowData };\n  //   rowDataObj.attachment = attachmentInfo;\n  //   bankOrExpanelmentRef.current?.reportDataChange(rowDataObj);\n  // };\n  // const handleImageResponseForKeyPerson = (attachmentInfo: any, rowData: any) => {\n  //   const rowDataObj = { ...rowData };\n  //   rowDataObj.attachment = attachmentInfo;\n  //   keyPersonRef.current?.reportDataChange(rowDataObj);\n  // };\n  // const handleImageResponseForBankDetails = (attachmentInfo: any, rowData: any) => {\n  //   const rowDataObj = { ...rowData };\n  //   rowDataObj.attachment = attachmentInfo;\n  //   bankDetailRef.current?.reportDataChange(rowDataObj);\n  // };\n  // const handleImageResponseForGstDetails = (attachmentInfo: any, rowData: any) => {\n  //   const rowDataObj = { ...rowData };\n  //   rowDataObj.attachment = attachmentInfo;\n  //   gstDetailsRef.current?.reportDataChange(rowDataObj);\n  // };\n\n  const itemTemplate = (item: any) => {\n    if (item.name === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"mt-2 text-primary-labelColor\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.name} />\n        <Text className=\"text-secondary-gray-500 text-xxs\" label={item.code} />\n        <Text className=\"text-secondary-gray-500 text-xxs\" label={item.emailId} />\n      </div>\n    );\n  };\n  const itemTemplateForIfscCode = (item: any) => {\n    if (item.ifscCode === undefined) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-39\">\n          <img src={LoadingIcon} alt=\"search-icon\" className=\" h-7 w-7\" />\n          <Text className=\"mt-2 text-primary-labelColor\" label=\"Loading...\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex flex-col\">\n        <Text className=\"text-primary-labelColor\" label={item.ifscCode} />\n        <Text className=\"text-secondary-gray-500 text-xxs\" label={item.branch} />\n      </div>\n    );\n  };\n  const handleDataEntryTypeCheckBoxes = (formData: any) => {\n    setDataEntryData(formData);\n    console.log(dataEntryData);\n  };\n\n  /*\n    ----------- HELPER FUNCTIONS -----------\n  */\n  const getCurrentDate = async () => {\n    try {\n      const res = await SystemDate.getCurrentDate();\n      setCurrentDate(formatDate(res.data?.date));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getPageTitle = () => {\n    switch (pageMode) {\n      case PAGE_MODE.CREATE:\n        return \"title.partnerOnboarding.CreateScreen\";\n      case PAGE_MODE.VIEW:\n        return \"title.partnerOnboarding.ViewScreen\";\n      case PAGE_MODE.EDIT:\n        return \"title.partnerOnboarding.EditScreen\";\n      default:\n        return \"title.partnerOnboarding.CreateScreen\";\n    }\n  };\n  const debounce = (func: any, delay: any) => {\n    clearTimeout(timeOutLocal);\n    setTimeOutLocal(setTimeout(func, delay));\n  };\n\n  // helpers Actions\n  const onDeleteCommonFunctionForEveryTable = (ref: any, rowData: any) => {\n    ref.current?.deleteRow(rowData);\n    simpleValidator.current = new SimpleReactValidator({\n      validators: { ...getStandardValidator() },\n      ...messageReplace(),\n      autoForceUpdate: { forceUpdate: () => forceUpdate((prev) => !prev) },\n    });\n  };\n  const getBankFianancierAutoCompleteForEnalament = (\n    event: any,\n    start?: any,\n    totalRecords?: any\n  ) => {\n    const startValue = start ?? 0;\n    const limit = 500;\n    const searchParam = `&isActive=true&name:lk=${event.query}&`;\n    totalRecords = totalRecords ?? 100;\n\n    if (totalRecords >= startValue) {\n      BankMasterDataService.getAll(startValue, limit, searchParam).then((res) => {\n        const results = res.data?.results?.length > 0 ? [...res.data.results] : [];\n\n        if (results.length === 0) {\n          setBankFinancierForEnalmentList([{ name: AUTOCOMPLETE_MESSAGES.NO_Banks }]);\n        } else {\n          setBankFinancierForEnalmentList([...results]);\n        }\n      });\n    }\n  };\n  const getIfscListForBankDetails = (event: any, start?: any, totalRecords?: any) => {\n    const startValue = start ?? 0;\n    const limit = 500;\n    const searchParam = `&isActive=true&ifscCode:lk=${event.query}&`;\n    totalRecords = totalRecords ?? 100;\n\n    if (totalRecords >= startValue) {\n      BankAccountDetailsService.getAllIfsc(startValue, limit, searchParam).then((res) => {\n        const results = res.data?.results?.length > 0 ? [...res.data.results] : [];\n\n        if (results.length === 0) {\n          setIfscCodeList([{ name: AUTOCOMPLETE_MESSAGES.NO_IfscCode }]);\n        } else {\n          setIfscCodeList([...results]);\n        }\n      });\n    }\n  };\n  const getReportingToList = (event: any, rowData: any, start?: any, totalRecords?: any) => {\n    const selectedReporting = reportingList.find((key: any) => key.uid == rowData.reporting.uid);\n    const startValue = start ?? 0;\n    const limit = 500;\n    const searchParam = `isActive=true&name:lk=${event.query}&`;\n    totalRecords = totalRecords ?? 100;\n    if (selectedReporting.code === REPORTING_TYPES.REPORT_ORGANIZATION_REPORTING_LEVELS) {\n      // organisation reporting level\n      if (totalRecords >= startValue) {\n        OrgStructureLevelService.getAll(startValue, limit, searchParam).then((res) => {\n          const results = res.data?.results?.length > 0 ? [...res.data.results] : [];\n\n          if (results.length === 0) {\n            setReportingToList([{ name: AUTOCOMPLETE_MESSAGES.NO_OrgReportingLevel }]);\n          } else {\n            setReportingToList([...results]);\n          }\n        });\n      }\n    } else {\n      // Branches\n      if (totalRecords >= startValue) {\n        OrgStructureBranchService.getAll(startValue, limit, searchParam).then((res) => {\n          const results = res.data?.results?.length > 0 ? [...res.data.results] : [];\n\n          if (results.length === 0) {\n            setReportingToList([{ name: AUTOCOMPLETE_MESSAGES.NO_Branch }]);\n          } else {\n            setReportingToList([...results]);\n          }\n        });\n      }\n    }\n  };\n  const searchUsers = (event: any) => {\n    if (event.query.length >= 1) {\n      debounce(() => getUserList(event), 1200);\n    } else {\n      setUserList([]);\n    }\n  };\n  const searchState = (event: any) => {\n    if (event.query.length >= 1) {\n      debounce(() => getStateList(event), 1200);\n    } else {\n      setStateList([]);\n    }\n  };\n  const searchBankOrFinancierForExpanalment = (event: any) => {\n    if (event.query.length >= 1) {\n      debounce(() => getBankFianancierAutoCompleteForEnalament(event), 1200);\n    } else {\n      setBankFinancierForEnalmentList([]);\n    }\n  };\n  const searchIfscListForBankDetails = (event: any) => {\n    if (event.query.length >= 1) {\n      debounce(() => getIfscListForBankDetails(event), 1200);\n    } else {\n      setIfscCodeList([]);\n    }\n  };\n  const searchReportingTo = (event: any, rowData: any) => {\n    if (event.query.length >= 1) {\n      debounce(() => getReportingToList(event, rowData), 1200);\n    } else {\n      setReportingList([]);\n    }\n  };\n  const renderRowClassName = (rowData: any) => {\n    if (rowData?.isInactive) {\n      return \" !bg-semantic-crimson-100\";\n    } else if (rowData?.isAdded) {\n      return \" !bg-semantic-deepSkyBlue-100\";\n    } else if (rowData?.isUpdated) {\n      return \" !bg-semantic-yellow-100\";\n    }\n  };\n  const uploadAttachment = async (e: any) => {\n    const file = e.files[0];\n    // Generate a unique object name\n    const timestamp = new Date().getTime();\n    const randomString = Math.random().toString(36).substring(2, 8);\n    const objectName = `${file.name}_${timestamp}_${randomString}`;\n    let obj = { ...initialAttachmentForRateCard, name: objectName };\n    const createdAt = generateCreateAtDate();\n    // @ts-ignore: will fix later\n    dataTableRefForRateCard?.current?.addRecords(obj);\n    await FileUploadService.saveFile(file, objectName)\n      .then((res: any) => {\n        obj = {\n          ...obj,\n          url:\n            res.data?.imageUrl ??\n            res.data.thumbUrl ??\n            res?.data?.videoUrl ??\n            res?.data?.documentUrl,\n          isUploaded: true,\n          createdAt,\n        };\n        setTimeout(() => {\n          // @ts-ignore: will fix later\n          dataTableRefForRateCard?.current?.updateAddedRecords(obj, \"name\");\n        }, 2);\n        setTimeout(() => {\n          // @ts-ignore: will fix later\n          const records = dataTableRefForRateCard?.current?.getAddedRecords();\n\n          setAttachmentTypeRecordsAdded(records);\n        }, 4);\n      })\n      .catch((err) => {\n        setTimeout(() => {\n          // @ts-ignore: will fix later\n          const records = dataTableRefForRateCard?.current?.getAddedRecords();\n\n          setAttachmentTypeRecordsAdded(records);\n        }, 4);\n      });\n  };\n\n  // ----------------- TABLE COLUMN RENDERING FUNCTIONS -----------------\n\n  const renderBankOrFinancierForExpanelment = (rowData: any) => {\n    return (\n      <div className=\"\">\n        <AutoComplete\n          name={`bank-${rowData.uid}`}\n          value={rowData?.bank.name}\n          variant={DROPDOWN_STYLE_TYPE.PRIMARY}\n          suggestions={bankFinancierForExpanalmentList}\n          completeMethod={searchBankOrFinancierForExpanalment}\n          onChange={(e) => {\n            const rowDataObj = { ...rowData };\n            if (typeof e.target.value === \"object\") {\n              rowDataObj.bank = e.target.value;\n            } else {\n              rowDataObj.bank.name = e.target.value;\n            }\n            console.log(rowDataObj, \"empala\");\n            bankOrExpanelmentRef.current?.reportDataChange(rowDataObj);\n          }}\n          itemTemplate={itemTemplate}\n          field=\"name\"\n          onBlur={validate}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          validation={simpleValidator?.current?.message(\n            `bank-${rowData.uid}`,\n            rowData.bank.uid,\n            \"autocomplete\"\n          )}\n          errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n        />\n      </div>\n    );\n  };\n  const renderProfessionalMembership = (rowData: any) => {\n    return (\n      <div className=\"\">\n        <InputBox\n          name={`ProfessionalMembership-${rowData.uid}`}\n          onBlur={validate}\n          variant={INPUT_STYLE_TYPE.SECONDARY}\n          onChange={(e) => {\n            const rowDataObj = { ...rowData };\n            console.log(rowDataObj, \"rowData\");\n            rowDataObj.professionalMembership = e.target.value;\n\n            bankOrExpanelmentRef.current?.reportDataChange(rowDataObj);\n          }}\n          validation={simpleValidator?.current?.message(\n            `ProfessionalMembership-${rowData.uid}`,\n            rowData.professionalMembership,\n            \"mandatory\"\n          )}\n          value={rowData.professionalMembership}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n        />\n      </div>\n    );\n  };\n  const renderAttachmentsForEnalament = (rowData: any) => {\n    return (\n      <FileUploaderAndView\n        fileInfo={rowData?.attachment}\n        label=\"Select Your Files\"\n        onImageResponse={(attachmentInfo: any) =>\n          handleImageResponseCommonForAll(bankOrExpanelmentRef, attachmentInfo, rowData)\n        }\n      />\n    );\n  };\n  const renderActionsForExpanelment = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(bankOrExpanelmentRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  // Partner Agreement Detail\n\n  const renderDateOfAgreementForPartnerAgreementDetails = (rowData: any) => {\n    console.log(rowData, \"main\");\n    return (\n      <DatePicker\n        disabled={pageMode === PAGE_MODE.VIEW}\n        name={`date-${rowData.uid}`}\n        value={rowData.date}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.date = e.target.value;\n          partnerAgreementDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        onBlur={validate}\n        validation={\n          new Date(rowData.date) < new Date(currentDate)\n            ? \"Applicable from Date should not be less than System Date\"\n            : simpleValidator?.current?.message(`date-${rowData.uid}`, rowData.date, \"mandatory\")\n        }\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n  const renderDateOfAgreementExpiryDateForPartnerAgreementDetails = (rowData: any) => {\n    return (\n      <DatePicker\n        disabled={pageMode === PAGE_MODE.VIEW}\n        name={`expiryDate-${rowData.uid}`}\n        value={rowData.expiryDate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.expiryDate = e.target.value;\n          partnerAgreementDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        onBlur={validate}\n        validation={\n          new Date(rowData.expiryDate) < new Date(currentDate)\n            ? \"Applicable from Date should not be less than System Date\"\n            : simpleValidator?.current?.message(\n                `expiryDate-${rowData.uid}`,\n                rowData.expiryDate,\n                \"mandatory\"\n              )\n        }\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n  const renderDateOfAgreementStartDateForPartnerAgreementDetails = (rowData: any) => {\n    return (\n      <DatePicker\n        disabled={pageMode === PAGE_MODE.VIEW}\n        name={`startDate-${rowData.uid}`}\n        value={rowData.startDate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onBlur={validate}\n        onChange={(e) => {\n          // debugger\n\n          const rowDataObj = { ...rowData };\n          rowDataObj.startDate = e.target.value;\n          partnerAgreementDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={\n          new Date(rowData.startDate) < new Date(currentDate)\n            ? \"Applicable from Date should not be less than System Date\"\n            : simpleValidator?.current?.message(\n                `startDate-${rowData.uid}`,\n                rowData.startDate,\n                \"mandatory\"\n              )\n        }\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n  const renderActionsForPartnerAgreementDetails = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(partnerAgreementDetailRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  // Contact Detail\n  const renderContactTypeForPartnerContactDetail = (rowData: any) => {\n    return (\n      <SimpleDropDown\n        name={`type-${rowData.uid}`}\n        value={rowData.type?.uid}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          if (typeof e.target.value === \"object\") {\n            rowDataObj.type = e.target.value;\n          } else {\n            rowDataObj.type.uid = e.target.value;\n          }\n\n          partnerContactDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `type-${rowData.uid}`,\n          rowData.type.uid,\n          \"autocomplete\"\n        )}\n        onBlur={validate}\n        options={ContactTypeList}\n        optionLabel=\"name\"\n        optionValue=\"uid\"\n      />\n    );\n  };\n  const renderContactInfoForPartnerContactDetail = (rowData: any) => {\n    return (\n      <div className=\"\">\n        <InputBox\n          className=\"\"\n          name={`info-${rowData.uid}`}\n          onBlur={validate}\n          variant={INPUT_STYLE_TYPE.SECONDARY}\n          onChange={(e) => {\n            const rowDataObj = { ...rowData };\n            rowDataObj.info = e.target.value;\n            partnerContactDetailRef.current?.reportDataChange(rowDataObj);\n          }}\n          validation={simpleValidator?.current?.message(\n            `info-${rowData.uid}`,\n            rowData.info,\n            \"mandatory\"\n          )}\n          value={rowData.info}\n          disabled={pageMode === PAGE_MODE.VIEW}\n        />\n      </div>\n    );\n  };\n  const renderActionsForPartnerContactDetail = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(partnerContactDetailRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  // key person\n\n  const renderNameForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`name${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.name = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `name${rowData.uid}`,\n          rowData.name,\n          \"mandatory\"\n        )}\n        value={rowData.name}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderEducationalQualificationForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`educationalQualification${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.educationalQualification = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `educationalQualification${rowData.uid}`,\n          rowData.educationalQualification,\n          \"mandatory\"\n        )}\n        value={rowData.educationalQualification}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderTotalWorkExperienceForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`totalWorkExp${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.totalWorkExp = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `totalWorkExp${rowData.uid}`,\n          rowData.totalWorkExp,\n          \"mandatory\"\n        )}\n        value={rowData.totalWorkExp}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderExperienceInTheRoleForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`expLegalRole${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.expLegalRole = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `expLegalRole${rowData.uid}`,\n          rowData.expLegalRole,\n          \"mandatory\"\n        )}\n        value={rowData.expLegalRole}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderEnrollmentNumberForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`enrollmentNumber${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.enrollmentNumber = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `enrollmentNumber${rowData.uid}`,\n          rowData.enrollmentNumber,\n          \"mandatory\"\n        )}\n        value={rowData.enrollmentNumber}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderPanCardForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`pan${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.pan = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `pan${rowData.uid}`,\n          rowData.pan,\n          \"mandatory\"\n        )}\n        value={rowData.pan}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderRegistrationNumberForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`registrationNumber${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.registrationNumber = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `registrationNumber${rowData.uid}`,\n          rowData.registrationNumber,\n          \"mandatory|onlyInteger|min:0,num\"\n        )}\n        value={rowData.registrationNumber}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderAdhaarNumberForKeyPerson = (rowData: any) => {\n    return (\n      <InputBox\n        name={`aadhar${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.aadhar = e.target.value;\n          keyPersonRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `aadhar${rowData.uid}`,\n          rowData.aadhar,\n          \"mandatory|onlyInteger|min:0,num\"\n        )}\n        value={rowData.aadhar}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderAttachmentForKeyPerson = (rowData: any) => {\n    return (\n      <FileUploaderAndView\n        fileInfo={rowData?.attachment}\n        label=\"Select Your Files\"\n        onImageResponse={(attachmentInfo: any) =>\n          handleImageResponseCommonForAll(keyPersonRef, attachmentInfo, rowData)\n        }\n      />\n    );\n  };\n  const renderActionsForKeyPerson = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(keyPersonRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  // reference\n  const renderNameForReference = (rowData: any) => {\n    return (\n      <InputBox\n        name={`name${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.name = e.target.value;\n          referenceRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `name${rowData.uid}`,\n          rowData.name,\n          \"mandatory\"\n        )}\n        value={rowData.name}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderDesignationForReference = (rowData: any) => {\n    return (\n      <InputBox\n        name={`designation${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.designation = e.target.value;\n          referenceRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `designation${rowData.uid}`,\n          rowData.designation,\n          \"mandatory|onlyInteger|min:0,num\"\n        )}\n        value={rowData.designation}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderBankOrFinancierForReference = (rowData: any) => {\n    return (\n      <AutoComplete\n        name={`bank-${rowData.uid}`}\n        value={rowData.bank.uid}\n        variant={DROPDOWN_STYLE_TYPE.PRIMARY}\n        suggestions={bankFinancierForExpanalmentList}\n        completeMethod={searchBankOrFinancierForExpanalment}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.bank.uid = e.target.value;\n          referenceRef.current?.reportDataChange(rowDataObj);\n        }}\n        itemTemplate={itemTemplate}\n        field=\"name\"\n        onBlur={validate}\n        disabled={pageMode === PAGE_MODE.VIEW}\n        validation={simpleValidator?.current?.message(\n          `bank-${rowData.uid}`,\n          rowData.bank,\n          \"autocomplete\"\n        )}\n        errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n      />\n    );\n  };\n  const renderAddressForReference = (rowData: any) => {\n    return (\n      <InputBox\n        name={`address${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.address = e.target.value;\n          referenceRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `address${rowData.uid}`,\n          rowData.address,\n          \"mandatory\"\n        )}\n        value={rowData.address}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderMobileNumberForReference = (rowData: any) => {\n    return (\n      <InputBox\n        name={`mobile${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.mobile = e.target.value;\n          referenceRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `mobile${rowData.uid}`,\n          rowData.mobile,\n          \"mandatory\"\n        )}\n        value={rowData.mobile}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderBriefProfileForReference = (rowData: any) => {\n    return (\n      <InputBox\n        name={`briefProfile${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.briefProfile = e.target.value;\n          referenceRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `briefProfile${rowData.uid}`,\n          rowData.briefProfile,\n          \"mandatory\"\n        )}\n        value={rowData.briefProfile}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderActionsForReference = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(referenceRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  // Bank Details\n\n  const renderBankNameForBankDetails = (rowData: any) => {\n    return (\n      <AutoComplete\n        name={`bank-${rowData.uid}`}\n        value={rowData.bank.name}\n        variant={DROPDOWN_STYLE_TYPE.PRIMARY}\n        suggestions={bankFinancierForExpanalmentList}\n        completeMethod={searchBankOrFinancierForExpanalment}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          if (typeof e.target.value === \"object\") {\n            rowDataObj.bank = e.target.value;\n          } else {\n            rowDataObj.bank.name = e.target.value;\n          }\n          bankDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        itemTemplate={itemTemplate}\n        field=\"name\"\n        onBlur={validate}\n        disabled={pageMode === PAGE_MODE.VIEW}\n        hideLabel\n        validation={simpleValidator?.current?.message(\n          `bank-${rowData.uid}`,\n          rowData.bank.uid,\n          \"autocomplete\"\n        )}\n        errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n      />\n    );\n  };\n  const renderAccountHolderForBankDetails = (rowData: any) => {\n    return (\n      <InputBox\n        name={`accountHolder${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.accountHolder = e.target.value;\n          bankDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `accountHolder${rowData.uid}`,\n          rowData.accountHolder,\n          \"mandatory\"\n        )}\n        value={rowData.accountHolder}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderAccountNumberForBankDetails = (rowData: any) => {\n    return (\n      <InputBox\n        name={`accountNumber${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.accountNumber = e.target.value;\n          bankDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `accountNumber${rowData.uid}`,\n          rowData.accountNumber,\n          \"mandatory\"\n        )}\n        value={rowData.accountNumber}\n        disabled={pageMode === PAGE_MODE.VIEW}\n      />\n    );\n  };\n  const renderIfscNumberForBankDetails = (rowData: any) => {\n    return (\n      <AutoComplete\n        name={`ifsc-${rowData.uid}`}\n        value={rowData.ifsc?.ifscCode}\n        variant={DROPDOWN_STYLE_TYPE.PRIMARY}\n        suggestions={ifscCodeList}\n        completeMethod={searchIfscListForBankDetails}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          if (typeof e.target.value === \"object\") {\n            rowDataObj.ifsc = e.target.value;\n          } else {\n            rowDataObj.ifsc.name = e.target.value;\n          }\n          console.log(rowDataObj, \"ifsc\");\n          bankDetailRef.current?.reportDataChange(rowDataObj);\n        }}\n        itemTemplate={itemTemplateForIfscCode}\n        field=\"name\"\n        onBlur={validate}\n        disabled={pageMode === PAGE_MODE.VIEW}\n        hideLabel\n        validation={simpleValidator?.current?.message(\n          `ifsc-${rowData.uid}`,\n          rowData.ifsc.uid,\n          \"autocomplete\"\n        )}\n        errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n      />\n    );\n  };\n  const renderAttachmentsForBankDetails = (rowData: any) => {\n    return (\n      <FileUploaderAndView\n        fileInfo={rowData?.attachment}\n        label=\"Select Your Files\"\n        onImageResponse={(attachmentInfo: any) =>\n          handleImageResponseCommonForAll(bankDetailRef, attachmentInfo, rowData)\n        }\n      />\n    );\n  };\n  const renderActionsForBankDetails = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(bankDetailRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  // gst Details\n  const renderGstNumberForGstDetails = (rowData: any) => {\n    return (\n      <InputBox\n        name={`gstNumber${rowData.uid}`}\n        onBlur={validate}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          console.log(rowData, \"onchange\");\n          const rowDataObj = { ...rowData };\n          rowDataObj.gstNumber = e.target.value;\n          gstDetailsRef.current?.reportDataChange(rowDataObj);\n        }}\n        validation={simpleValidator?.current?.message(\n          `gstNumber${rowData.uid}`,\n          rowData.gstNumber,\n          \"mandatory\"\n        )}\n        value={rowData.gstNumber}\n        disabled={pageMode === PAGE_MODE.VIEW}\n        errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n      />\n    );\n  };\n  const renderGstStateForGstDetails = (rowData: any) => {\n    return (\n      <AutoComplete\n        name={`gstState-${rowData.uid}`}\n        value={rowData.gstState.name}\n        variant={DROPDOWN_STYLE_TYPE.PRIMARY}\n        suggestions={stateList}\n        completeMethod={searchState}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          if (typeof e.target.value === \"object\") {\n            rowDataObj.gstState = e.target.value;\n          } else {\n            rowDataObj.gstState.name = e.target.value;\n          }\n\n          gstDetailsRef.current?.reportDataChange(rowDataObj);\n        }}\n        itemTemplate={itemTemplate}\n        field=\"name\"\n        onBlur={validate}\n        disabled={pageMode === PAGE_MODE.VIEW}\n        validation={simpleValidator?.current?.message(\n          `gstState-${rowData.uid}`,\n          rowData.gstState.uid,\n          \"autocomplete\"\n        )}\n        errorClassNames=\"!m-0 !p-0 !text-xxs !h-2.5\"\n      />\n    );\n  };\n  const renderAttachmentsForGstDetails = (rowData: any) => {\n    return (\n      <FileUploaderAndView\n        fileInfo={rowData?.attachment}\n        label=\"Select Your Files\"\n        onImageResponse={(attachmentInfo: any) =>\n          handleImageResponseCommonForAll(gstDetailsRef, attachmentInfo, rowData)\n        }\n      />\n    );\n  };\n  const renderActionsForGstDetails = (rowData: any) => {\n    return (\n      <div className=\"pb-[10px]\">\n        <IconButton\n          buttonType={BUTTON_TYPES.DELETE}\n          onClick={() => onDeleteCommonFunctionForEveryTable(gstDetailsRef, rowData)}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          tooltipOptions={{\n            position: \"left\",\n            className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n            showDelay: \"1000,\",\n            hideDelay: \"300\",\n          }}\n        />\n      </div>\n    );\n  };\n\n  //Organisation Reporting Level\n\n  const renderReportingForOrganisationReportingLevels = (rowData: any) => {\n    return (\n      <div className=\"\">\n        <SimpleDropDown\n          name={`reporting${rowData.uid}`}\n          options={reportingList}\n          optionLabel=\"name\"\n          optionValue=\"uid\"\n          value={rowData?.reporting.uid}\n          variant={INPUT_STYLE_TYPE.SECONDARY}\n          onChange={(e) => {\n            const rowDataObj = { ...rowData };\n            rowDataObj.reporting.uid = e.target.value;\n\n            const selectedReporting = reportingList.find(\n              (key: any) => key.uid == rowDataObj.reporting.uid\n            );\n            //\n            rowDataObj.selectedReportType = selectedReporting.code;\n            if (selectedReporting.code === REPORTING_TYPES.REPORT_ORGANIZATION_REPORTING_LEVELS) {\n              rowDataObj.branch = null;\n              rowDataObj.orgRepLevel = { uid: \"\", name: \"\" };\n            } else {\n              rowDataObj.orgRepLevel = null;\n              rowDataObj.branch = { uid: \"\", name: \"\" };\n            }\n            //  here when we change the reporting then reporting to will be empty\n            organisationReportingLevelRef.current?.reportDataChange(rowDataObj);\n          }}\n          onBlur={validate}\n          disabled={pageMode === PAGE_MODE.VIEW}\n          validation={simpleValidator?.current?.message(\n            `reporting${rowData.uid}`,\n            rowData.reporting.uid,\n            \"autocomplete\"\n          )}\n        />\n      </div>\n    );\n  };\n\n  // ...\n\n  const renderReportingToForOrganisationReportingLevels = (rowData: any) => {\n    const validationRuleName = rowData.temp\n      ? rowData.selectedReportType === REPORTING_TYPES.REPORT_ORGANIZATION_REPORTING_LEVELS\n        ? \"orgRepLevel\"\n        : rowData.selectedReportType === REPORTING_TYPES.REPORT_BRANCH\n        ? \"branch\"\n        : \"\"\n      : rowData?.branch\n      ? \"branch\"\n      : rowData.orgRepLevel\n      ? \"orgRepLevel\"\n      : \"\";\n\n    return (\n      <div className=\"-mt-1\">\n        <AutoComplete\n          name={`${validationRuleName}-${rowData.uid}`}\n          value={rowData[validationRuleName]?.name}\n          variant={DROPDOWN_STYLE_TYPE.PRIMARY}\n          suggestions={reportingToList}\n          completeMethod={(event) => searchReportingTo(event, rowData)}\n          onChange={(e: any) => {\n            const rowDataObj = { ...rowData };\n            if (typeof e.target.value === \"object\") {\n              rowDataObj[validationRuleName] = e.target.value;\n            } else {\n              rowDataObj[validationRuleName] = {};\n              rowDataObj[validationRuleName].name = e.target.value;\n            }\n            organisationReportingLevelRef.current?.reportDataChange(rowDataObj);\n          }}\n          itemTemplate={itemTemplate}\n          field=\"name\"\n          onBlur={validate}\n          disabled={pageMode === PAGE_MODE.EDIT && rowData.temp !== true}\n          validation={\n            validationRuleName\n              ? simpleValidator?.current?.message(\n                  `${validationRuleName}-${rowData.uid}`,\n                  rowData[validationRuleName]?.uid,\n                  \"autocomplete\"\n                )\n              : false\n          }\n        />\n      </div>\n    );\n  };\n  const renderDateFromForOrganisationLevelReportingLevels = (rowData: any) => {\n    const applicableFromDate = new Date(rowData.applicableFrom);\n    const parsedYear = applicableFromDate.getFullYear();\n    const parsedMonth = applicableFromDate.getMonth();\n    const parsedDay = applicableFromDate.getDate();\n    const parsedDate = new Date(parsedYear, parsedMonth, parsedDay);\n\n    return (\n      <DatePicker\n        disabled={!rowData.temp && pageMode === PAGE_MODE.EDIT}\n        name={`applicableFrom${rowData.uid}`}\n        value={rowData.applicableFrom != \"\" ? parsedDate : \"\"}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.applicableFrom = e.target.value;\n          organisationReportingLevelRef.current?.reportDataChange(rowDataObj);\n        }}\n        onBlur={validate}\n        validation={\n          new Date(rowData.expiryDate) < new Date(currentDate)\n            ? \"Applicable from Date should not be less than System Date\"\n            : simpleValidator?.current?.message(\n                `applicableFrom${rowData.uid}`,\n                rowData.applicableFrom,\n                \"mandatory\"\n              )\n        }\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n  const renderDateToForOrganisationLevelReportingLevels = (rowData: any) => {\n    return (\n      <DatePicker\n        // disabled={\n        //   !rowData.temp && pageMode === PAGE_MODE.EDIT\n        //     ? rowData.applicableTo\n        //       ? true\n        //       : false\n        //     : false\n        // }\n        name={`applicableTo${rowData.uid}`}\n        value={rowData.applicableTo != null ? getParsedDate(rowData.applicableTo) : \"\"}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          const rowDataObj = { ...rowData };\n          rowDataObj.applicableTo = e.target.value ?? \"\";\n          organisationReportingLevelRef.current?.reportDataChange(rowDataObj);\n        }}\n        minDate={getParsedDate(rowData.applicableFrom)}\n        placeholder=\"DD-MMM-YYYY\"\n      />\n    );\n  };\n  const renderIsUserActiveForOrganisationReportingLevels = (rowData: any, props: any) => {\n    return <>{rowData.isActive ? \"Yes\" : \"No\"}</>;\n  };\n\n  // const renderActionsForOrganisationReportingLevels = (rowData: any) => {\n  //   return (\n  //     <div className=\"pb-[10px]\">\n  //       <IconButton\n  //         buttonType={BUTTON_TYPES.DELETE}\n  //         onClick={() =>\n  //           onDeleteCommonFunctionForEveryTable(organisationReportingLevelRef, rowData)\n  //         }\n  //         disabled={pageMode === PAGE_MODE.VIEW}\n  //         tooltipOptions={{\n  //           position: \"left\",\n  //           className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n  //           showDelay: \"1000,\",\n  //           hideDelay: \"300\",\n  //         }}\n  //       />\n  //     </div>\n  //   );\n  // };\n  // const renderActionsForOrganisationReportingLevels = (rowData: any) => {\n  //   return (\n  //     <div className=\"pb-[10px]\">\n  //       <IconButton\n  //         buttonType={BUTTON_TYPES.DELETE}\n  //         onClick={() =>\n  //           onDeleteCommonFunctionForEveryTable(organisationReportingLevelRef, rowData)\n  //         }\n  //         disabled={pageMode === PAGE_MODE.VIEW}\n  //         tooltipOptions={{\n  //           position: \"left\",\n  //           className: \"text-xs font-Roboto bg-black text-white !p-1 rounded-md \",\n  //           showDelay: \"1000,\",\n  //           hideDelay: \"300\",\n  //         }}\n  //       />\n  //     </div>\n  //   );\n  // };\n\n  const onToggleMenu = (rowData: any, e: any) => {\n    const isActive = {\n      label: \"Deactivate\",\n      command: () => {\n        if (pageMode !== PAGE_MODE.CREATE) {\n          const rowDataObj = { ...rowData };\n          console.log(rowDataObj);\n          rowDataObj.isActive = false;\n          organisationReportingLevelRef.current?.reportDataChange(rowDataObj);\n        }\n      },\n    };\n\n    const isNotActive = {\n      label: \"Activate\",\n      command: () => {\n        if (pageMode !== PAGE_MODE.CREATE) {\n          const rowDataObj = { ...rowData };\n          console.log(rowDataObj);\n          rowDataObj.isActive = true;\n          organisationReportingLevelRef.current?.reportDataChange(rowDataObj);\n        }\n      },\n    };\n\n    const deleteOption = {\n      label: \"Delete\",\n      command: () => {\n        onDeleteCommonFunctionForEveryTable(organisationReportingLevelRef, rowData);\n      },\n    };\n\n    const item = rowData.isActive ? isActive : isNotActive;\n\n    // Merge the delete option with existing menu options\n    const list = [\n      {\n        items: pageMode !== PAGE_MODE.CREATE ? [item, deleteOption] : [deleteOption],\n      },\n    ];\n    setEditModuleCardMenu(list);\n\n    // @ts-ignore: Will fix later\n    activeRowRef?.current?.toggle(e);\n  };\n\n  // Existing state initialization (assuming editModuleCardMenu is a state)\n  const [editModuleCardMenu, setEditModuleCardMenu] = useState<any>([\n    {\n      items: [\n        {\n          label: \"Activate\",\n          className: \"\",\n        },\n        {\n          label: \"Deactivate\",\n          className: \"\",\n        },\n      ],\n    },\n  ]);\n\n  // Toggler Render all details here\n  const renderActionsTogglerForOrgReportingLevel = (rowData: any) => {\n    return (\n      <div className=\"-ml-42\">\n        <ButtonBox\n          buttonType={BUTTON_TYPE.MENU}\n          onClick={(e) => {\n            onToggleMenu(rowData, e);\n          }}\n          className=\"!rounded-none bg-transparent !hover:bg-primary-gray-300 \"\n        />\n      </div>\n    );\n  };\n  const [checkboxValues, setCheckboxValues] = useState({\n    inSystemForm: false,\n    UploadFile: false,\n  });\n  useEffect(() => {\n    console.log(checkboxValues);\n  }, [checkboxValues]);\n\n  useEffect(() => {\n    const allowedDataEntryTable = [\n      \"PARTNER_TYPE_TECHNICAL\",\n      \"PARTNER_TYPE_RCU\",\n      \"PARTNER_TYPE_LEGAL\",\n    ];\n    const selectedPartnerType = partnerList.find((key: any) => key.uid == pageObj.PartnerType);\n    if (allowedDataEntryTable.includes(selectedPartnerType?.code)) {\n      setIsDataEntryTypeIsDisable(false);\n    } else {\n      setIsDataEntryTypeIsDisable(true);\n    }\n  }, [pageObj.PartnerType]);\n\n  const handleCheckboxChange = (event: any) => {\n    const { name, checked } = event.target;\n\n    const updatedCheckboxValues: any = {};\n    if (checked) {\n      for (const checkboxName in checkboxValues) {\n        updatedCheckboxValues[checkboxName] = checkboxName === name;\n      }\n    } else {\n      updatedCheckboxValues[name] = checked;\n    }\n\n    setCheckboxValues({\n      ...checkboxValues,\n      ...updatedCheckboxValues,\n    });\n  };\n  const activeRowRef = useRef(null);\n\n  const {\n    name,\n    PartnerType,\n    ChannelType,\n    businessConstitution,\n    reason,\n    city,\n    description,\n    RCUComments,\n    companyProfile,\n    address,\n  } = pageObj;\n  return (\n    <AclGuard>\n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex items-center justify-between w-full\">\n          <PageTitle title={getPageTitle()} />\n\n          <div className=\"flex\">\n            {pageMode === PAGE_MODE.CREATE || pageMode === PAGE_MODE.EDIT ? (\n              <div className=\"flex gap-10\">\n                <div className=\"flex gap-5\">\n                  <ButtonBox buttonType={BUTTON_TYPE.CANCEL_OUTLINE} onClick={onCancelClick} />\n\n                  <ButtonBox\n                    buttonType={BUTTON_TYPE.SAVE_OUTLINE}\n                    onClickWithLoader={onSaveClick}\n                  />\n                </div>\n                <div>\n                  <ButtonBox\n                    className=\"approve-primary\"\n                    buttonType={BUTTON_TYPE.SEND_FOR_APPROVAL}\n                    onClickWithLoader={onApproveClick}\n                  />\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"mr-5\">\n                  <ButtonBox buttonType={BUTTON_TYPE.BACK_OUTLINE} onClick={onBackClick} />\n                </div>\n                <div className=\"\">\n                  <ButtonBox\n                    buttonType={BUTTON_TYPE.EDIT_OUTLINE}\n                    className=\"blue-primary\"\n                    onClick={onEditClick}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        <AclGuard override={{ read: [PAGE_MODE.VIEW, PAGE_MODE.REVIEW].includes(pageMode) }}>\n          <div className=\"grid grid-cols-8 gap-3\">\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-2\">\n              <SimpleDropDown\n                label=\"label.partnerOnboarding.partnerType\"\n                name=\"PartnerType\"\n                placeholder=\"Select\"\n                variant={DROPDOWN_STYLE_TYPE.SECONDARY}\n                options={partnerList}\n                onChange={handleInputChange}\n                value={PartnerType}\n                optionLabel=\"name\"\n                optionValue=\"uid\"\n                onBlur={validateField}\n                validation={simpleValidator?.current?.message(\n                  \"PartnerType\",\n                  PartnerType,\n                  \"mandatory\"\n                )}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-2\">\n              <SimpleDropDown\n                label=\"label.partnerOnboarding.channelType\"\n                name=\"ChannelType\"\n                placeholder=\"Select\"\n                variant={DROPDOWN_STYLE_TYPE.SECONDARY}\n                options={channelList}\n                onChange={handleInputChange}\n                value={ChannelType}\n                optionLabel=\"name\"\n                optionValue=\"uid\"\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-2\">\n              <InputBox\n                label=\"label.partnerOnboarding.name\"\n                name=\"name\"\n                placeholder=\"Enter name\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                onChange={handleInputChange}\n                value={name}\n                onBlur={validateField}\n                validation={simpleValidator?.current?.message(\"name\", name, \"mandatory\")}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-2\">\n              <SimpleDropDown\n                label=\"label.partnerOnboarding.businessConstitution\"\n                name=\"businessConstitution\"\n                placeholder=\"Select\"\n                variant={DROPDOWN_STYLE_TYPE.SECONDARY}\n                options={businessConstitutionList}\n                onChange={handleInputChange}\n                value={businessConstitution}\n                optionLabel=\"name\"\n                optionValue=\"uid\"\n                onBlur={validateField}\n                validation={simpleValidator?.current?.message(\n                  \"businessConstitution\",\n                  businessConstitution,\n                  \"mandatory\"\n                )}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-4\">\n              <InputTextArea\n                label=\"label.partnerOnboarding.address\"\n                name=\"address\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                maxCount={200}\n                onChange={handleInputChange}\n                value={address}\n                onBlur={validateField}\n                validation={simpleValidator?.current?.message(\"address\", address, \"mandatory\")}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-4\">\n              <AutoComplete\n                label=\"label.partnerOnboarding.city\"\n                name=\"city\"\n                placeholder=\"Type to search\"\n                field=\"name\"\n                value={city}\n                validation={simpleValidator?.current?.message(\"city\", city, \"mandatory\")}\n                onBlur={validateField}\n                variant={INPUT_STYLE_TYPE.PRIMARY}\n                suggestions={suggestionsTemplate}\n                completeMethod={searchAutoCompleteCity}\n                onChange={handleInputChange}\n                itemTemplate={itemTemplateForCity}\n                disabled={pageMode === PAGE_MODE.VIEW}\n                loader={isLoading}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-4\">\n              <InputTextArea\n                label=\"label.partnerOnboarding.companyProfile\"\n                name=\"companyProfile\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                maxCount={200}\n                onChange={handleInputChange}\n                value={companyProfile}\n                onBlur={validateField}\n                validation={simpleValidator?.current?.message(\n                  \"companyProfile\",\n                  companyProfile,\n                  \"mandatory\"\n                )}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-4\">\n              <InputTextArea\n                label=\"label.partnerOnboarding.rcuComments\"\n                name=\"RCUComments\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                maxCount={200}\n                onChange={handleInputChange}\n                value={RCUComments}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n            <div className=\"col-span-8 sm:col-span-8 md:col-span-4\">\n              <InputTextArea\n                label=\"input.productConfiguration.transaction.description\"\n                name=\"description\"\n                variant={INPUT_STYLE_TYPE.SECONDARY}\n                maxCount={200}\n                onChange={handleInputChange}\n                value={description}\n                disabled={pageMode === PAGE_MODE.VIEW}\n              />\n            </div>\n\n            {pageMode !== PAGE_MODE.VIEW && (\n              <div className=\"col-span-8 sm:col-span-8 md:col-span-4\">\n                <InputTextArea\n                  label=\"input.productConfiguration.transaction.reasons\"\n                  name=\"reason\"\n                  variant={INPUT_STYLE_TYPE.SECONDARY}\n                  maxCount={200}\n                  onChange={handleInputChange}\n                  value={reason}\n                  onBlur={validateField}\n                  validation={simpleValidator?.current?.message(\"reason\", reason, \"mandatory\")}\n                  disabled={pageMode === PAGE_MODE.VIEW}\n                />\n              </div>\n            )}\n          </div>\n\n          <Text label={\"label.partnerOnboarding.dataEntryType\"} className=\"font-bold\" />\n\n          <div className=\"zerothTable\">\n            <div className=\"flex\">\n              <RadioButton\n                name=\"inSystemForm\"\n                hideLabel\n                checked={checkboxValues.inSystemForm}\n                onChange={handleCheckboxChange}\n                disabled={isDataEntryTypeDisable}\n              />\n              <Text className=\"ml-[20px]\" label={\"label.partnerOnboarding.inSystemForm\"} />\n            </div>\n            <div className=\"flex\">\n              <RadioButton\n                name=\"UploadFile\"\n                hideLabel\n                checked={checkboxValues.UploadFile}\n                onChange={handleCheckboxChange}\n                disabled={isDataEntryTypeDisable}\n              />\n              <Text className=\"ml-[20px]\" label={\"label.partnerOnboarding.uploadFile\"} />\n            </div>\n          </div>\n\n          {/*  <Text label={\"label.partnerOnboarding.partnerData\"} className=\"font-bold\" />\n   \n       <div className=\"flex flex-col gap-3\">\n        <div className=\"flex justify-between w-full \">\n          <Text label={\"label.partnerOnboarding.expanelmentInfo\"} />\n          <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddRow} />\n        </div>\n\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tableEmpanalment}\n          ref={bankOrExpanelmentRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4 pb-2.5 !h-12 pl-6\"\n            header={\"Bank/Financier*\"}\n            body={renderBankOrFinancierForExpanelment}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4 pb-2.5 h-12 pl-6\"\n            header={\"Professional Membership\"}\n            body={renderProfessionalMembership}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4 pb-2.5 h-12 pl-6 \"\n            header=\"Attachments\"\n            body={renderAttachmentsForEnalament}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/12 pb-2.5 h-12 pl-6 \"\n            header=\"Actions\"\n            body={renderActionsForExpanelment}\n            style={{ minWidth: \"70px\" }}\n          />\n        </EditableTableV2>\n      </div>  \n     <div className=\"flex flex-col gap-3 \">\n        <div className=\"flex justify-between w-full\">\n          <Text label={\"label.partnerOnboarding.partnerAgreementDetail\"} />\n          <ButtonBox\n            buttonType={BUTTON_TYPE.ICON_TEXT_ROW}\n            onClick={onAddRowForPartnerAgreementDetails}\n          />\n        </div>\n\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tableAgreement}\n          ref={partnerAgreementDetailRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4  !h-12 pl-6\"\n            header={\"Date Of Agreement\"}\n            body={renderDateOfAgreementForPartnerAgreementDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4  !h-12 pl-6\"\n            header={\"Agreement Start Date\"}\n            body={renderDateOfAgreementStartDateForPartnerAgreementDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4  !h-12 pl-6\"\n            header=\"Agreement Expiry Date\"\n            body={renderDateOfAgreementExpiryDateForPartnerAgreementDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/12  !h-12 pl-6 \"\n            header=\"Actions\"\n            body={renderActionsForPartnerAgreementDetails}\n          />\n        </EditableTableV2>\n      </div>\n       <div className=\"flex flex-col gap-3 \">\n        <div className=\"flex justify-between w-full\">\n          <Text label={\"label.partnerOnboarding.partnerContactDetail\"} />\n          <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddPartnerContactDetail} />\n        </div>\n\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tablecontact}\n          ref={partnerContactDetailRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000 w-3/10\"\n            header={\"Contact Type\"}\n            body={renderContactTypeForPartnerContactDetail}\n          />\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000 w-3/10\"\n            header={\"Contact Info\"}\n            body={renderContactInfoForPartnerContactDetail}\n          />\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000 w-1/10 \"\n            header=\"Actions\"\n            body={renderActionsForPartnerContactDetail}\n          />\n        </EditableTableV2>\n      </div>\n       <div className=\"flex flex-col gap-3 \">\n        <div className=\"flex justify-between w-full\">\n          <Text label={\"label.partnerOnboarding.keyPerson\"} />\n          <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddRowForKeyPerson} />\n        </div>\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tablekeyPerson}\n          ref={keyPersonRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Name*\"}\n            body={renderNameForKeyPerson}\n            style={{ minWidth: \"150px\" }}\n          />\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Educational Qualification*\"}\n            body={renderEducationalQualificationForKeyPerson}\n          />\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Total Work Experience*\"}\n            body={renderTotalWorkExperienceForKeyPerson}\n          />\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Experience In the Role*\"}\n            body={renderExperienceInTheRoleForKeyPerson}\n            style={{ minWidth: \"150px\" }}\n          />\n          <Column\n            className=\"w-4/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Enrollment Number with Professional Institution*\"}\n            body={renderEnrollmentNumberForKeyPerson}\n            style={{ minWidth: \"400px\", border: \"2px solid red\" }}\n          />\n\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Registration Number*\"}\n            body={renderRegistrationNumberForKeyPerson}\n            style={{ minWidth: \"150px\" }}\n          />\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"PAN Card\"}\n            body={renderPanCardForKeyPerson}\n            style={{ minWidth: \"150px\" }}\n          />\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Aadhaar Number\"}\n            body={renderAdhaarNumberForKeyPerson}\n            style={{ minWidth: \"150px\" }}\n          />\n\n          <Column\n            className=\"w-1/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Attachment\"}\n            body={renderAttachmentForKeyPerson}\n            style={{ minWidth: \"250px\" }}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/12  !h-12 pl-6 \"\n            header=\"Actions\"\n            body={renderActionsForKeyPerson}\n          />\n        </EditableTableV2>\n      </div>\n      <div className=\"flex flex-col gap-3 \">\n        <div className=\"flex justify-between w-full\">\n          <Text label={\"label.partnerOnboarding.reference\"} />\n          <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddRowForReference} />\n        </div>\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tableReference}\n          ref={referenceRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Name*\"}\n            body={renderNameForReference}\n          />\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Designation*\"}\n            body={renderDesignationForReference}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs  pb-2.5 !h-12 pl-6\"\n            header={\"Bank/Financier*\"}\n            body={renderBankOrFinancierForReference}\n          />\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Address*\"}\n            body={renderAddressForReference}\n          />\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Mobile Number*\"}\n            body={renderMobileNumberForReference}\n          />\n          <Column\n            className=\"h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Brief profile*\"}\n            body={renderBriefProfileForReference}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/12  !h-12 pl-6 \"\n            header=\"Actions\"\n            body={renderActionsForReference}\n          />\n        </EditableTableV2>\n      </div>\n\n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex justify-between w-full\">\n          <Text label={\"label.partnerOnboarding.bankDetail\"} />\n          <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddBankDetails} />\n        </div>\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tableBankDetails}\n          ref={bankDetailRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/6 pt-2.5 !h-12 pl-6\"\n            header={\"Bank name*\"}\n            body={renderBankNameForBankDetails}\n          />\n          <Column\n            className=\"w-1/6 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Account Holder*\"}\n            body={renderAccountHolderForBankDetails}\n          />\n          <Column\n            className=\"w-1/6 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Account Number*\"}\n            body={renderAccountNumberForBankDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/6 pt-2.5  h-12 pl-6\"\n            header={\"IFSC code*\"}\n            body={renderIfscNumberForBankDetails}\n            style={{border:\"2px red solid\"}}\n          />\n\n          <Column\n            className=\"w-1/6 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={\"Attachments\"}\n            body={renderAttachmentsForBankDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/12  !h-12 pl-6 \"\n            header=\"Actions\"\n            body={renderActionsForBankDetails}\n          />\n        </EditableTableV2>\n      </div>\n\n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex justify-between w-full \">\n          <Text label={\"label.partnerOnboarding.rateCard\"} />\n          <div>\n            <FileUploadBox onSelect={uploadAttachment} />\n          </div>\n        </div>\n        <EditableTable\n          standardDataFormatPromise={ProductConfigProductService.getAllAttachmentData}\n          variant=\"tertiary\"\n          breakpoint=\"767px\"\n          className=\"border border-secondary-concrete px-0 overflow-x-auto  rounded-lg read-only-table !min-h-111\"\n          dataKey=\"id\"\n          search={`product.uid=${uid}&isActive=true&`}\n          ref={dataTableRefForRateCard}\n          hidePaginator={PAGE_MODE.CREATE}\n          pageMode={pageMode}\n          rowClassName={pageMode === PAGE_MODE.EDIT && renderRowClassName}\n          showStatusBar={pageMode === PAGE_MODE.EDIT || pageMode === PAGE_MODE.REVIEW}\n          addedRecords={attachmentTypeRecordsAdded}\n        >\n          <Column\n            className=\"w-2/12 h-12 pt-3 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={useTranslateText(\"table.header.productConfiguration.productDetails.attachment\")}\n            body={(rowData: any) => {\n              return rowData?.attachment?.name ? rowData?.attachment?.name : rowData?.name;\n            }}\n          />\n\n          <Column\n            className=\"w-2/12 h-12 pt-3 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={useTranslateText(\n              \"table.header.productConfiguration.productDetails.uploadedDate\"\n            )}\n            body={(rowData: any) => {\n              if (rowData?.attachment?.createdAt) {\n                const months = [\n                  \"Jan\",\n                  \"Feb\",\n                  \"Mar\",\n                  \"Apr\",\n                  \"May\",\n                  \"Jun\",\n                  \"Jul\",\n                  \"Aug\",\n                  \"Sep\",\n                  \"Oct\",\n                  \"Nov\",\n                  \"Dec\",\n                ];\n\n                const inputDate = new Date(rowData.attachment.createdAt);\n                const day = inputDate.getDate();\n                const month = months[inputDate.getMonth()];\n                const year = inputDate.getFullYear();\n                return `${day}-${month}-${year}`;\n              } else {\n                return rowData.createdAt;\n              }\n            }}\n          />\n          <Column\n            className=\"w-2/12 h-12 pt-3 pl-6 text-xs text-left text-primary-ptext-1000\"\n            header={useTranslateText(\"table.header.productConfiguration.productDetails.status\")}\n            body={(rowData: any) => {\n              if (!rowData.isUploaded) {\n                setIsUploading(true);\n              } else {\n                setIsUploading(false);\n              }\n              return rowData?.isUploaded ? \"Uploaded\" : \"Uploading\";\n            }}\n          />\n        </EditableTable>\n      </div>\n\n     <div className=\"flex flex-col gap-3\">\n        <div className=\"flex justify-between w-full mt-3\">\n          <Text label={\"label.partnerOnboarding.gstDetail\"} />\n          <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddGstDetails} />\n        </div>\n        <EditableTableV2\n          uniqueKey=\"uid\"\n          standardDataFormatPromise={PartnerMasterDataService.tableGstDetails}\n          ref={gstDetailsRef}\n          search={uid}\n          mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4 pb-2.5 !h-12 pl-6\"\n            header={\"GST Number*\"}\n            body={renderGstNumberForGstDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4 pb-2.5 !h-12 pl-6\"\n            header={\"GST State\"}\n            body={renderGstStateForGstDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-1/4  !h-12 pl-6 \"\n            header=\"Attachments\"\n            body={renderAttachmentsForGstDetails}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12  !h-12 pl-6 \"\n            header=\"Actions\"\n            body={renderActionsForGstDetails}\n          />\n        </EditableTableV2>\n      </div> \n\n\n */}\n\n          <div className=\"flex flex-col gap-3 \">\n            <div className=\"flex justify-between w-full\">\n              <Text\n                label={\n                  \"label.partnerOnboarding.organisationReportingLevelWhoHaveAccessToThisPartner\"\n                }\n              />\n              <ButtonBox\n                buttonType={BUTTON_TYPE.ICON_TEXT_ROW}\n                onClick={onAddOrganisationLevelReport}\n              />\n            </div>\n            <EditableTableV2\n              uniqueKey=\"uid\"\n              standardDataFormatPromise={PartnerMasterDataService.tableOrgRepLevel}\n              ref={organisationReportingLevelRef}\n              search={`&partner.uid=${uid}`}\n              mode={pageMode === PAGE_MODE.CREATE ? \"CREATE\" : \"UPDATE\"}\n            >\n              <Column\n                className=\"w-1/6 pl-4 pr-4 text-xs text-left text-primary-ptext-1000 \"\n                header={\"Reporting*\"}\n                body={renderReportingForOrganisationReportingLevels}\n              />\n              <Column\n                className=\"w-1/6 pl-4 pr-4 text-xs text-left text-primary-ptext-1000 \"\n                header={\"Reporting To\"}\n                body={renderReportingToForOrganisationReportingLevels}\n              />\n              <Column\n                className=\"w-1/6 pl-4 pr-4 text-xs text-left text-primary-ptext-1000 \"\n                header={\"From*\"}\n                body={renderDateFromForOrganisationLevelReportingLevels}\n              />\n              <Column\n                className=\"w-1/6 pl-4 pr-4 text-xs text-left text-primary-ptext-1000 \"\n                header=\"To\"\n                body={renderDateToForOrganisationLevelReportingLevels}\n              />\n              <Column\n                className=\"w-2/12 h-12 pl-6 text-xs text-left text-primary-ptext-1000\"\n                header=\"IsActive\"\n                body={renderIsUserActiveForOrganisationReportingLevels}\n              />\n              <Column\n                className=\"w-1/6 h-12 text-xs text-left text-primary-ptext-1000 \"\n                header=\"Actions\"\n                body={renderActionsTogglerForOrgReportingLevel}\n              />\n            </EditableTableV2>\n          </div>\n        </AclGuard>\n        <div className=\"\">\n          <ToastCustom\n            position={position}\n            ref={toastMessageRef}\n            toastText={toastMessage}\n            variant={toastMessageVariant}\n            onRemove={() => {\n              if (navigateBack) {\n                props.navigate(linkPartnerOnboarding);\n              }\n            }}\n          />\n          <ErrorDialog\n            onHide={() => setShowDialogAPIError(false)}\n            visible={showDialogAPIError}\n            errorMessage={errorMessage}\n          />\n          <MenuBox\n            className=\"w-20 bg-white font-Roboto text-xs text-primary-pText-1300 pt-2 rounded-lg mt-0.5 flex justify-center align-center shadow-autoCompletePanel\"\n            model={editModuleCardMenu}\n            ref={activeRowRef}\n          />\n        </div>\n      </div>\n    </AclGuard>\n  );\n};\n\nexport default withRouter(PagePartnerOnboardingCreateViewEdit);\n"],"names":["PagePartnerOnboardingCreateViewEdit","props","uid","setUid","useState","timeOutLocal","setTimeOutLocal","pageMode","setPageMode","PAGE_MODE","forceUpdate","useRef","currentDate","setCurrentDate","ContactTypeList","setContactTypeList","reportingList","setReportingList","showDialogAPIError","setShowDialogAPIError","reportingToList","setReportingToList","isDataEntryTypeDisable","setIsDataEntryTypeIsDisable","organisationReportingLevelRef","initialObj","pageObj","setPageObj","initialPageObj","setInitPageObj","partnerList","setPartnerList","channelList","setChannelList","businessConstitutionList","setBusinessConstitutionList","isLoading","setIsLoading","suggestionsTemplate","setSuggestionsTemplate","firstTimeRendering","setFirstTimeRendering","errorMessage","setErrorMessage","toastMessageVariant","setToastMessageVariant","TOAST_STYLE_TYPE","toastMessage","setToastMessage","triggerToast","setTriggerToast","navigateBack","setNavigateBack","position","setPosition","toastMessageRef","simpleValidator","SimpleReactValidator","getStandardValidator","messageReplace","prev","initialObjForOrganisationReporting","useEffect","parsed","queryString","_a","_b","getAbbList","getReportingList","getCurrentDate","getPartnerList","getChannelList","getBusinessConstitutionList","getInitialData","PartnerMasterDataService","res","_d","_c","_f","_e","_g","_h","_i","_j","_k","_l","setCheckboxValues","_m","_n","_o","_p","_r","_q","_t","_s","_u","_v","_w","_x","_y","_z","checkboxValues","err","StaticMasterDataService","handleInputChange","event","name","value","prevPageObj","onCancelClick","linkPartnerOnboarding","onBackClick","prepareToApprove","addedRecordsForOrganisationLevelReporting","obj","convertDateToISO","enrichForCreateApproval","enrichForSave","finalJsonObject","initialJsonObject","OPERATION_TYPE","ENTITY","stringifyObject","onApproveClick","isValid","validateForm","enrichedObj","StaticMasterTypeService","STATIC_MASTER_TYPE_TOAST_TEXT","parseStandardAPIErrorMessage","onEditClick","prepareForSave","objectForSave","onSaveClick","onAddOrganisationLevelReport","validateField","validate","searchAutoCompleteCity","CityService","validateGetAPIResponse","itemTemplateForCity","item","jsxs","jsx","LoadingIcon","Text","itemTemplate","SystemDate","formatDate","error","getPageTitle","debounce","func","delay","onDeleteCommonFunctionForEveryTable","ref","rowData","getReportingToList","start","totalRecords","selectedReporting","key","startValue","limit","searchParam","REPORTING_TYPES","OrgStructureLevelService","results","AUTOCOMPLETE_MESSAGES","OrgStructureBranchService","searchReportingTo","renderReportingForOrganisationReportingLevels","SimpleDropDown","INPUT_STYLE_TYPE","e","rowDataObj","renderReportingToForOrganisationReportingLevels","validationRuleName","AutoComplete","DROPDOWN_STYLE_TYPE","renderDateFromForOrganisationLevelReportingLevels","applicableFromDate","parsedYear","parsedMonth","parsedDay","parsedDate","DatePicker","renderDateToForOrganisationLevelReportingLevels","getParsedDate","renderIsUserActiveForOrganisationReportingLevels","Fragment","onToggleMenu","isActive","isNotActive","deleteOption","list","setEditModuleCardMenu","activeRowRef","editModuleCardMenu","renderActionsTogglerForOrgReportingLevel","ButtonBox","BUTTON_TYPE","allowedDataEntryTable","selectedPartnerType","handleCheckboxChange","checked","updatedCheckboxValues","checkboxName","PartnerType","ChannelType","businessConstitution","reason","city","description","RCUComments","companyProfile","address","AclGuard","PageTitle","InputBox","InputTextArea","RadioButton","EditableTableV2","Column","ToastCustom","ErrorDialog","MenuBox","PagePartnerOnboardingCM","withRouter"],"mappings":"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"}