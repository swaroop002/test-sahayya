{"version":3,"file":"ProfilePictureUpload-60f86be0.js","sources":["../../src/assets/img/common/Upload.svg","../../src/assets/img/fileUploadIcons/Profile_Avatar.svg","../../src/components/ProfilePictureUpload/ProfilePictureUpload.tsx"],"sourcesContent":["export default \"__VITE_ASSET__b7ab5c55__\"","export default \"__VITE_ASSET__7d8e3563__\"","import upload from \"assets/img/common/Upload.svg\";\nimport loader from \"assets/img/fileUploadIcons/Loading.png\";\nimport profileAvatar from \"assets/img/fileUploadIcons/Profile_Avatar.svg\";\nimport CropImage, { ICropImageRef } from \"components/CropImage\";\nimport FileUploadMenuBox from \"components/FileUploadMenuBox\";\nimport Text from \"components/Text\";\nimport React, { ReactNode, useEffect, useRef, useState } from \"react\";\nimport FileUploadService from \"services/FileUploadService\";\nimport { validateGetAPIResponse, validatePostAPIResponse } from \"utils/CommonUtil\";\n\ninterface IProfilePictureUploadProps {\n  className?: string;\n  getUrl: (profileInfo: IProfilePictureInfo) => void;\n  editMode: boolean;\n  sourceURL?: string;\n  isMandatory?: boolean;\n}\n\nexport interface IProfilePictureInfo {\n  imageUrl: string;\n  url: string;\n  thumbUrl: string;\n  fileName: string;\n  isPrivate: boolean;\n  contentType: string;\n}\n\ninterface IUploadStates {\n  uploadStarted: boolean;\n  preview: string;\n  uploadInProgress: boolean;\n  uploaded: boolean;\n  uploadFailed: boolean;\n}\n\nconst initialState = {\n  uploadStarted: false,\n  preview: \"\",\n  uploadInProgress: false,\n  uploaded: false,\n  uploadFailed: false,\n};\n\nconst initialImageInfo = {\n  imageUrl: \"\",\n  url: \"\",\n  thumbUrl: \"\",\n  fileName: \"\",\n  isPrivate: false,\n  contentType: \"\",\n};\n\nconst ProfilePictureUpload: React.FC<IProfilePictureUploadProps> = (\n  props: IProfilePictureUploadProps\n) => {\n  const { className, editMode, getUrl, sourceURL, isMandatory } = props;\n\n  const [uploadStates, setUploadStates] = useState<IUploadStates>(initialState);\n  const [cropImageSource, setCropImageSource] = useState<string | ArrayBuffer | null>(\"\");\n  const [croppedImageFile, setCroppedImageFile] = useState<File | null>(null);\n  const [imageInfo, setImageInfo] = useState<IProfilePictureInfo>(initialImageInfo);\n\n  const [receivedUrl, setReceivedUrl] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const imageCropperRef = useRef<ICropImageRef>(null);\n\n  const menuOptions = [\n    {\n      label: \"Delete\",\n      command: () => {\n        setUploadStates({ ...initialState });\n        setImageInfo({ ...initialImageInfo });\n        setReceivedUrl(\"\");\n        getUrl(initialImageInfo);\n      },\n    },\n  ];\n\n  useEffect(() => {\n    const { preview } = uploadStates;\n    if (preview) {\n      getUrl(imageInfo);\n    }\n  }, [uploadStates]);\n\n  useEffect(() => {\n    setFilePreview();\n  }, [sourceURL]);\n\n  useEffect(() => {\n    if (imageCropperRef.current && !!cropImageSource) {\n      imageCropperRef.current.toggler();\n    }\n  }, [cropImageSource]);\n\n  useEffect(() => {\n    if (croppedImageFile) {\n      uploadImage(croppedImageFile);\n    }\n  }, [croppedImageFile]);\n\n  /*--------------------- Helper Functions -----------------*/\n\n  const setFilePreview = async () => {\n    if (sourceURL) {\n      const signedUrl = await getSigned(sourceURL);\n      setReceivedUrl(signedUrl);\n    }\n  };\n\n  const getSigned = async (url: string) => {\n    const res = await FileUploadService.getSignedURL(url);\n    if (validateGetAPIResponse(res)) {\n      return res.data?.SignedUrl;\n    }\n    return \"\";\n  };\n\n  const getFileSignedUrl = (objectUrl: string) => {\n    FileUploadService.getSignedURL(objectUrl)\n      .then((res) => {\n        if (validateGetAPIResponse(res)) {\n          setUploadStates((prevState) => {\n            return {\n              ...prevState,\n              preview: res.data?.SignedUrl,\n              uploadInProgress: false,\n              uploaded: true,\n            };\n          });\n        } else {\n          setUploadStates((prevState) => {\n            return {\n              ...prevState,\n              uploadInProgress: false,\n              uploadFailed: true,\n            };\n          });\n        }\n      })\n      .catch(() => {\n        setUploadStates((prevState) => {\n          return {\n            ...prevState,\n            uploadInProgress: false,\n            uploadFailed: true,\n          };\n        });\n      });\n  };\n\n  const showImageCropper = (uploadedFile: File) => {\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      setCropImageSource(reader.result?.toString() || \"\");\n    };\n\n    reader.readAsDataURL(uploadedFile);\n  };\n\n  const getCroppedDataUrl = async (dataUrl: string, fileName = \"sample.jpeg\") => {\n    const blob = await (await fetch(dataUrl)).blob();\n    setCroppedImageFile(new File([blob], fileName, { type: blob.type }));\n    setCropImageSource(null);\n  };\n\n  const onCancelImageCroppingDialog = () => {\n    setCropImageSource(null);\n    setUploadStates(initialState);\n  };\n\n  /*---------------------- Event Handlers -----------------------*/\n\n  const onUpload = () => {\n    if (inputRef.current) {\n      inputRef.current.click();\n      setUploadStates({ ...initialState });\n      setReceivedUrl(\"\");\n    }\n  };\n\n  const onUploadFailed = () => {\n    setUploadStates({ ...initialState });\n  };\n\n  const handleImageChange = (e: React.BaseSyntheticEvent): void => {\n    showImageCropper(e.target.files[0]);\n  };\n\n  const uploadImage = (image: File) => {\n    // assign null to the cropped file and prevent useEffect call for uploadImage() as it has dependency on croppedImageFile state\n    setCroppedImageFile(null);\n\n    // show progress(uploading) template\n    setUploadStates((prevState) => {\n      return { ...prevState, uploadStarted: true, uploadInProgress: true };\n    });\n\n    //generate an unique image name\n    const timestamp = new Date().getTime();\n    const randomString = Math.random().toString(36).substring(2, 8);\n    const objectName = `${timestamp}_${randomString}`;\n\n    FileUploadService.saveFile(image, objectName)\n      .then((res) => {\n        if (validatePostAPIResponse(res)) {\n          setImageInfo({\n            imageUrl: res.data.imageUrl,\n            thumbUrl: res.data.thumbUrl,\n            fileName: res.data.fileName,\n            url: res.data.url,\n            contentType: res.data.contentType,\n            isPrivate: res.data.isPrivate,\n          });\n\n          getFileSignedUrl(res.data?.imageUrl);\n          setInterval(() => {\n            getFileSignedUrl(res.data?.imageUrl);\n          }, 1800 * 1000);\n        } else {\n          setUploadStates((prevState) => {\n            return {\n              ...prevState,\n              uploadInProgress: false,\n              uploadFailed: true,\n            };\n          });\n        }\n      })\n      .catch(() => {\n        setUploadStates((prevState) => {\n          return {\n            ...prevState,\n            uploadInProgress: false,\n            uploadFailed: true,\n          };\n        });\n      });\n  };\n\n  /* ------------------ Sectional Renders ----------------------- */\n\n  const uploader = (): ReactNode => {\n    return (\n      <div className={`absolute ${editMode ? \"cursor-pointer\" : \"\"}`} onClick={onUpload}>\n        <input\n          ref={inputRef}\n          className=\"w-full hidden\"\n          type=\"file\"\n          accept=\"image/png, image/jpeg\"\n          onChange={handleImageChange}\n          disabled={!editMode}\n        />\n        <img src={upload} alt=\"upload\" />\n      </div>\n    );\n  };\n\n  const renderImageCropper = (): ReactNode => {\n    if (cropImageSource) {\n      return (\n        <CropImage\n          ref={imageCropperRef}\n          imageSource={cropImageSource.toString()}\n          getDataUrl={getCroppedDataUrl}\n          onCancelImageCroppingDialog={onCancelImageCroppingDialog}\n        />\n      );\n    }\n  };\n\n  const renderFooterText = (): ReactNode => {\n    return (\n      <div className=\"text-secondary-gray-500 text-xs\">\n        <Text\n          label={\n            isMandatory ? \"component.profilePicUpload.mandatory\" : \"component.profilePicUpload\"\n          }\n        />\n      </div>\n    );\n  };\n\n  const emptyTemplate = (): ReactNode => {\n    return (\n      <div className={`flex flex-col gap-2 items-center justify-center relative select-none`}>\n        <div className=\"w-full h-40 pt-6 pb-3 flex justify-center bg-primary-ptext-300\">\n          <span>\n            <img src={profileAvatar} alt=\"icon\" />\n          </span>\n        </div>\n\n        {uploader()}\n\n        {renderFooterText()}\n      </div>\n    );\n  };\n\n  const itemTemplate = (): ReactNode => {\n    const imgSource = uploadStates.preview || receivedUrl;\n\n    return (\n      <div className=\"flex flex-col gap-2 items-center justify-center relative select-none\">\n        <div className=\"w-40 h-40 flex relative\">\n          {imgSource ? (\n            <>\n              <div className={`text-xxs ${editMode ? \"opacity-50\" : \"\"}`}>\n                <img className=\"w-full h-full\" src={imgSource} alt=\"profile-picture\" />\n              </div>\n              {editMode && (\n                <div className={`absolute top-2 right-2`}>\n                  <FileUploadMenuBox model={menuOptions} disabled={!editMode} />\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"w-full bg-primary-ptext-300 text-center py-2 text-xxs text-semantic-crimson-600\">\n              <Text label={\"Can't load preview\"} />\n            </div>\n          )}\n        </div>\n\n        {renderFooterText()}\n      </div>\n    );\n  };\n\n  const progressTemplate = (): ReactNode => {\n    return (\n      <div className=\"flex flex-col gap-2 items-center justify-center select-none \">\n        <div className=\"w-40 h-40 border flex items-center justify-center text-xxs\">\n          <span className=\"w-6 h-6 pointer-events-none cursor-pointer\">\n            <img className=\"w-full h-full animate-spin\" src={loader} alt=\"loader\" />\n          </span>\n        </div>\n\n        {renderFooterText()}\n      </div>\n    );\n  };\n\n  const failedTemplate = (): ReactNode => {\n    return (\n      <div className=\"flex flex-col gap-2 items-center justify-center select-none \">\n        <div className=\"w-40 h-40 bg-primary-ptext-200 border flex items-center justify-center text-xxs text-semantic-crimson-600\">\n          <Text label={\"Profile picture upload failed\"} />\n        </div>\n\n        {renderFooterText()}\n      </div>\n    );\n  };\n\n  const selectTemplate = (): ReactNode => {\n    const { uploadStarted, uploaded, uploadInProgress, uploadFailed } = uploadStates;\n\n    if (!uploadStarted) {\n      return emptyTemplate();\n    } else if (uploadInProgress) {\n      return progressTemplate();\n    } else if (uploadFailed) {\n      setTimeout(onUploadFailed, 3000);\n      return failedTemplate();\n    } else if (uploaded) return itemTemplate();\n  };\n\n  return (\n    <React.Fragment>\n      <div className={`${className}`}>{receivedUrl ? itemTemplate() : selectTemplate()}</div>\n      {/* gets rendered only when image is uploaded */}\n      {cropImageSource && renderImageCropper()}\n    </React.Fragment>\n  );\n};\n\nProfilePictureUpload.defaultProps = {\n  isMandatory: true,\n};\n\n// Memoization\nexport default React.memo(ProfilePictureUpload);\n\n// redux wiring\n"],"names":["upload","profileAvatar","initialState","initialImageInfo","ProfilePictureUpload","props","className","editMode","getUrl","sourceURL","isMandatory","uploadStates","setUploadStates","useState","cropImageSource","setCropImageSource","croppedImageFile","setCroppedImageFile","imageInfo","setImageInfo","receivedUrl","setReceivedUrl","inputRef","useRef","imageCropperRef","menuOptions","useEffect","preview","setFilePreview","uploadImage","signedUrl","getSigned","url","res","FileUploadService","validateGetAPIResponse","_a","getFileSignedUrl","objectUrl","prevState","showImageCropper","uploadedFile","reader","getCroppedDataUrl","dataUrl","fileName","blob","onCancelImageCroppingDialog","onUpload","onUploadFailed","handleImageChange","e","image","timestamp","randomString","objectName","validatePostAPIResponse","uploader","jsxs","jsx","renderImageCropper","CropImage","renderFooterText","Text","emptyTemplate","itemTemplate","imgSource","Fragment","FileUploadMenuBox","progressTemplate","loader","failedTemplate","selectTemplate","uploadStarted","uploaded","uploadInProgress","uploadFailed","React","ProfilePictureUpload$1"],"mappings":"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"}