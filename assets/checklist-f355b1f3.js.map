{"version":3,"file":"checklist-f355b1f3.js","sources":["../../src/views/masterData/productConfiguration/Checklist/ChecklistCreateViewEdit/checklist.tsx"],"sourcesContent":["/**\n * Author : Waseem\n * Created on : 28 June, 2023\n **/\n\n/*\n  -------------------------------------------------------\n   Imports:\n  -------------------------------------------------------\n*/\nimport ButtonBox from \"components/ButtonBox\";\nimport EditableTable from \"components/EditableTable/EditableTable\";\nimport InputBox from \"components/InputBox\";\nimport InputTextArea from \"components/InputTextArea\";\nimport PageTitle from \"components/PageTitle/PageTitle\";\nimport SimpleDropDown from \"components/SimpleDropDown/SimpleDropDown\";\nimport Text from \"components/Text/Text\";\nimport { RouteProps, withRouter } from \"hoc/withRouter\";\nimport { Column } from \"primereact/column\";\nimport queryString from \"query-string\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { linkSystemConfig } from \"routes\";\nimport DemoService from \"services/DemoService\";\nimport {\n  BANKS,\n  BUTTON_TYPE,\n  DROPDOWN_STYLE_TYPE,\n  INPUT_STYLE_TYPE,\n  PAGE_MODE,\n  STATUS_LIST,\n} from \"utils/Constant\";\n\n/*\n  -------------------------------------------------------\n  PROPS:\n  -------------------------------------------------------\n*/\ninterface IProps extends RouteProps {}\n\nconst PageProductConfigurationCheckListCreateViewEdit = (props: IProps) => {\n  /*\n    -------------------------------------------------------\n      States\n    -------------------------------------------------------\n  */\n  const [pageObj, setPageObj] = useState({\n    event: \"\",\n    name: \"\",\n    description: \"\",\n    reasons: \"\",\n    isActive: \"\",\n  });\n  const [pageMode, setPageMode] = useState(PAGE_MODE.CREATE);\n  const [initialObj, setInitialObj] = useState({\n    bank: \"\",\n    lendingType: \"\",\n    amount: \"\",\n    gst: \"\",\n    gstType: \"\",\n    waiver: \"\",\n    cgst: \"\",\n    sgst: \"\",\n    igst: \"\",\n    name: \"\",\n    applicableFrom: \"\",\n  });\n  const isFirstRender = useRef(true);\n  const dataTableRef = useRef(null);\n  const [dataTable, setDataTable] = useState({\n    limit: 10,\n    loading: false,\n    totalRecords: 0,\n    start: 0,\n    search: \"\",\n    runCustomQuery: false,\n    records: [],\n  });\n\n  /*\n    -------------------------------------------------------\n      Hooks: useEffect\n    -------------------------------------------------------\n  */\n  useEffect(() => {\n    let parsed: {\n      mode?: string;\n    } = queryString.parse(props.location.search);\n    if (parsed?.mode && parsed?.mode !== undefined) {\n      setPageMode(parsed.mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      // Skip the effect on initial render\n      isFirstRender.current = false;\n      // @ts-ignore\n      dataTableRef?.current?.addRecords(initialObj);\n      return;\n    }\n\n    // @ts-ignore\n    //dataTableRef?.current?.search();\n  }, [dataTable?.search]);\n\n  /*\n    -------------------------------------------------------\n      Handlers: Event handler for onChange, onBlur etc\n    -------------------------------------------------------\n  */\n\n  const handleInputChange = (event: any) => {\n    const { name, value } = event.target;\n    setPageObj((prevPageObj) => ({\n      ...prevPageObj,\n      [name]: value,\n    }));\n  };\n\n  /* \n    -------------------------------------------------------\n      ButtonClick Functions:\n    -------------------------------------------------------\n  */\n  const onSaveClick = () => {};\n\n  const onCancelClick = () => {\n    props.navigate(linkSystemConfig);\n  };\n\n  const onApproveClick = () => {};\n\n  const onBackClick = () => {\n    props.navigate(linkSystemConfig);\n  };\n\n  const onEditClick = () => {\n    setPageMode(PAGE_MODE.EDIT);\n  };\n\n  const onAddRow = () => {\n    // @ts-ignore\n    dataTableRef?.current?.addRecords(initialObj);\n  };\n\n  /* \n    -------------------------------------------------------\n      Helper Functions:\n    -------------------------------------------------------\n  */\n  const getPageTitle = () => {\n    switch (pageMode) {\n      case PAGE_MODE.CREATE:\n        return \"heading.productConfiguration.checklist.create\";\n      case PAGE_MODE.VIEW:\n        return \"heading.productConfiguration.checklist.view\";\n      case PAGE_MODE.EDIT:\n        return \"heading.productConfiguration.checklist.edit\";\n      default:\n        return \"heading.productConfiguration.checklist.create\";\n    }\n  };\n\n  const onEditorValueChange = (props: any, value: any, field: any) => {\n    let updatedProducts = [...props.props.value];\n    updatedProducts[props.rowIndex][field] = value;\n    console.log(updatedProducts);\n    // @ts-ignore\n    dataTableRef?.current?.updateRecords(updatedProducts);\n  };\n\n  const renderBank = (rowData: any, props: any) => {\n    return (\n      <SimpleDropDown\n        variant={DROPDOWN_STYLE_TYPE.SECONDARY}\n        options={BANKS}\n        onChange={(e) => {\n          onEditorValueChange(props, e.target.value, \"bank\");\n        }}\n        value={rowData.bank}\n      />\n    );\n  };\n\n  const renderLendingType = (rowData: any, props: any) => {\n    return (\n      <InputBox\n        value={rowData.lendingType}\n        variant={INPUT_STYLE_TYPE.SECONDARY}\n        onChange={(e) => {\n          onEditorValueChange(props, e.target.value, \"lendingType\");\n        }}\n      />\n    );\n  };\n\n  /* \n    -------------------------------------------------------\n      Sectional Render Functions: For Sub components / section wise renders\n    -------------------------------------------------------\n  */\n  const { event, name, description, reasons, isActive } = pageObj;\n  return (\n    <div className=\"h-full mx-6\">\n      <div className=\"flex w-full justify-between pt-6 items-center\">\n        <div className=\" h-7.5\">\n          <PageTitle title={getPageTitle()} />\n        </div>\n        <div className=\"flex mr-5\">\n          {pageMode === PAGE_MODE.CREATE || pageMode === PAGE_MODE.EDIT ? (\n            <>\n              <div className=\"mr-5\">\n                <ButtonBox buttonType={BUTTON_TYPE.CANCEL_OUTLINE} onClick={onCancelClick} />\n              </div>\n              <div className=\"mr-10\">\n                <ButtonBox buttonType={BUTTON_TYPE.SAVE_OUTLINE} onClick={onSaveClick} />\n              </div>\n              <div>\n                <ButtonBox\n                  className=\"approve-primary\"\n                  buttonType={BUTTON_TYPE.SEND_FOR_APPROVAL}\n                  onClick={onApproveClick}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"mr-5\">\n                <ButtonBox buttonType={BUTTON_TYPE.BACK_OUTLINE} onClick={onBackClick} />\n              </div>\n              <div className=\"\">\n                <ButtonBox\n                  buttonType={BUTTON_TYPE.EDIT_OUTLINE}\n                  className=\"blue-primary\"\n                  onClick={onEditClick}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"grid grid-cols-4 gap-3\">\n        <div className=\"col-span-1\">\n          <SimpleDropDown\n            label=\"input.productConfiguration.checklist.event\"\n            name=\"event\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            onChange={handleInputChange}\n            value={event}\n            disabled={pageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n        <div className=\"col-span-1\">\n          <InputBox\n            label=\"input.productConfiguration.checklist.name\"\n            name=\"name\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            onChange={handleInputChange}\n            value={name}\n            disabled={pageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n      </div>\n      <div className=\"grid grid-cols-4 gap-3\">\n        <div className=\"col-span-2\">\n          <InputTextArea\n            label=\"input.productConfiguration.checklist.description\"\n            name=\"description\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            maxCount={200}\n            onChange={handleInputChange}\n            value={description}\n            disabled={pageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n        <div className=\"col-span-2\">\n          <InputTextArea\n            label=\"input.productConfiguration.checklist.reasons\"\n            name=\"reasons\"\n            variant={INPUT_STYLE_TYPE.SECONDARY}\n            maxCount={200}\n            onChange={handleInputChange}\n            value={reasons}\n            disabled={pageMode === PAGE_MODE.VIEW}\n          />\n        </div>\n      </div>\n      {/* <div className=\"mt-3 flex w-full justify-between\">\n        <Text\n          label=\"text.productConfiguration.approval\"\n          className=\"text-primary-ptext-1000 text-base font-Roboto font-bold flex\"\n        />\n        <ButtonBox buttonType={BUTTON_TYPE.ICON_TEXT_ROW} onClick={onAddRow} />\n      </div>\n      <div className=\"\">\n        <EditableTable\n          standardDataFormatPromise={false ? DemoService.getAll : null}\n         \n          dataKey=\"id\"\n          search={dataTable.search}\n          ref={dataTableRef}\n          hidePaginator\n          pageMode={pageMode}\n        >\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n            header=\"Department\"\n            body={renderBank}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n            header=\"Applicable From *\"\n            body={renderLendingType}\n          />\n          <Column\n            className=\"text-primary-ptext-1000 text-left text-xs w-2/12 p-1 h-12 pl-6\"\n            header=\"Application to*\"\n            body={renderBank}\n          />\n        </EditableTable>\n      </div> */}\n    </div>\n  );\n};\n\nexport default withRouter(PageProductConfigurationCheckListCreateViewEdit);\n"],"names":["PageProductConfigurationCheckListCreateViewEdit","props","pageObj","setPageObj","useState","pageMode","setPageMode","PAGE_MODE","initialObj","setInitialObj","isFirstRender","useRef","dataTableRef","dataTable","setDataTable","useEffect","parsed","queryString","_a","handleInputChange","event","name","value","prevPageObj","onSaveClick","onCancelClick","linkSystemConfig","onApproveClick","onBackClick","onEditClick","getPageTitle","description","reasons","isActive","jsxs","jsx","PageTitle","Fragment","ButtonBox","BUTTON_TYPE","SimpleDropDown","INPUT_STYLE_TYPE","InputBox","InputTextArea","checklist","withRouter"],"mappings":"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"}